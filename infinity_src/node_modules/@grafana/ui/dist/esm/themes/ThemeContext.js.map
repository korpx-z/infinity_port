{"version":3,"file":"ThemeContext.js","sources":["../../../src/themes/ThemeContext.tsx"],"sourcesContent":["import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { useContext } from 'react';\n\nimport { createTheme, GrafanaTheme, GrafanaTheme2 } from '@grafana/data';\n\nimport { Themeable, Themeable2 } from '../types/theme';\n\nimport { stylesFactory } from './stylesFactory';\n\ntype Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\ntype Subtract<T, K> = Omit<T, keyof K>;\n\n/**\n * Mock used in tests\n */\nlet ThemeContextMock: React.Context<GrafanaTheme2> | null = null;\n\n// Used by useStyles()\nexport const memoizedStyleCreators = new WeakMap();\n\n// Use Grafana Dark theme by default\n/** @public */\nexport const ThemeContext = React.createContext(createTheme());\n\nThemeContext.displayName = 'ThemeContext';\n\n/** @deprecated use withTheme2 */\n/** @public */\nexport const withTheme = <P extends Themeable, S extends {} = {}>(Component: React.ComponentType<P>) => {\n  const WithTheme: React.FunctionComponent<Subtract<P, Themeable>> = (props) => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      // @ts-ignore\n      <ContextComponent.Consumer>{(theme) => <Component {...props} theme={theme.v1} />}</ContextComponent.Consumer>\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  type Hoisted = typeof WithTheme & S;\n  return WithTheme as Hoisted;\n};\n\n/** @alpha */\nexport const withTheme2 = <P extends Themeable2, S extends {} = {}>(Component: React.ComponentType<P>) => {\n  const WithTheme: React.FunctionComponent<Subtract<P, Themeable2>> = (props) => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      // @ts-ignore\n      <ContextComponent.Consumer>{(theme) => <Component {...props} theme={theme} />}</ContextComponent.Consumer>\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  type Hoisted = typeof WithTheme & S;\n  return WithTheme as Hoisted;\n};\n\n/** @deprecated use useTheme2 */\n/** @public */\nexport function useTheme(): GrafanaTheme {\n  return useContext(ThemeContextMock || ThemeContext).v1;\n}\n\n/** @public */\nexport function useTheme2(): GrafanaTheme2 {\n  return useContext(ThemeContextMock || ThemeContext);\n}\n\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n/** @deprecated use useStyles2 */\n/** @public */\nexport function useStyles<T>(getStyles: (theme: GrafanaTheme) => T) {\n  const theme = useTheme();\n\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles) as typeof getStyles;\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n/** @public */\nexport function useStyles2<T>(getStyles: (theme: GrafanaTheme2) => T) {\n  const theme = useTheme2();\n\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles) as typeof getStyles;\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n\n/**\n * Enables theme context  mocking\n */\n/** @public */\nexport const mockThemeContext = (theme: Partial<GrafanaTheme2>) => {\n  ThemeContextMock = React.createContext(theme as GrafanaTheme2);\n\n  return () => {\n    ThemeContextMock = null;\n  };\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAI,gBAAwD,GAAA,IAAA,CAAA;AAG/C,MAAA,qBAAA,uBAA4B,OAAQ,GAAA;AAI1C,MAAM,YAAe,GAAAA,cAAA,CAAM,aAAc,CAAA,WAAA,EAAa,EAAA;AAE7D,YAAA,CAAa,WAAc,GAAA,cAAA,CAAA;AAId,MAAA,SAAA,GAAY,CAAyC,SAAsC,KAAA;AACtG,EAAM,MAAA,SAAA,GAA6D,CAAC,KAAU,KAAA;AAK5E,IAAA,MAAM,mBAAmB,gBAAoB,IAAA,YAAA,CAAA;AAC7C,IAAA;AAAA;AAAA,sBAEGA,cAAA,CAAA,aAAA,CAAA,gBAAA,CAAiB,QAAjB,EAAA,IAAA,EAA2B,CAAC,KAAA,qBAAWA,cAAA,CAAA,aAAA,CAAA,SAAA,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAc,KAAd,CAAA,EAAA,EAAqB,KAAO,EAAA,KAAA,CAAM,KAAI,CAAG,CAAA;AAAA,MAAA;AAAA,GAErF,CAAA;AAEA,EAAU,SAAA,CAAA,WAAA,GAAc,aAAa,SAAU,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AAC/C,EAAA,oBAAA,CAAqB,WAAW,SAAS,CAAA,CAAA;AAEzC,EAAO,OAAA,SAAA,CAAA;AACT,EAAA;AAGa,MAAA,UAAA,GAAa,CAA0C,SAAsC,KAAA;AACxG,EAAM,MAAA,SAAA,GAA8D,CAAC,KAAU,KAAA;AAK7E,IAAA,MAAM,mBAAmB,gBAAoB,IAAA,YAAA,CAAA;AAC7C,IAAA;AAAA;AAAA,sBAEEA,cAAA,CAAA,aAAA,CAAC,gBAAiB,CAAA,QAAA,EAAjB,IAA2B,EAAA,CAAC,KAAU,qBAAAA,cAAA,CAAA,aAAA,CAAC,SAAc,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAd,EAAqB,KAAA,EAAA,CAAc,CAAG,CAAA;AAAA,MAAA;AAAA,GAElF,CAAA;AAEA,EAAU,SAAA,CAAA,WAAA,GAAc,aAAa,SAAU,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AAC/C,EAAA,oBAAA,CAAqB,WAAW,SAAS,CAAA,CAAA;AAEzC,EAAO,OAAA,SAAA,CAAA;AACT,EAAA;AAIO,SAAS,QAAyB,GAAA;AACvC,EAAO,OAAA,UAAA,CAAW,gBAAoB,IAAA,YAAY,CAAE,CAAA,EAAA,CAAA;AACtD,CAAA;AAGO,SAAS,SAA2B,GAAA;AACzC,EAAO,OAAA,UAAA,CAAW,oBAAoB,YAAY,CAAA,CAAA;AACpD,CAAA;AAWO,SAAS,UAAa,SAAuC,EAAA;AAClE,EAAA,MAAM,QAAQ,QAAS,EAAA,CAAA;AAEvB,EAAI,IAAA,oBAAA,GAAuB,qBAAsB,CAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAC9D,EAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,IAAA,oBAAA,GAAuB,cAAc,SAAS,CAAA,CAAA;AAC9C,IAAsB,qBAAA,CAAA,GAAA,CAAI,WAAW,oBAAoB,CAAA,CAAA;AAAA,GAC3D;AAEA,EAAA,OAAO,qBAAqB,KAAK,CAAA,CAAA;AACnC,CAAA;AAUO,SAAS,WAAc,SAAwC,EAAA;AACpE,EAAA,MAAM,QAAQ,SAAU,EAAA,CAAA;AAExB,EAAI,IAAA,oBAAA,GAAuB,qBAAsB,CAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAC9D,EAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,IAAA,oBAAA,GAAuB,cAAc,SAAS,CAAA,CAAA;AAC9C,IAAsB,qBAAA,CAAA,GAAA,CAAI,WAAW,oBAAoB,CAAA,CAAA;AAAA,GAC3D;AAEA,EAAA,OAAO,qBAAqB,KAAK,CAAA,CAAA;AACnC,CAAA;AAMa,MAAA,gBAAA,GAAmB,CAAC,KAAkC,KAAA;AACjE,EAAmB,gBAAA,GAAAA,cAAA,CAAM,cAAc,KAAsB,CAAA,CAAA;AAE7D,EAAA,OAAO,MAAM;AACX,IAAmB,gBAAA,GAAA,IAAA,CAAA;AAAA,GACrB,CAAA;AACF;;;;"}