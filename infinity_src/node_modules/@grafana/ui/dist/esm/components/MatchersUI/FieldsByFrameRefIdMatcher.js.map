{"version":3,"file":"FieldsByFrameRefIdMatcher.js","sources":["../../../../src/components/MatchersUI/FieldsByFrameRefIdMatcher.tsx"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\n\nimport { FieldMatcherID, fieldMatchers, SelectableValue, DataFrame } from '@grafana/data';\n\nimport { Select } from '../Select/Select';\n\nimport { MatcherUIProps, FieldMatcherUIRegistryItem } from './types';\n\n/**\n * UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\nexport const FieldsByFrameRefIdMatcher = memo<MatcherUIProps<string>>((props) => {\n  const { data, options, onChange: onChangeFromProps } = props;\n  const referenceIDs = useFrameRefIds(data);\n  const selectOptions = useSelectOptions(referenceIDs);\n\n  const onChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      if (!selection.value || !referenceIDs.has(selection.value)) {\n        return;\n      }\n      return onChangeFromProps(selection.value);\n    },\n    [referenceIDs, onChangeFromProps]\n  );\n\n  const selectedOption = selectOptions.find((v) => v.value === options);\n  return <Select value={selectedOption} options={selectOptions} onChange={onChange} />;\n});\n\nFieldsByFrameRefIdMatcher.displayName = 'FieldsByFrameRefIdMatcher';\n\n/**\n * Registry item for UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\nexport const fieldsByFrameRefIdItem: FieldMatcherUIRegistryItem<string> = {\n  id: FieldMatcherID.byFrameRefID,\n  component: FieldsByFrameRefIdMatcher,\n  matcher: fieldMatchers.get(FieldMatcherID.byFrameRefID),\n  name: 'Fields returned by query',\n  description: 'Set properties for fields from a specific query',\n  optionsToLabel: (options) => options,\n};\n\nconst useFrameRefIds = (data: DataFrame[]): Set<string> => {\n  return useMemo(() => {\n    const refIds: Set<string> = new Set();\n\n    for (const frame of data) {\n      if (frame.refId) {\n        refIds.add(frame.refId);\n      }\n    }\n\n    return refIds;\n  }, [data]);\n};\n\nconst useSelectOptions = (displayNames: Set<string>): Array<SelectableValue<string>> => {\n  return useMemo(() => {\n    return Array.from(displayNames).map((n) => ({\n      value: n,\n      label: n,\n    }));\n  }, [displayNames]);\n};\n"],"names":[],"mappings":";;;;AAYa,MAAA,yBAAA,GAA4B,IAA6B,CAAA,CAAC,KAAU,KAAA;AAC/E,EAAA,MAAM,EAAE,IAAA,EAAM,OAAS,EAAA,QAAA,EAAU,mBAAsB,GAAA,KAAA,CAAA;AACvD,EAAM,MAAA,YAAA,GAAe,eAAe,IAAI,CAAA,CAAA;AACxC,EAAM,MAAA,aAAA,GAAgB,iBAAiB,YAAY,CAAA,CAAA;AAEnD,EAAA,MAAM,QAAW,GAAA,WAAA;AAAA,IACf,CAAC,SAAuC,KAAA;AACtC,MAAI,IAAA,CAAC,UAAU,KAAS,IAAA,CAAC,aAAa,GAAI,CAAA,SAAA,CAAU,KAAK,CAAG,EAAA;AAC1D,QAAA,OAAA;AAAA,OACF;AACA,MAAO,OAAA,iBAAA,CAAkB,UAAU,KAAK,CAAA,CAAA;AAAA,KAC1C;AAAA,IACA,CAAC,cAAc,iBAAiB,CAAA;AAAA,GAClC,CAAA;AAEA,EAAA,MAAM,iBAAiB,aAAc,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,CAAA,CAAE,UAAU,OAAO,CAAA,CAAA;AACpE,EAAA,oDAAQ,MAAO,EAAA,EAAA,KAAA,EAAO,cAAgB,EAAA,OAAA,EAAS,eAAe,QAAoB,EAAA,CAAA,CAAA;AACpF,CAAC,EAAA;AAED,yBAAA,CAA0B,WAAc,GAAA,2BAAA,CAAA;AAMjC,MAAM,sBAA6D,GAAA;AAAA,EACxE,IAAI,cAAe,CAAA,YAAA;AAAA,EACnB,SAAW,EAAA,yBAAA;AAAA,EACX,OAAS,EAAA,aAAA,CAAc,GAAI,CAAA,cAAA,CAAe,YAAY,CAAA;AAAA,EACtD,IAAM,EAAA,0BAAA;AAAA,EACN,WAAa,EAAA,iDAAA;AAAA,EACb,cAAA,EAAgB,CAAC,OAAY,KAAA,OAAA;AAC/B,EAAA;AAEA,MAAM,cAAA,GAAiB,CAAC,IAAmC,KAAA;AACzD,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAM,MAAA,MAAA,uBAA0B,GAAI,EAAA,CAAA;AAEpC,IAAA,KAAA,MAAW,SAAS,IAAM,EAAA;AACxB,MAAA,IAAI,MAAM,KAAO,EAAA;AACf,QAAO,MAAA,CAAA,GAAA,CAAI,MAAM,KAAK,CAAA,CAAA;AAAA,OACxB;AAAA,KACF;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT,EAAG,CAAC,IAAI,CAAC,CAAA,CAAA;AACX,CAAA,CAAA;AAEA,MAAM,gBAAA,GAAmB,CAAC,YAA8D,KAAA;AACtF,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAA,OAAO,MAAM,IAAK,CAAA,YAAY,CAAE,CAAA,GAAA,CAAI,CAAC,CAAO,MAAA;AAAA,MAC1C,KAAO,EAAA,CAAA;AAAA,MACP,KAAO,EAAA,CAAA;AAAA,KACP,CAAA,CAAA,CAAA;AAAA,GACJ,EAAG,CAAC,YAAY,CAAC,CAAA,CAAA;AACnB,CAAA;;;;"}