{"version":3,"file":"utils.js","sources":["../../../../src/components/GraphNG/utils.ts"],"sourcesContent":["import { ArrayVector, DataFrame, Field, FieldConfig, FieldType, outerJoinDataFrames, TimeRange } from '@grafana/data';\nimport {\n  AxisPlacement,\n  GraphDrawStyle,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n} from '@grafana/schema';\n\nimport { FIXED_UNIT } from './GraphNG';\nimport { applyNullInsertThreshold } from './nullInsertThreshold';\nimport { nullToUndefThreshold } from './nullToUndefThreshold';\nimport { XYFieldMatchers } from './types';\n\nfunction isVisibleBarField(f: Field) {\n  return (\n    f.type === FieldType.number && f.config.custom?.drawStyle === GraphDrawStyle.Bars && !f.config.custom?.hideFrom?.viz\n  );\n}\n\n// will mutate the DataFrame's fields' values\nfunction applySpanNullsThresholds(frame: DataFrame) {\n  let refField = frame.fields.find((field) => field.type === FieldType.time); // this doesnt need to be time, just any numeric/asc join field\n  let refValues = refField?.values.toArray() as any[];\n\n  for (let i = 0; i < frame.fields.length; i++) {\n    let field = frame.fields[i];\n\n    if (field === refField || isVisibleBarField(field)) {\n      continue;\n    }\n\n    let spanNulls = field.config.custom?.spanNulls;\n\n    if (typeof spanNulls === 'number') {\n      if (spanNulls !== -1) {\n        field.values = new ArrayVector(nullToUndefThreshold(refValues, field.values.toArray(), spanNulls));\n      }\n    }\n  }\n\n  return frame;\n}\n\nexport function preparePlotFrame(frames: DataFrame[], dimFields: XYFieldMatchers, timeRange?: TimeRange | null) {\n  // apply null insertions at interval\n  frames = frames.map((frame) => {\n    if (!frame.fields[0].state?.nullThresholdApplied) {\n      return applyNullInsertThreshold({\n        frame,\n        refFieldName: null,\n        refFieldPseudoMin: timeRange?.from.valueOf(),\n        refFieldPseudoMax: timeRange?.to.valueOf(),\n      });\n    } else {\n      return frame;\n    }\n  });\n\n  let numBarSeries = 0;\n\n  frames.forEach((frame) => {\n    frame.fields.forEach((f) => {\n      if (isVisibleBarField(f)) {\n        // prevent minesweeper-expansion of nulls (gaps) when joining bars\n        // since bar width is determined from the minimum distance between non-undefined values\n        // (this strategy will still retain any original pre-join nulls, though)\n        f.config.custom = {\n          ...f.config.custom,\n          spanNulls: -1,\n        };\n\n        numBarSeries++;\n      }\n    });\n  });\n\n  // to make bar widths of all series uniform (equal to narrowest bar series), find smallest distance between x points\n  let minXDelta = Infinity;\n\n  if (numBarSeries > 1) {\n    frames.forEach((frame) => {\n      if (!frame.fields.some(isVisibleBarField)) {\n        return;\n      }\n\n      const xVals = frame.fields[0].values.toArray();\n\n      for (let i = 0; i < xVals.length; i++) {\n        if (i > 0) {\n          minXDelta = Math.min(minXDelta, xVals[i] - xVals[i - 1]);\n        }\n      }\n    });\n  }\n\n  let alignedFrame = outerJoinDataFrames({\n    frames,\n    joinBy: dimFields.x,\n    keep: dimFields.y,\n    keepOriginIndices: true,\n  });\n\n  if (alignedFrame) {\n    alignedFrame = applySpanNullsThresholds(alignedFrame);\n\n    // append 2 null vals at minXDelta to bar series\n    if (minXDelta !== Infinity) {\n      alignedFrame.fields.forEach((f, fi) => {\n        let vals = f.values.toArray();\n\n        if (fi === 0) {\n          let lastVal = vals[vals.length - 1];\n          vals.push(lastVal + minXDelta, lastVal + 2 * minXDelta);\n        } else if (isVisibleBarField(f)) {\n          vals.push(null, null);\n        } else {\n          vals.push(undefined, undefined);\n        }\n      });\n\n      alignedFrame.length += 2;\n    }\n\n    return alignedFrame;\n  }\n\n  return null;\n}\n\nexport function buildScaleKey(config: FieldConfig<GraphFieldConfig>) {\n  const defaultPart = 'na';\n\n  const scaleRange = `${config.min !== undefined ? config.min : defaultPart}-${\n    config.max !== undefined ? config.max : defaultPart\n  }`;\n\n  const scaleSoftRange = `${config.custom?.axisSoftMin !== undefined ? config.custom.axisSoftMin : defaultPart}-${\n    config.custom?.axisSoftMax !== undefined ? config.custom.axisSoftMax : defaultPart\n  }`;\n\n  const scalePlacement = `${\n    config.custom?.axisPlacement !== undefined ? config.custom?.axisPlacement : AxisPlacement.Auto\n  }`;\n\n  const scaleUnit = config.unit ?? FIXED_UNIT;\n\n  const scaleDistribution = config.custom?.scaleDistribution\n    ? getScaleDistributionPart(config.custom.scaleDistribution)\n    : ScaleDistribution.Linear;\n\n  const scaleLabel = Boolean(config.custom?.axisLabel) ? config.custom!.axisLabel : defaultPart;\n\n  return `${scaleUnit}/${scaleRange}/${scaleSoftRange}/${scalePlacement}/${scaleDistribution}/${scaleLabel}`;\n}\n\nfunction getScaleDistributionPart(config: ScaleDistributionConfig) {\n  if (config.type === ScaleDistribution.Log) {\n    return `${config.type}${config.log}`;\n  }\n  return config.type;\n}\n"],"names":[],"mappings":"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"}