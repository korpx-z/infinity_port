{"version":3,"file":"PlotLegend.js","sources":["../../../../src/components/uPlot/PlotLegend.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataFrame,\n  DisplayProcessor,\n  DisplayValue,\n  fieldReducers,\n  getDisplayProcessor,\n  getFieldDisplayName,\n  getFieldSeriesColor,\n  reduceField,\n  ReducerID,\n} from '@grafana/data';\nimport { VizLegendOptions, AxisPlacement } from '@grafana/schema';\n\nimport { useTheme2 } from '../../themes';\nimport { VizLayout, VizLayoutLegendProps } from '../VizLayout/VizLayout';\nimport { VizLegend } from '../VizLegend/VizLegend';\nimport { VizLegendItem } from '../VizLegend/types';\n\nimport { UPlotConfigBuilder } from './config/UPlotConfigBuilder';\n\nconst defaultFormatter = (v: any) => (v == null ? '-' : v.toFixed(1));\n\ninterface PlotLegendProps extends VizLegendOptions, Omit<VizLayoutLegendProps, 'children'> {\n  data: DataFrame[];\n  config: UPlotConfigBuilder;\n}\n\nexport const PlotLegend = React.memo(\n  ({ data, config, placement, calcs, displayMode, ...vizLayoutLegendProps }: PlotLegendProps) => {\n    const theme = useTheme2();\n    const legendItems = config\n      .getSeries()\n      .map<VizLegendItem | undefined>((s) => {\n        const seriesConfig = s.props;\n        const fieldIndex = seriesConfig.dataFrameFieldIndex;\n        const axisPlacement = config.getAxisPlacement(s.props.scaleKey);\n\n        if (!fieldIndex) {\n          return undefined;\n        }\n\n        const field = data[fieldIndex.frameIndex]?.fields[fieldIndex.fieldIndex];\n\n        if (!field || field.config.custom?.hideFrom?.legend) {\n          return undefined;\n        }\n\n        const label = getFieldDisplayName(field, data[fieldIndex.frameIndex]!, data);\n        const scaleColor = getFieldSeriesColor(field, theme);\n        const seriesColor = scaleColor.color;\n\n        return {\n          disabled: !(seriesConfig.show ?? true),\n          fieldIndex,\n          color: seriesColor,\n          label,\n          yAxis: axisPlacement === AxisPlacement.Left || axisPlacement === AxisPlacement.Bottom ? 1 : 2,\n          getDisplayValues: () => {\n            if (!calcs?.length) {\n              return [];\n            }\n\n            const fmt = field.display ?? defaultFormatter;\n            let countFormatter: DisplayProcessor | null = null;\n\n            const fieldCalcs = reduceField({\n              field,\n              reducers: calcs,\n            });\n\n            return calcs.map<DisplayValue>((reducerId) => {\n              const fieldReducer = fieldReducers.get(reducerId);\n              let formatter = fmt;\n\n              if (fieldReducer.id === ReducerID.diffperc) {\n                formatter = getDisplayProcessor({\n                  field: {\n                    ...field,\n                    config: {\n                      ...field.config,\n                      unit: 'percentunit',\n                    },\n                  },\n                  theme,\n                });\n              }\n\n              if (\n                fieldReducer.id === ReducerID.count ||\n                fieldReducer.id === ReducerID.changeCount ||\n                fieldReducer.id === ReducerID.distinctCount\n              ) {\n                if (!countFormatter) {\n                  countFormatter = getDisplayProcessor({\n                    field: {\n                      ...field,\n                      config: {\n                        ...field.config,\n                        unit: 'none',\n                      },\n                    },\n                    theme,\n                  });\n                }\n                formatter = countFormatter;\n              }\n\n              return {\n                ...formatter(fieldCalcs[reducerId]),\n                title: fieldReducer.name,\n                description: fieldReducer.description,\n              };\n            });\n          },\n          getItemKey: () => `${label}-${fieldIndex.frameIndex}-${fieldIndex.fieldIndex}`,\n        };\n      })\n      .filter((i) => i !== undefined) as VizLegendItem[];\n\n    return (\n      <VizLayout.Legend placement={placement} {...vizLayoutLegendProps}>\n        <VizLegend\n          placement={placement}\n          items={legendItems}\n          displayMode={displayMode}\n          sortBy={vizLayoutLegendProps.sortBy}\n          sortDesc={vizLayoutLegendProps.sortDesc}\n        />\n      </VizLayout.Legend>\n    );\n  }\n);\n\nPlotLegend.displayName = 'PlotLegend';\n"],"names":["React","_a","_b"],"mappings":"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"}