import React__default, { useRef, useState, useEffect, useLayoutEffect } from 'react';
import { useMountedState } from 'react-use';
import { DashboardCursorSync, getDisplayProcessor, FALLBACK_COLOR, getFieldDisplayName, formattedValueToString, FieldType, arrayUtils } from '@grafana/data';
import { TooltipDisplayMode, SortOrder } from '@grafana/schema';
import { useTheme2 } from '../../../themes/ThemeContext.js';
import { Portal } from '../../Portal/Portal.js';
import '../../VizTooltip/VizTooltip.js';
import { VizTooltipContainer } from '../../VizTooltip/VizTooltipContainer.js';
import { SeriesTable } from '../../VizTooltip/SeriesTable.js';
import { pluginLog, findMidPointYPosition } from '../utils.js';

var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TOOLTIP_OFFSET = 10;
const TooltipPlugin = (_a) => {
  var _b = _a, {
    mode = TooltipDisplayMode.Single,
    sortOrder = SortOrder.None,
    sync,
    timeZone,
    config,
    renderTooltip
  } = _b, otherProps = __objRest(_b, [
    "mode",
    "sortOrder",
    "sync",
    "timeZone",
    "config",
    "renderTooltip"
  ]);
  var _a2, _b2, _c, _d, _e;
  const plotInstance = useRef();
  const theme = useTheme2();
  const [focusedSeriesIdx, setFocusedSeriesIdx] = useState(null);
  const [focusedPointIdx, setFocusedPointIdx] = useState(null);
  const [focusedPointIdxs, setFocusedPointIdxs] = useState([]);
  const [coords, setCoords] = useState(null);
  const [isActive, setIsActive] = useState(false);
  const isMounted = useMountedState();
  const pluginId = `TooltipPlugin`;
  useEffect(() => {
    pluginLog(pluginId, true, `Focused series: ${focusedSeriesIdx}, focused point: ${focusedPointIdx}`);
  }, [focusedPointIdx, focusedSeriesIdx]);
  useLayoutEffect(() => {
    let bbox = void 0;
    const plotEnter = () => {
      var _a3;
      if (!isMounted()) {
        return;
      }
      setIsActive(true);
      (_a3 = plotInstance.current) == null ? void 0 : _a3.root.classList.add("plot-active");
    };
    const plotLeave = () => {
      var _a3;
      if (!isMounted()) {
        return;
      }
      setCoords(null);
      setIsActive(false);
      (_a3 = plotInstance.current) == null ? void 0 : _a3.root.classList.remove("plot-active");
    };
    config.addHook("syncRect", (u, rect) => bbox = rect);
    config.addHook("init", (u) => {
      var _a3, _b3;
      plotInstance.current = u;
      (_a3 = u.root.parentElement) == null ? void 0 : _a3.addEventListener("focus", plotEnter);
      u.over.addEventListener("mouseenter", plotEnter);
      (_b3 = u.root.parentElement) == null ? void 0 : _b3.addEventListener("blur", plotLeave);
      u.over.addEventListener("mouseleave", plotLeave);
      if (sync && sync() === DashboardCursorSync.Crosshair) {
        u.root.classList.add("shared-crosshair");
      }
    });
    const tooltipInterpolator = config.getTooltipInterpolator();
    if (tooltipInterpolator) {
      config.addHook("setCursor", (u) => {
        tooltipInterpolator(
          setFocusedSeriesIdx,
          setFocusedPointIdx,
          (clear) => {
            if (clear) {
              setCoords(null);
              return;
            }
            if (!bbox) {
              return;
            }
            const { x, y } = positionTooltip(u, bbox);
            if (x !== void 0 && y !== void 0) {
              setCoords({ x, y });
            }
          },
          u
        );
      });
    } else {
      config.addHook("setLegend", (u) => {
        if (!isMounted()) {
          return;
        }
        setFocusedPointIdx(u.legend.idx);
        setFocusedPointIdxs(u.legend.idxs.slice());
      });
      config.addHook("setCursor", (u) => {
        if (!bbox || !isMounted()) {
          return;
        }
        const { x, y } = positionTooltip(u, bbox);
        if (x !== void 0 && y !== void 0) {
          setCoords({ x, y });
        } else {
          setCoords(null);
        }
      });
      config.addHook("setSeries", (_, idx) => {
        if (!isMounted()) {
          return;
        }
        setFocusedSeriesIdx(idx);
      });
    }
    return () => {
      var _a3, _b3;
      setCoords(null);
      if (plotInstance.current) {
        plotInstance.current.over.removeEventListener("mouseleave", plotLeave);
        plotInstance.current.over.removeEventListener("mouseenter", plotEnter);
        (_a3 = plotInstance.current.root.parentElement) == null ? void 0 : _a3.removeEventListener("focus", plotEnter);
        (_b3 = plotInstance.current.root.parentElement) == null ? void 0 : _b3.removeEventListener("blur", plotLeave);
      }
    };
  }, [config, setCoords, setIsActive, setFocusedPointIdx, setFocusedPointIdxs]);
  if (focusedPointIdx === null || !isActive && sync && sync() === DashboardCursorSync.Crosshair) {
    return null;
  }
  let xField = otherProps.data.fields[0];
  if (!xField) {
    return null;
  }
  const xFieldFmt = xField.display || getDisplayProcessor({ field: xField, timeZone, theme });
  let tooltip = null;
  let xVal = xFieldFmt(xField.values.get(focusedPointIdx)).text;
  if (!renderTooltip) {
    if (mode === TooltipDisplayMode.Single && focusedSeriesIdx !== null) {
      const field = otherProps.data.fields[focusedSeriesIdx];
      if (!field) {
        return null;
      }
      const dataIdx = (_a2 = focusedPointIdxs == null ? void 0 : focusedPointIdxs[focusedSeriesIdx]) != null ? _a2 : focusedPointIdx;
      xVal = xFieldFmt(xField.values.get(dataIdx)).text;
      const fieldFmt = field.display || getDisplayProcessor({ field, timeZone, theme });
      const display = fieldFmt(field.values.get(dataIdx));
      tooltip = /* @__PURE__ */ React__default.createElement(
        SeriesTable,
        {
          series: [
            {
              color: display.color || FALLBACK_COLOR,
              label: getFieldDisplayName(field, otherProps.data, otherProps.frames),
              value: display ? formattedValueToString(display) : null
            }
          ],
          timestamp: xVal
        }
      );
    }
    if (mode === TooltipDisplayMode.Multi) {
      let series = [];
      const frame = otherProps.data;
      const fields = frame.fields;
      const sortIdx = [];
      for (let i = 0; i < fields.length; i++) {
        const field = frame.fields[i];
        if (!field || field === xField || field.type === FieldType.time || field.type !== FieldType.number || ((_c = (_b2 = field.config.custom) == null ? void 0 : _b2.hideFrom) == null ? void 0 : _c.tooltip) || ((_e = (_d = field.config.custom) == null ? void 0 : _d.hideFrom) == null ? void 0 : _e.viz)) {
          continue;
        }
        const v = otherProps.data.fields[i].values.get(focusedPointIdxs[i]);
        const display = field.display(v);
        sortIdx.push(v);
        series.push({
          color: display.color || FALLBACK_COLOR,
          label: getFieldDisplayName(field, frame, otherProps.frames),
          value: display ? formattedValueToString(display) : null,
          isActive: focusedSeriesIdx === i
        });
      }
      if (sortOrder !== SortOrder.None) {
        const sortRef = [...series];
        const sortFn = arrayUtils.sortValues(sortOrder);
        series.sort((a, b) => {
          const aIdx = sortRef.indexOf(a);
          const bIdx = sortRef.indexOf(b);
          return sortFn(sortIdx[aIdx], sortIdx[bIdx]);
        });
      }
      tooltip = /* @__PURE__ */ React__default.createElement(SeriesTable, { series, timestamp: xVal });
    }
  } else {
    tooltip = renderTooltip(otherProps.data, focusedSeriesIdx, focusedPointIdx);
  }
  return /* @__PURE__ */ React__default.createElement(Portal, null, tooltip && coords && /* @__PURE__ */ React__default.createElement(VizTooltipContainer, { position: { x: coords.x, y: coords.y }, offset: { x: TOOLTIP_OFFSET, y: TOOLTIP_OFFSET } }, tooltip));
};
function isCursorOutsideCanvas({ left, top }, canvas) {
  if (left === void 0 || top === void 0) {
    return false;
  }
  return left < 0 || left > canvas.width || top < 0 || top > canvas.height;
}
function positionTooltip(u, bbox) {
  let x, y;
  const cL = u.cursor.left || 0;
  const cT = u.cursor.top || 0;
  if (isCursorOutsideCanvas(u.cursor, bbox)) {
    const idx = u.posToIdx(cL);
    if (cT < 0 || cT > bbox.height) {
      let pos = findMidPointYPosition(u, idx);
      if (pos) {
        y = bbox.top + pos;
        if (cL >= 0 && cL <= bbox.width) {
          x = bbox.left + u.valToPos(u.data[0][u.posToIdx(cL)], u.series[0].scale);
        }
      }
    }
  } else {
    x = bbox.left + cL;
    y = bbox.top + cT;
  }
  return { x, y };
}

export { TooltipPlugin, positionTooltip };
//# sourceMappingURL=TooltipPlugin.js.map
