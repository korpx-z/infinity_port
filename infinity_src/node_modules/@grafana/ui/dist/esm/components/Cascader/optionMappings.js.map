{"version":3,"file":"optionMappings.js","sources":["../../../../src/components/Cascader/optionMappings.ts"],"sourcesContent":["import { SingleValueType, BaseOptionType as RCCascaderOption } from 'rc-cascader/lib/Cascader';\n\nimport { CascaderOption } from './Cascader';\n\ntype onChangeType = ((values: string[], options: CascaderOption[]) => void) | undefined;\n\nexport const onChangeCascader = (onChanged: onChangeType) => (values: SingleValueType, options: RCCascaderOption[]) => {\n  if (onChanged) {\n    // map values to strings for backwards compatibility with Cascader components\n    onChanged(\n      values.map((value) => String(value)),\n      fromRCOptions(options)\n    );\n  }\n};\n\ntype onLoadDataType = ((options: CascaderOption[]) => void) | undefined;\n\nexport const onLoadDataCascader = (onLoadData: onLoadDataType) => (options: RCCascaderOption[]) => {\n  if (onLoadData) {\n    onLoadData(fromRCOptions(options));\n  }\n};\n\nconst fromRCOptions = (options: RCCascaderOption[]): CascaderOption[] => {\n  return options.map(fromRCOption);\n};\n\nconst fromRCOption = (option: RCCascaderOption): CascaderOption => {\n  return {\n    value: option.value ?? '',\n    label: option.label,\n  };\n};\n"],"names":[],"mappings":"AAMO,MAAM,gBAAmB,GAAA,CAAC,SAA4B,KAAA,CAAC,QAAyB,OAAgC,KAAA;AACrH,EAAA,IAAI,SAAW,EAAA;AAEb,IAAA,SAAA;AAAA,MACE,OAAO,GAAI,CAAA,CAAC,KAAU,KAAA,MAAA,CAAO,KAAK,CAAC,CAAA;AAAA,MACnC,cAAc,OAAO,CAAA;AAAA,KACvB,CAAA;AAAA,GACF;AACF,EAAA;AAIO,MAAM,kBAAqB,GAAA,CAAC,UAA+B,KAAA,CAAC,OAAgC,KAAA;AACjG,EAAA,IAAI,UAAY,EAAA;AACd,IAAW,UAAA,CAAA,aAAA,CAAc,OAAO,CAAC,CAAA,CAAA;AAAA,GACnC;AACF,EAAA;AAEA,MAAM,aAAA,GAAgB,CAAC,OAAkD,KAAA;AACvE,EAAO,OAAA,OAAA,CAAQ,IAAI,YAAY,CAAA,CAAA;AACjC,CAAA,CAAA;AAEA,MAAM,YAAA,GAAe,CAAC,MAA6C,KAAA;AA5BnE,EAAA,IAAA,EAAA,CAAA;AA6BE,EAAO,OAAA;AAAA,IACL,KAAA,EAAA,CAAO,EAAO,GAAA,MAAA,CAAA,KAAA,KAAP,IAAgB,GAAA,EAAA,GAAA,EAAA;AAAA,IACvB,OAAO,MAAO,CAAA,KAAA;AAAA,GAChB,CAAA;AACF,CAAA;;;;"}