{"version":3,"file":"TagList.js","sources":["../../../../src/components/Tags/TagList.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { forwardRef, memo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes';\nimport { IconName } from '../../types/icon';\n\nimport { OnTagClick, Tag } from './Tag';\n\nexport interface Props {\n  /** Maximum number of the tags to display */\n  displayMax?: number;\n  /** Names of the tags to display */\n  tags: string[];\n  /** Callback when the tag is clicked */\n  onClick?: OnTagClick;\n  /** Custom styles for the wrapper component */\n  className?: string;\n  /** aria-label for the `i`-th Tag component */\n  getAriaLabel?: (name: string, i: number) => string;\n  /** Icon to show next to tag label */\n  icon?: IconName;\n}\n\nexport const TagList = memo(\n  forwardRef<HTMLUListElement, Props>(({ displayMax, tags, icon, onClick, className, getAriaLabel }, ref) => {\n    const theme = useTheme2();\n    const styles = getStyles(theme, Boolean(displayMax && displayMax > 0));\n    const numTags = tags.length;\n    const tagsToDisplay = displayMax ? tags.slice(0, displayMax) : tags;\n    return (\n      <ul className={cx(styles.wrapper, className)} aria-label=\"Tags\" ref={ref}>\n        {tagsToDisplay.map((tag, i) => (\n          <li className={styles.li} key={tag}>\n            <Tag name={tag} icon={icon} onClick={onClick} aria-label={getAriaLabel?.(tag, i)} data-tag-id={i} />\n          </li>\n        ))}\n        {displayMax && displayMax > 0 && numTags - displayMax > 0 && (\n          <span className={styles.moreTagsLabel}>+ {numTags - displayMax}</span>\n        )}\n      </ul>\n    );\n  })\n);\n\nTagList.displayName = 'TagList';\n\nconst getStyles = (theme: GrafanaTheme2, isTruncated: boolean) => {\n  return {\n    wrapper: css`\n      position: relative;\n      align-items: ${isTruncated ? 'center' : 'unset'};\n      display: flex;\n      flex: 1 1 auto;\n      flex-wrap: wrap;\n      flex-shrink: ${isTruncated ? 0 : 1};\n      justify-content: flex-end;\n      gap: 6px;\n    `,\n    moreTagsLabel: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.size.sm};\n    `,\n    li: css({\n      listStyle: 'none',\n    }),\n  };\n};\n"],"names":["React"],"mappings":";;;;;;;;;AAyBO,MAAM,OAAU,GAAA,IAAA;AAAA,EACrB,UAAA,CAAoC,CAAC,EAAE,UAAY,EAAA,IAAA,EAAM,MAAM,OAAS,EAAA,SAAA,EAAW,YAAa,EAAA,EAAG,GAAQ,KAAA;AACzG,IAAA,MAAM,QAAQ,SAAU,EAAA,CAAA;AACxB,IAAA,MAAM,SAAS,SAAU,CAAA,KAAA,EAAO,QAAQ,UAAc,IAAA,UAAA,GAAa,CAAC,CAAC,CAAA,CAAA;AACrE,IAAA,MAAM,UAAU,IAAK,CAAA,MAAA,CAAA;AACrB,IAAA,MAAM,gBAAgB,UAAa,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,UAAU,CAAI,GAAA,IAAA,CAAA;AAC/D,IACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,IAAG,EAAA,EAAA,SAAA,EAAW,EAAG,CAAA,MAAA,CAAO,SAAS,SAAS,CAAA,EAAG,YAAW,EAAA,MAAA,EAAO,GAC7D,EAAA,EAAA,aAAA,CAAc,IAAI,CAAC,GAAA,EAAK,CACvB,qBAAAA,cAAA,CAAA,aAAA,CAAC,IAAG,EAAA,EAAA,SAAA,EAAW,OAAO,EAAI,EAAA,GAAA,EAAK,GAC7B,EAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,GAAI,EAAA,EAAA,IAAA,EAAM,KAAK,IAAY,EAAA,OAAA,EAAkB,YAAY,EAAA,YAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAe,GAAK,EAAA,CAAA,CAAA,EAAI,eAAa,CAAG,EAAA,CACpG,CACD,CAAA,EACA,UAAc,IAAA,UAAA,GAAa,KAAK,OAAU,GAAA,UAAA,GAAa,CACtD,oBAAAA,cAAA,CAAA,aAAA,CAAC,MAAK,EAAA,EAAA,SAAA,EAAW,OAAO,aAAe,EAAA,EAAA,IAAA,EAAG,OAAU,GAAA,UAAW,CAEnE,CAAA,CAAA;AAAA,GAEH,CAAA;AACH,EAAA;AAEA,OAAA,CAAQ,WAAc,GAAA,SAAA,CAAA;AAEtB,MAAM,SAAA,GAAY,CAAC,KAAA,EAAsB,WAAyB,KAAA;AAChE,EAAO,OAAA;AAAA,IACL,OAAS,EAAA,GAAA,CAAA;AAAA;AAAA,mBAAA,EAEQ,cAAc,QAAW,GAAA,OAAA,CAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,EAIzB,cAAc,CAAI,GAAA,CAAA,CAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,IAInC,aAAe,EAAA,GAAA,CAAA;AAAA,aACJ,EAAA,KAAA,CAAM,OAAO,IAAK,CAAA,SAAA,CAAA;AAAA,iBACd,EAAA,KAAA,CAAM,WAAW,IAAK,CAAA,EAAA,CAAA;AAAA,IAAA,CAAA;AAAA,IAErC,IAAI,GAAI,CAAA;AAAA,MACN,SAAW,EAAA,MAAA;AAAA,KACZ,CAAA;AAAA,GACH,CAAA;AACF,CAAA;;;;"}