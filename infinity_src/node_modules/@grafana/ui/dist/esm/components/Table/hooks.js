import { useEffect } from 'react';

function useFixScrollbarContainer(variableSizeListScrollbarRef, tableDivRef) {
  useEffect(() => {
    var _a, _b, _c;
    const listVerticalScrollbarHTML = (_a = variableSizeListScrollbarRef.current) == null ? void 0 : _a.querySelector(
      ".track-vertical"
    );
    const tableScrollbarView = (_b = tableDivRef.current) == null ? void 0 : _b.firstChild;
    if (tableScrollbarView && listVerticalScrollbarHTML) {
      listVerticalScrollbarHTML == null ? void 0 : listVerticalScrollbarHTML.remove();
      (_c = tableScrollbarView.querySelector(":scope > .track-vertical")) == null ? void 0 : _c.remove();
      tableScrollbarView.append(listVerticalScrollbarHTML);
    }
  });
}
function useResetVariableListSizeCache(extendedState, listRef, data) {
  useEffect(() => {
    var _a;
    if (extendedState.lastExpandedIndex !== void 0) {
      (_a = listRef.current) == null ? void 0 : _a.resetAfterIndex(Math.max(extendedState.lastExpandedIndex - 1, 0));
      return;
    }
  }, [extendedState.lastExpandedIndex, extendedState.toggleRowExpandedCounter, listRef, data]);
}

export { useFixScrollbarContainer, useResetVariableListSizeCache };
//# sourceMappingURL=hooks.js.map
