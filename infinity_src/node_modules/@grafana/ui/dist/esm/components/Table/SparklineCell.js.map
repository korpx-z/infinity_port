{"version":3,"file":"SparklineCell.js","sources":["../../../../src/components/Table/SparklineCell.tsx"],"sourcesContent":["import { isArray } from 'lodash';\nimport React from 'react';\n\nimport {\n  ArrayVector,\n  FieldType,\n  FieldConfig,\n  getMinMaxAndDelta,\n  FieldSparkline,\n  isDataFrame,\n  Field,\n} from '@grafana/data';\nimport {\n  BarAlignment,\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  LineInterpolation,\n  TableSparklineCellOptions,\n  TableCellDisplayMode,\n  VisibilityMode,\n} from '@grafana/schema';\n\nimport { Sparkline } from '../Sparkline/Sparkline';\n\nimport { TableCellProps } from './types';\nimport { getCellOptions } from './utils';\n\nexport const defaultSparklineCellConfig: GraphFieldConfig = {\n  drawStyle: GraphDrawStyle.Line,\n  lineInterpolation: LineInterpolation.Smooth,\n  lineWidth: 1,\n  fillOpacity: 17,\n  gradientMode: GraphGradientMode.Hue,\n  pointSize: 2,\n  barAlignment: BarAlignment.Center,\n  showPoints: VisibilityMode.Never,\n};\n\nexport const SparklineCell = (props: TableCellProps) => {\n  const { field, innerWidth, tableStyles, cell, cellProps } = props;\n\n  const sparkline = getSparkline(cell.value);\n\n  if (!sparkline) {\n    return (\n      <div {...cellProps} className={tableStyles.cellContainer}>\n        no data\n      </div>\n    );\n  }\n\n  const range = getMinMaxAndDelta(sparkline.y);\n  sparkline.y.config.min = range.min;\n  sparkline.y.config.max = range.max;\n  sparkline.y.state = { range };\n\n  const cellOptions = getTableSparklineCellOptions(field);\n\n  const config: FieldConfig<GraphFieldConfig> = {\n    color: field.config.color,\n    custom: {\n      ...defaultSparklineCellConfig,\n      ...cellOptions,\n    },\n  };\n\n  return (\n    <div {...cellProps} className={tableStyles.cellContainer}>\n      <Sparkline\n        width={innerWidth}\n        height={tableStyles.cellHeightInner}\n        sparkline={sparkline}\n        config={config}\n        theme={tableStyles.theme}\n      />\n    </div>\n  );\n};\n\nfunction getSparkline(value: unknown): FieldSparkline | undefined {\n  if (isArray(value)) {\n    return {\n      y: {\n        name: 'test',\n        type: FieldType.number,\n        values: new ArrayVector(value),\n        config: {},\n      },\n    };\n  }\n\n  if (isDataFrame(value)) {\n    const timeField = value.fields.find((x) => x.type === FieldType.time);\n    const numberField = value.fields.find((x) => x.type === FieldType.number);\n\n    if (timeField && numberField) {\n      return { x: timeField, y: numberField };\n    }\n  }\n\n  return;\n}\n\nfunction getTableSparklineCellOptions(field: Field): TableSparklineCellOptions {\n  let options = getCellOptions(field);\n  if (options.type === TableCellDisplayMode.Auto) {\n    options = { ...options, type: TableCellDisplayMode.Sparkline };\n  }\n  if (options.type === TableCellDisplayMode.Sparkline) {\n    return options;\n  }\n  throw new Error(`Excpected options type ${TableCellDisplayMode.Sparkline} but got ${options.type}`);\n}\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA4BO,MAAM,0BAA+C,GAAA;AAAA,EAC1D,WAAW,cAAe,CAAA,IAAA;AAAA,EAC1B,mBAAmB,iBAAkB,CAAA,MAAA;AAAA,EACrC,SAAW,EAAA,CAAA;AAAA,EACX,WAAa,EAAA,EAAA;AAAA,EACb,cAAc,iBAAkB,CAAA,GAAA;AAAA,EAChC,SAAW,EAAA,CAAA;AAAA,EACX,cAAc,YAAa,CAAA,MAAA;AAAA,EAC3B,YAAY,cAAe,CAAA,KAAA;AAC7B,EAAA;AAEa,MAAA,aAAA,GAAgB,CAAC,KAA0B,KAAA;AACtD,EAAA,MAAM,EAAE,KAAO,EAAA,UAAA,EAAY,WAAa,EAAA,IAAA,EAAM,WAAc,GAAA,KAAA,CAAA;AAE5D,EAAM,MAAA,SAAA,GAAY,YAAa,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAEzC,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAA,oDACG,KAAQ,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAR,EAAmB,SAAW,EAAA,WAAA,CAAY,kBAAe,SAE1D,CAAA,CAAA;AAAA,GAEJ;AAEA,EAAM,MAAA,KAAA,GAAQ,iBAAkB,CAAA,SAAA,CAAU,CAAC,CAAA,CAAA;AAC3C,EAAU,SAAA,CAAA,CAAA,CAAE,MAAO,CAAA,GAAA,GAAM,KAAM,CAAA,GAAA,CAAA;AAC/B,EAAU,SAAA,CAAA,CAAA,CAAE,MAAO,CAAA,GAAA,GAAM,KAAM,CAAA,GAAA,CAAA;AAC/B,EAAU,SAAA,CAAA,CAAA,CAAE,KAAQ,GAAA,EAAE,KAAM,EAAA,CAAA;AAE5B,EAAM,MAAA,WAAA,GAAc,6BAA6B,KAAK,CAAA,CAAA;AAEtD,EAAA,MAAM,MAAwC,GAAA;AAAA,IAC5C,KAAA,EAAO,MAAM,MAAO,CAAA,KAAA;AAAA,IACpB,MAAA,EAAQ,kCACH,0BACA,CAAA,EAAA,WAAA,CAAA;AAAA,GAEP,CAAA;AAEA,EAAA,oDACG,KAAQ,EAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAR,EAAmB,SAAA,EAAW,YAAY,aACzC,EAAA,CAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,SAAA;AAAA,IAAA;AAAA,MACC,KAAO,EAAA,UAAA;AAAA,MACP,QAAQ,WAAY,CAAA,eAAA;AAAA,MACpB,SAAA;AAAA,MACA,MAAA;AAAA,MACA,OAAO,WAAY,CAAA,KAAA;AAAA,KAAA;AAAA,GAEvB,CAAA,CAAA;AAEJ,EAAA;AAEA,SAAS,aAAa,KAA4C,EAAA;AAChE,EAAI,IAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAClB,IAAO,OAAA;AAAA,MACL,CAAG,EAAA;AAAA,QACD,IAAM,EAAA,MAAA;AAAA,QACN,MAAM,SAAU,CAAA,MAAA;AAAA,QAChB,MAAA,EAAQ,IAAI,WAAA,CAAY,KAAK,CAAA;AAAA,QAC7B,QAAQ,EAAC;AAAA,OACX;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAI,IAAA,WAAA,CAAY,KAAK,CAAG,EAAA;AACtB,IAAM,MAAA,SAAA,GAAY,MAAM,MAAO,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,CAAA,CAAE,IAAS,KAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AACpE,IAAM,MAAA,WAAA,GAAc,MAAM,MAAO,CAAA,IAAA,CAAK,CAAC,CAAM,KAAA,CAAA,CAAE,IAAS,KAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAExE,IAAA,IAAI,aAAa,WAAa,EAAA;AAC5B,MAAA,OAAO,EAAE,CAAA,EAAG,SAAW,EAAA,CAAA,EAAG,WAAY,EAAA,CAAA;AAAA,KACxC;AAAA,GACF;AAEA,EAAA,OAAA;AACF,CAAA;AAEA,SAAS,6BAA6B,KAAyC,EAAA;AAC7E,EAAI,IAAA,OAAA,GAAU,eAAe,KAAK,CAAA,CAAA;AAClC,EAAI,IAAA,OAAA,CAAQ,IAAS,KAAA,oBAAA,CAAqB,IAAM,EAAA;AAC9C,IAAA,OAAA,GAAU,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,CAAA,EAAL,EAAc,IAAA,EAAM,qBAAqB,SAAU,EAAA,CAAA,CAAA;AAAA,GAC/D;AACA,EAAI,IAAA,OAAA,CAAQ,IAAS,KAAA,oBAAA,CAAqB,SAAW,EAAA;AACnD,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AACA,EAAA,MAAM,IAAI,KAAM,CAAA,CAAA,uBAAA,EAA0B,oBAAqB,CAAA,SAAA,CAAA,SAAA,EAAqB,QAAQ,IAAM,CAAA,CAAA,CAAA,CAAA;AACpG;;;;"}