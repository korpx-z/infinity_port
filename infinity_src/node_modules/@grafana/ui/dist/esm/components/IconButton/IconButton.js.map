{"version":3,"file":"IconButton.js","sources":["../../../../src/components/IconButton/IconButton.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, colorManipulator } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { getFocusStyles, getMouseFocusStyles } from '../../themes/mixins';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { IconName, IconSize, IconType } from '../../types/icon';\nimport { Icon } from '../Icon/Icon';\nimport { getSvgSize } from '../Icon/utils';\nimport { TooltipPlacement, PopoverContent, Tooltip } from '../Tooltip';\n\nexport type IconButtonVariant = 'primary' | 'secondary' | 'destructive';\n\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Name of the icon **/\n  name: IconName;\n  /** Icon size */\n  size?: IconSize;\n  /** Type of the icon - mono or default */\n  iconType?: IconType;\n  /** Tooltip content to display on hover */\n  tooltip?: PopoverContent;\n  /** Position of the tooltip */\n  tooltipPlacement?: TooltipPlacement;\n  /** Variant to change the color of the Icon */\n  variant?: IconButtonVariant;\n  /** Text avilable ony for screenscreen readers. Will use tooltip text as fallback. */\n  ariaLabel?: string;\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, Props>(\n  (\n    {\n      name,\n      size = 'md',\n      iconType,\n      tooltip,\n      tooltipPlacement,\n      ariaLabel,\n      className,\n      variant = 'secondary',\n      ...restProps\n    },\n    ref\n  ) => {\n    const theme = useTheme2();\n    const styles = getStyles(theme, size, variant);\n    const tooltipString = typeof tooltip === 'string' ? tooltip : '';\n\n    const button = (\n      <button ref={ref} aria-label={ariaLabel || tooltipString} {...restProps} className={cx(styles.button, className)}>\n        <Icon name={name} size={size} className={styles.icon} type={iconType} />\n      </button>\n    );\n\n    if (tooltip) {\n      return (\n        <Tooltip content={tooltip} placement={tooltipPlacement}>\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n);\n\nIconButton.displayName = 'IconButton';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, size: IconSize, variant: IconButtonVariant) => {\n  const pixelSize = getSvgSize(size);\n  const hoverSize = Math.max(pixelSize / 3, 8);\n  let iconColor = theme.colors.text.primary;\n\n  if (variant === 'primary') {\n    iconColor = theme.colors.primary.text;\n  } else if (variant === 'destructive') {\n    iconColor = theme.colors.error.text;\n  }\n\n  return {\n    button: css`\n      width: ${pixelSize}px;\n      height: ${pixelSize}px;\n      background: transparent;\n      border: none;\n      color: ${iconColor};\n      padding: 0;\n      margin: 0;\n      outline: none;\n      box-shadow: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      border-radius: ${theme.shape.borderRadius()};\n      z-index: 0;\n      margin-right: ${theme.spacing(0.5)};\n\n      &[disabled],\n      &:disabled {\n        cursor: not-allowed;\n        color: ${theme.colors.action.disabledText};\n        opacity: 0.65;\n        box-shadow: none;\n      }\n\n      &:before {\n        content: '';\n        display: block;\n        opacity: 1;\n        position: absolute;\n        transition-duration: 0.2s;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        z-index: -1;\n        bottom: -${hoverSize}px;\n        left: -${hoverSize}px;\n        right: -${hoverSize}px;\n        top: -${hoverSize}px;\n        background: none;\n        border-radius: 50%;\n        box-sizing: border-box;\n        transform: scale(0);\n        transition-property: transform, opacity;\n      }\n\n      &:focus,\n      &:focus-visible {\n        ${getFocusStyles(theme)}\n      }\n\n      &:focus:not(:focus-visible) {\n        ${getMouseFocusStyles(theme)}\n      }\n\n      &:hover {\n        color: ${iconColor};\n\n        &:before {\n          background-color: ${variant === 'secondary'\n            ? theme.colors.action.hover\n            : colorManipulator.alpha(iconColor, 0.12)};\n          border: none;\n          box-shadow: none;\n          opacity: 1;\n          transform: scale(0.8);\n        }\n      }\n    `,\n    icon: css`\n      vertical-align: baseline;\n      display: flex;\n    `,\n  };\n});\n"],"names":["React"],"mappings":"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"}