import { cx, css } from '@emotion/css';
import Prism from 'prismjs';
import React__default, { memo, useRef, useState, useEffect, useMemo } from 'react';
import { Popper } from 'react-popper';
import usePrevious from 'react-use/lib/usePrevious';
import Plain from 'slate-plain-serializer';
import { Editor } from 'slate-react';
import { VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';
import 'uuid';
import '../../slate-plugins/indentation.js';
import '../../slate-plugins/selection_shortcuts.js';
import { SlatePrism } from '../../slate-plugins/slate-prism/index.js';
import 'lodash';
import '../Typeahead/Typeahead.js';
import '../../utils/dom.js';
import '../../utils/colors.js';
import { makeValue, SCHEMA } from '../../utils/slate.js';
import 'ansicolor';
import '../../utils/logger.js';
import { useStyles2 } from '../../themes/ThemeContext.js';
import 'memoize-one';
import '@emotion/react';
import 'tinycolor2';
import { CustomScrollbar } from '../CustomScrollbar/CustomScrollbar.js';
import { getInputStyles } from '../Input/Input.js';
import '../FormField/FormField.js';
import '../Forms/Legacy/Input/Input.js';
import 'react-select';
import '../Icon/Icon.js';
import '../Forms/Legacy/Select/Select.js';
import '../Tooltip/Tooltip.js';
import '../SecretFormField/SecretFormField.js';
import '../IconButton/IconButton.js';
import '../ConfirmButton/ConfirmButton.js';
import '../Button/Button.js';
import '../Button/ButtonGroup.js';
import 'react-transition-group/Transition';
import { Portal } from '../Portal/Portal.js';
import '../Toggletip/Toggletip.js';
import '../TabbedContainer/TabbedContainer.js';
import '../../utils/i18n.js';
import '../Cascader/Cascader.js';
import '../ButtonCascader/ButtonCascader.js';
import '../Spinner/Spinner.js';
import '../ColorPicker/ColorPicker.js';
import '../ColorPicker/ColorPickerInput.js';
import '../ColorPicker/SeriesColorPickerPopover.js';
import '../StatsPicker/StatsPicker.js';
import '../RefreshPicker/RefreshPicker.js';
import '../DateTimePickers/TimeRangePicker.js';
import 'rc-time-picker';
import 'react-select/async';
import 'react-select/async-creatable';
import 'react-select/creatable';
import '../Select/IndicatorsContainer.js';
import '../Select/InputControl.js';
import '../Select/getSelectStyles.js';
import '../Select/SelectContainer.js';
import '../Select/SelectMenu.js';
import '../Select/SelectOptionGroup.js';
import '../transitions/FadeTransition.js';
import '../transitions/SlideOutTransition.js';
import '../Select/ValueContainer.js';
import '../DateTimePickers/TimeZonePicker/TimeZoneOption.js';
import '@grafana/e2e-selectors';
import '../DateTimePickers/DatePicker/DatePicker.js';
import '../DateTimePickers/DateTimePicker/DateTimePicker.js';
import '../List/AbstractList.js';
import 'react-table';
import '../InteractiveTable/ExpanderCell.js';
import '../Tags/Tag.js';
import '../Tags/TagList.js';
import '../Modal/Modal.js';
import '../QueryField/QueryField.js';
import '../Monaco/CodeEditor.js';
import 'react-use';
import '../Modal/getModalStyles.js';
import '../Tabs/Tab.js';
import '../Tabs/TabsBar.js';
import '../Modal/ModalsContext.js';
import '../PageLayout/PageToolbar.js';
import 'rxjs';
import 'rxjs/operators';
import '../Table/Table.js';
import '@grafana/schema';
import '../TableInputCSV/TableInputCSV.js';
import '../Tabs/VerticalTab.js';
import '../Tabs/TabContent.js';
import '../Tabs/Counter.js';
import '../BigValue/BigValue.js';
import '../Sparkline/Sparkline.js';
import '../Gauge/Gauge.js';
import '../Graph/Graph.js';
import '../Graph/GraphWithLegend.js';
import '../ContextMenu/ContextMenu.js';
import '../FormattedValueDisplay/FormattedValueDisplay.js';
import '../Menu/MenuGroup.js';
import '../Menu/MenuItem.js';
import '../VizLegend/SeriesIcon.js';
import '../BarGauge/BarGauge.js';
import '../VizTooltip/VizTooltip.js';
import '../VizTooltip/VizTooltipContainer.js';
import '../VizRepeater/VizRepeater.js';
import '../PanelChrome/index.js';
import '../VizLayout/VizLayout.js';
import '../VizLegend/VizLegend.js';
import '../VizLegend/VizLegendListItem.js';
import '../Alert/Alert.js';
import '../Collapse/Collapse.js';
import '../Logs/LogMessageAnsi.js';
import '../Logs/LogRows.js';
import '../Button/FullWidthButtonContainer.js';
import '../ClickOutsideWrapper/ClickOutsideWrapper.js';
import '../Menu/Menu.js';
import './DataLinksInlineEditor/DataLinksInlineEditor.js';
import '../InfoBox/InfoBox.js';
import '../InfoBox/FeatureInfoBox.js';
import '../JSONFormatter/JSONFormatter.js';
import '../ErrorBoundary/ErrorBoundary.js';
import '../ErrorBoundary/ErrorWithStack.js';
import 'classnames';
import '../Forms/InlineField.js';
import '../Switch/Switch.js';
import '../DataSourceSettings/CustomHeadersSettings.js';
import '../TextArea/TextArea.js';
import 'react-use/lib/useClickAway';
import '@react-aria/dialog';
import '@react-aria/focus';
import '@react-aria/overlays';
import 'rc-drawer';
import '../Slider/Slider.js';
import '../Slider/RangeSlider.js';
import 'react-hook-form';
import '../ToolbarButton/ToolbarButton.js';
import '../ToolbarButton/ToolbarButtonRow.js';
import '../MatchersUI/fieldMatchersUI.js';
import '../Link/Link.js';
import '../Forms/Label.js';
import '../Forms/Field.js';
import '../Forms/FieldSet.js';
import '../Forms/FieldValidationMessage.js';
import '../Forms/InlineSegmentGroup.js';
import '../Badge/Badge.js';
import '../Forms/RadioButtonGroup/RadioButtonGroup.js';
import '../Input/AutoSizeInput.js';
import '../FilterInput/FilterInput.js';
import '../Forms/Checkbox.js';
import 'react-dropzone';
import '../DateTimePickers/TimeRangeInput.js';
import '../DateTimePickers/RelativeTimeRangePicker/RelativeTimeRangePicker.js';
import '../Card/Card.js';
import '../Card/CardContainer.js';
import '../Dropdown/ButtonSelect.js';
import '../Dropdown/Dropdown.js';
import '../PluginSignatureBadge/PluginSignatureBadge.js';
import '../uPlot/config.js';
import 'uplot';
import '../uPlot/utils.js';
import '../uPlot/PlotLegend.js';
import '../GraphNG/GraphNG.js';
import '../TimeSeries/TimeSeries.js';
import '../GraphNG/hooks.js';
import '../BrowserLabel/Label.js';
import { DataLinkSuggestions } from './DataLinkSuggestions.js';
import { SelectionReference } from './SelectionReference.js';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const modulo = (a, n) => a - n * Math.floor(a / n);
const datalinksSyntax = {
  builtInVariable: {
    pattern: /(\${\S+?})/
  }
};
const plugins = [
  SlatePrism(
    {
      onlyIn: (node) => node.type === "code_block",
      getSyntax: () => "links"
    },
    __spreadProps(__spreadValues({}, Prism.languages), { links: datalinksSyntax })
  )
];
const getStyles = (theme) => ({
  input: getInputStyles({ theme, invalid: false }).input,
  editor: css`
    .token.builtInVariable {
      color: ${theme.colors.success.text};
    }
    .token.variable {
      color: ${theme.colors.primary.text};
    }
  `,
  suggestionsWrapper: css`
    box-shadow: ${theme.shadows.z2};
  `,
  // Wrapper with child selector needed.
  // When classnames are applied to the same element as the wrapper, it causes the suggestions to stop working
  wrapperOverrides: css`
    width: 100%;
    > .slate-query-field__wrapper {
      padding: 0;
      background-color: transparent;
      border: none;
    }
  `
});
const DataLinkInput = memo(
  ({
    value,
    onChange,
    suggestions,
    placeholder = "http://your-grafana.com/d/000000010/annotations"
  }) => {
    const editorRef = useRef(null);
    const styles = useStyles2(getStyles);
    const [showingSuggestions, setShowingSuggestions] = useState(false);
    const [suggestionsIndex, setSuggestionsIndex] = useState(0);
    const [linkUrl, setLinkUrl] = useState(makeValue(value));
    const prevLinkUrl = usePrevious(linkUrl);
    const [scrollTop, setScrollTop] = useState(0);
    const stateRef = useRef({ showingSuggestions, suggestions, suggestionsIndex, linkUrl, onChange });
    stateRef.current = { showingSuggestions, suggestions, suggestionsIndex, linkUrl, onChange };
    const activeRef = useRef(null);
    useEffect(() => {
      setScrollTop(getElementPosition(activeRef.current, suggestionsIndex));
    }, [suggestionsIndex]);
    const selectionRef = useMemo(() => new SelectionReference(), []);
    const onKeyDown = React__default.useCallback((event, next) => {
      if (!stateRef.current.showingSuggestions) {
        if (event.key === "=" || event.key === "$" || event.keyCode === 32 && event.ctrlKey) {
          return setShowingSuggestions(true);
        }
        return next();
      }
      switch (event.key) {
        case "Backspace":
        case "Escape":
          setShowingSuggestions(false);
          return setSuggestionsIndex(0);
        case "Enter":
          event.preventDefault();
          return onVariableSelect(stateRef.current.suggestions[stateRef.current.suggestionsIndex]);
        case "ArrowDown":
        case "ArrowUp":
          event.preventDefault();
          const direction = event.key === "ArrowDown" ? 1 : -1;
          return setSuggestionsIndex((index) => modulo(index + direction, stateRef.current.suggestions.length));
        default:
          return next();
      }
    }, []);
    useEffect(() => {
      if (prevLinkUrl && prevLinkUrl.selection.isFocused && !linkUrl.selection.isFocused) {
        stateRef.current.onChange(Plain.serialize(linkUrl));
      }
    }, [linkUrl, prevLinkUrl]);
    const onUrlChange = React__default.useCallback(({ value: value2 }) => {
      setLinkUrl(value2);
    }, []);
    const onVariableSelect = (item, editor = editorRef.current) => {
      const precedingChar = getCharactersAroundCaret();
      const precedingDollar = precedingChar === "$";
      if (item.origin !== VariableOrigin.Template || item.value === DataLinkBuiltInVars.includeVars) {
        editor.insertText(`${precedingDollar ? "" : "$"}{${item.value}}`);
      } else {
        editor.insertText(`${precedingDollar ? "" : "$"}{${item.value}:queryparam}`);
      }
      setLinkUrl(editor.value);
      setShowingSuggestions(false);
      setSuggestionsIndex(0);
      stateRef.current.onChange(Plain.serialize(editor.value));
    };
    const getCharactersAroundCaret = () => {
      const input = document.getElementById("data-link-input");
      let precedingChar = "", sel, range;
      if (window.getSelection) {
        sel = window.getSelection();
        if (sel && sel.rangeCount > 0) {
          range = sel.getRangeAt(0).cloneRange();
          range.collapse(true);
          range.setStart(input, 0);
          precedingChar = range.toString().slice(-1);
        }
      }
      return precedingChar;
    };
    return /* @__PURE__ */ React__default.createElement("div", { className: styles.wrapperOverrides }, /* @__PURE__ */ React__default.createElement("div", { className: "slate-query-field__wrapper" }, /* @__PURE__ */ React__default.createElement("div", { id: "data-link-input", className: "slate-query-field" }, showingSuggestions && /* @__PURE__ */ React__default.createElement(Portal, null, /* @__PURE__ */ React__default.createElement(
      Popper,
      {
        referenceElement: selectionRef,
        placement: "bottom-end",
        modifiers: [
          {
            name: "preventOverflow",
            enabled: true,
            options: {
              rootBoundary: "viewport"
            }
          },
          {
            name: "arrow",
            enabled: false
          },
          {
            name: "offset",
            options: {
              offset: [250, 0]
            }
          }
        ]
      },
      ({ ref, style, placement }) => {
        return /* @__PURE__ */ React__default.createElement("div", { ref, style, "data-placement": placement, className: styles.suggestionsWrapper }, /* @__PURE__ */ React__default.createElement(
          CustomScrollbar,
          {
            scrollTop,
            autoHeightMax: "300px",
            setScrollTop: ({ scrollTop: scrollTop2 }) => setScrollTop(scrollTop2)
          },
          /* @__PURE__ */ React__default.createElement(
            DataLinkSuggestions,
            {
              activeRef,
              suggestions: stateRef.current.suggestions,
              onSuggestionSelect: onVariableSelect,
              onClose: () => setShowingSuggestions(false),
              activeIndex: suggestionsIndex
            }
          )
        ));
      }
    )), /* @__PURE__ */ React__default.createElement(
      Editor,
      {
        schema: SCHEMA,
        ref: editorRef,
        placeholder,
        value: stateRef.current.linkUrl,
        onChange: onUrlChange,
        onKeyDown: (event, _editor, next) => onKeyDown(event, next),
        plugins,
        className: cx(
          styles.editor,
          styles.input,
          css`
                  padding: 3px 8px;
                `
        )
      }
    ))));
  }
);
DataLinkInput.displayName = "DataLinkInput";
function getElementPosition(suggestionElement, activeIndex) {
  var _a;
  return ((_a = suggestionElement == null ? void 0 : suggestionElement.clientHeight) != null ? _a : 0) * activeIndex;
}

export { DataLinkInput };
//# sourceMappingURL=DataLinkInput.js.map
