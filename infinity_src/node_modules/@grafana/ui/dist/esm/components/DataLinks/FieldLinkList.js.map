{"version":3,"file":"FieldLinkList.js","sources":["../../../../src/components/DataLinks/FieldLinkList.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Field, GrafanaTheme2, LinkModel } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { Icon } from '../Icon/Icon';\n\nimport { DataLinkButton } from './DataLinkButton';\n\ntype Props = {\n  links: Array<LinkModel<Field>>;\n};\n\n/**\n * @internal\n */\nexport function FieldLinkList({ links }: Props) {\n  const styles = useStyles2(getStyles);\n\n  if (links.length === 1) {\n    return <DataLinkButton link={links[0]} />;\n  }\n\n  const externalLinks = links.filter((link) => link.target === '_blank');\n  const internalLinks = links.filter((link) => link.target === '_self');\n\n  return (\n    <>\n      {internalLinks.map((link, i) => {\n        return <DataLinkButton key={i} link={link} />;\n      })}\n      <div className={styles.wrapper}>\n        <p className={styles.externalLinksHeading}>External links</p>\n        {externalLinks.map((link, i) => (\n          <a key={i} href={link.href} target={link.target} className={styles.externalLink}>\n            <Icon name=\"external-link-alt\" />\n            {link.title}\n          </a>\n        ))}\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    flex-basis: 150px;\n    width: 100px;\n    margin-top: ${theme.spacing(1)};\n  `,\n  externalLinksHeading: css`\n    color: ${theme.colors.text.secondary};\n    font-weight: ${theme.typography.fontWeightRegular};\n    font-size: ${theme.typography.size.sm};\n    margin: 0;\n  `,\n  externalLink: css`\n    color: ${theme.colors.text.link};\n    font-weight: ${theme.typography.fontWeightRegular};\n    display: block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    &:hover {\n      text-decoration: underline;\n    }\n\n    div {\n      margin-right: ${theme.spacing(1)};\n    }\n  `,\n});\n"],"names":["React"],"mappings":";;;;;;;;;;AAiBgB,SAAA,aAAA,CAAc,EAAE,KAAA,EAAgB,EAAA;AAC9C,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AAEnC,EAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,IAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,cAAA,EAAA,EAAe,IAAM,EAAA,KAAA,CAAM,CAAC,CAAG,EAAA,CAAA,CAAA;AAAA,GACzC;AAEA,EAAA,MAAM,gBAAgB,KAAM,CAAA,MAAA,CAAO,CAAC,IAAS,KAAA,IAAA,CAAK,WAAW,QAAQ,CAAA,CAAA;AACrE,EAAA,MAAM,gBAAgB,KAAM,CAAA,MAAA,CAAO,CAAC,IAAS,KAAA,IAAA,CAAK,WAAW,OAAO,CAAA,CAAA;AAEpE,EAAA,uBAEKA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAA,aAAA,CAAc,GAAI,CAAA,CAAC,MAAM,CAAM,KAAA;AAC9B,IAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,cAAA,EAAA,EAAe,GAAK,EAAA,CAAA,EAAG,IAAY,EAAA,CAAA,CAAA;AAAA,GAC5C,CACD,kBAAAA,cAAA,CAAA,aAAA,CAAC,SAAI,SAAW,EAAA,MAAA,CAAO,2BACpBA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAE,SAAW,EAAA,MAAA,CAAO,wBAAsB,gBAAc,CAAA,EACxD,cAAc,GAAI,CAAA,CAAC,MAAM,CACxB,qBAAAA,cAAA,CAAA,aAAA,CAAC,GAAE,EAAA,EAAA,GAAA,EAAK,GAAG,IAAM,EAAA,IAAA,CAAK,MAAM,MAAQ,EAAA,IAAA,CAAK,QAAQ,SAAW,EAAA,MAAA,CAAO,gCAChEA,cAAA,CAAA,aAAA,CAAA,IAAA,EAAA,EAAK,MAAK,mBAAoB,EAAA,CAAA,EAC9B,KAAK,KACR,CACD,CACH,CACF,CAAA,CAAA;AAEJ,CAAA;AAEA,MAAM,SAAA,GAAY,CAAC,KAA0B,MAAA;AAAA,EAC3C,OAAS,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA,gBAGO,EAAA,KAAA,CAAM,QAAQ,CAAC,CAAA,CAAA;AAAA,EAAA,CAAA;AAAA,EAE/B,oBAAsB,EAAA,GAAA,CAAA;AAAA,WACX,EAAA,KAAA,CAAM,OAAO,IAAK,CAAA,SAAA,CAAA;AAAA,iBAAA,EACZ,MAAM,UAAW,CAAA,iBAAA,CAAA;AAAA,eACnB,EAAA,KAAA,CAAM,WAAW,IAAK,CAAA,EAAA,CAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAGrC,YAAc,EAAA,GAAA,CAAA;AAAA,WACH,EAAA,KAAA,CAAM,OAAO,IAAK,CAAA,IAAA,CAAA;AAAA,iBAAA,EACZ,MAAM,UAAW,CAAA,iBAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAWd,EAAA,KAAA,CAAM,QAAQ,CAAC,CAAA,CAAA;AAAA;AAAA,EAAA,CAAA;AAGrC,CAAA,CAAA;;;;"}