{"version":3,"file":"LogRowContext.js","sources":["../../../../src/components/Logs/LogRowContext.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\n\nimport { GrafanaTheme2, DataQueryError, LogRowModel, textUtil } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { Alert } from '../Alert/Alert';\nimport { ClickOutsideWrapper } from '../ClickOutsideWrapper/ClickOutsideWrapper';\nimport { CustomScrollbar } from '../CustomScrollbar/CustomScrollbar';\nimport { List } from '../List/List';\n\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { LogRowContextRows, LogRowContextQueryErrors, HasMoreContextRows } from './LogRowContextProvider';\n\ninterface LogRowContextProps {\n  row: LogRowModel;\n  context: LogRowContextRows;\n  wrapLogMessage: boolean;\n  errors?: LogRowContextQueryErrors;\n  hasMoreContextRows?: HasMoreContextRows;\n  onOutsideClick: () => void;\n  onLoadMoreContext: () => void;\n}\n\nconst getLogRowContextStyles = (theme: GrafanaTheme2, wrapLogMessage?: boolean) => {\n  /**\n   * This is workaround for displaying uncropped context when we have unwrapping log messages.\n   * We are using margins to correctly position context. Because non-wrapped logs have always 1 line of log\n   * and 1 line of Show/Hide context switch. Therefore correct position can be reliably achieved by margins.\n   * We also adjust width to 75%.\n   */\n\n  const afterContext = wrapLogMessage\n    ? css`\n        top: -250px;\n      `\n    : css`\n        margin-top: -250px;\n        width: 75%;\n      `;\n\n  const beforeContext = wrapLogMessage\n    ? css`\n        top: 100%;\n      `\n    : css`\n        margin-top: 40px;\n        width: 75%;\n      `;\n  return {\n    commonStyles: css`\n      position: absolute;\n      height: 250px;\n      z-index: ${theme.zIndex.dropdown};\n      overflow: hidden;\n      background: ${theme.colors.background.primary};\n      box-shadow: 0 0 10px ${theme.v1.palette.black};\n      border: 1px solid ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      width: 100%;\n    `,\n    header: css`\n      height: 30px;\n      padding: 0 10px;\n      display: flex;\n      align-items: center;\n      background: ${theme.colors.background.secondary};\n    `,\n    logs: css`\n      height: 220px;\n      padding: 10px;\n    `,\n    afterContext,\n    beforeContext,\n  };\n};\n\ninterface LogRowContextGroupHeaderProps {\n  row: LogRowModel;\n  rows: Array<string | DataQueryError>;\n  onLoadMoreContext: () => void;\n  shouldScrollToBottom?: boolean;\n  canLoadMoreRows?: boolean;\n}\ninterface LogRowContextGroupProps extends LogRowContextGroupHeaderProps {\n  rows: Array<string | DataQueryError>;\n  className?: string;\n  error?: string;\n}\n\nconst LogRowContextGroupHeader = ({ row, rows, onLoadMoreContext, canLoadMoreRows }: LogRowContextGroupHeaderProps) => {\n  const { header } = useStyles2(getLogRowContextStyles);\n\n  return (\n    <div className={header}>\n      <span\n        className={css`\n          opacity: 0.6;\n        `}\n      >\n        Found {rows.length} rows.\n      </span>\n      {(rows.length >= 10 || (rows.length > 10 && rows.length % 10 !== 0)) && canLoadMoreRows && (\n        <span\n          className={css`\n            margin-left: 10px;\n            &:hover {\n              text-decoration: underline;\n              cursor: pointer;\n            }\n          `}\n          onClick={onLoadMoreContext}\n        >\n          Load 10 more\n        </span>\n      )}\n    </div>\n  );\n};\n\n/** @deprecated will be removed in the next major version */\nexport const LogRowContextGroup = ({\n  row,\n  rows,\n  error,\n  className,\n  shouldScrollToBottom,\n  canLoadMoreRows,\n  onLoadMoreContext,\n}: LogRowContextGroupProps) => {\n  const { commonStyles, logs } = useStyles2(getLogRowContextStyles);\n  const [scrollTop, setScrollTop] = useState(0);\n  const listContainerRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // We want to scroll to bottom only when we receive first 10 log lines\n    const shouldScrollRows = rows.length > 0 && rows.length <= 10;\n    if (shouldScrollToBottom && shouldScrollRows && listContainerRef.current) {\n      setScrollTop(listContainerRef.current.offsetHeight);\n    }\n  }, [shouldScrollToBottom, rows]);\n\n  const headerProps = {\n    row,\n    rows,\n    onLoadMoreContext,\n    canLoadMoreRows,\n  };\n\n  return (\n    <div className={cx(commonStyles, className)}>\n      {/* When displaying \"after\" context */}\n      {shouldScrollToBottom && !error && <LogRowContextGroupHeader {...headerProps} />}\n      <div className={logs}>\n        <CustomScrollbar autoHide scrollTop={scrollTop} autoHeightMin={'210px'}>\n          <div ref={listContainerRef}>\n            {!error && (\n              <List\n                items={rows}\n                renderItem={(item) => {\n                  return (\n                    <div\n                      className={css`\n                        padding: 5px 0;\n                      `}\n                    >\n                      {typeof item === 'string' && textUtil.hasAnsiCodes(item) ? <LogMessageAnsi value={item} /> : item}\n                    </div>\n                  );\n                }}\n              />\n            )}\n            {error && <Alert title={error} />}\n          </div>\n        </CustomScrollbar>\n      </div>\n      {/* When displaying \"before\" context */}\n      {!shouldScrollToBottom && !error && <LogRowContextGroupHeader {...headerProps} />}\n    </div>\n  );\n};\n\n/** @deprecated will be removed in the next major version */\nexport const LogRowContext = ({\n  row,\n  context,\n  errors,\n  onOutsideClick,\n  onLoadMoreContext,\n  hasMoreContextRows,\n  wrapLogMessage,\n}: LogRowContextProps) => {\n  useEffect(() => {\n    const handleEscKeyDown = (e: KeyboardEvent): void => {\n      if (e.keyCode === 27) {\n        onOutsideClick();\n      }\n    };\n    document.addEventListener('keydown', handleEscKeyDown, false);\n    return () => {\n      document.removeEventListener('keydown', handleEscKeyDown, false);\n    };\n  }, [onOutsideClick]);\n  const { afterContext, beforeContext } = useStyles2((theme) => getLogRowContextStyles(theme, wrapLogMessage));\n\n  return (\n    <ClickOutsideWrapper onClick={onOutsideClick}>\n      {/* e.stopPropagation is necessary so the log details doesn't open when clicked on log line in context\n       * and/or when context log line is being highlighted */}\n      <div onClick={(e) => e.stopPropagation()}>\n        {context.after && (\n          <LogRowContextGroup\n            rows={context.after}\n            error={errors && errors.after}\n            row={row}\n            className={afterContext}\n            shouldScrollToBottom\n            canLoadMoreRows={hasMoreContextRows ? hasMoreContextRows.after : false}\n            onLoadMoreContext={onLoadMoreContext}\n          />\n        )}\n\n        {context.before && (\n          <LogRowContextGroup\n            onLoadMoreContext={onLoadMoreContext}\n            canLoadMoreRows={hasMoreContextRows ? hasMoreContextRows.before : false}\n            row={row}\n            rows={context.before}\n            error={errors && errors.before}\n            className={beforeContext}\n          />\n        )}\n      </div>\n    </ClickOutsideWrapper>\n  );\n};\n"],"names":["React"],"mappings":"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"}