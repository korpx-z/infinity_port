{"version":3,"file":"LogDetails.js","sources":["../../../../src/components/Logs/LogDetails.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\n\nimport {\n  calculateFieldStats,\n  calculateLogsLabelStats,\n  calculateStats,\n  Field,\n  getParser,\n  LinkModel,\n  LogRowModel,\n  GrafanaTheme2,\n} from '@grafana/data';\n\nimport { withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nimport { LogDetailsRow } from './LogDetailsRow';\nimport { getLogRowStyles } from './getLogRowStyles';\nimport { getAllFields } from './logParser';\n\n/** @deprecated will be removed in the next major version */\nexport interface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  getRows: () => LogRowModel[];\n  wrapLogMessage: boolean;\n  className?: string;\n  hasError?: boolean;\n\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  showDetectedFields?: string[];\n  onClickShowDetectedField?: (key: string) => void;\n  onClickHideDetectedField?: (key: string) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsRowLevelDetails: css`\n      label: logs-row__level_details;\n      &::after {\n        top: -3px;\n      }\n    `,\n    logDetails: css`\n      label: logDetailsDefaultCursor;\n      cursor: default;\n\n      &:hover {\n        background-color: ${theme.colors.background.primary};\n      }\n    `,\n  };\n};\n\nclass UnThemedLogDetails extends PureComponent<Props> {\n  getParser = memoizeOne(getParser);\n\n  getStatsForDetectedField = (key: string) => {\n    const matcher = this.getParser(this.props.row.entry)!.buildMatcher(key);\n    return calculateFieldStats(this.props.getRows(), matcher);\n  };\n\n  render() {\n    const {\n      row,\n      theme,\n      hasError,\n      onClickFilterOutLabel,\n      onClickFilterLabel,\n      getRows,\n      showDuplicates,\n      className,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      showDetectedFields,\n      getFieldLinks,\n      wrapLogMessage,\n    } = this.props;\n    const style = getLogRowStyles(theme, row.logLevel);\n    const styles = getStyles(theme);\n    const labels = row.labels ? row.labels : {};\n    const labelsAvailable = Object.keys(labels).length > 0;\n    const fields = getAllFields(row, getFieldLinks);\n    const detectedFieldsAvailable = fields && fields.length > 0;\n    // If logs with error, we are not showing the level color\n    const levelClassName = cx(!hasError && [style.logsRowLevel, styles.logsRowLevelDetails]);\n\n    return (\n      <tr className={cx(className, styles.logDetails)}>\n        {showDuplicates && <td />}\n        <td className={levelClassName} aria-label=\"Log level\" />\n        <td colSpan={4}>\n          <div className={style.logDetailsContainer}>\n            <table className={style.logDetailsTable}>\n              <tbody>\n                {labelsAvailable && (\n                  <tr>\n                    <td colSpan={5} className={style.logDetailsHeading} aria-label=\"Log labels\">\n                      Log labels\n                    </td>\n                  </tr>\n                )}\n                {Object.keys(labels)\n                  .sort()\n                  .map((key) => {\n                    const value = labels[key];\n                    return (\n                      <LogDetailsRow\n                        key={`${key}=${value}`}\n                        parsedKey={key}\n                        parsedValue={value}\n                        isLabel={true}\n                        getStats={() => calculateLogsLabelStats(getRows(), key)}\n                        onClickFilterOutLabel={onClickFilterOutLabel}\n                        onClickFilterLabel={onClickFilterLabel}\n                      />\n                    );\n                  })}\n\n                {detectedFieldsAvailable && (\n                  <tr>\n                    <td colSpan={5} className={style.logDetailsHeading} aria-label=\"Detected fields\">\n                      Detected fields\n                      <Tooltip content=\"Fields that are parsed from log message and detected by Grafana.\">\n                        <Icon\n                          name=\"question-circle\"\n                          size=\"xs\"\n                          className={css`\n                            margin-left: 4px;\n                          `}\n                        />\n                      </Tooltip>\n                    </td>\n                  </tr>\n                )}\n                {fields.sort().map((field) => {\n                  const { key, value, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${key}=${value}`}\n                      parsedKey={key}\n                      parsedValue={value}\n                      links={links}\n                      onClickShowDetectedField={onClickShowDetectedField}\n                      onClickHideDetectedField={onClickHideDetectedField}\n                      getStats={() =>\n                        fieldIndex === undefined\n                          ? this.getStatsForDetectedField(key)\n                          : calculateStats(row.dataFrame.fields[fieldIndex].values.toArray())\n                      }\n                      showDetectedFields={showDetectedFields}\n                      wrapLogMessage={wrapLogMessage}\n                    />\n                  );\n                })}\n                {!detectedFieldsAvailable && !labelsAvailable && (\n                  <tr>\n                    <td colSpan={5} aria-label=\"No details\">\n                      No details available\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n}\n\n/** @deprecated will be removed in the next major version */\nexport const LogDetails = withTheme2(UnThemedLogDetails);\nLogDetails.displayName = 'LogDetails';\n"],"names":["React"],"mappings":"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"}