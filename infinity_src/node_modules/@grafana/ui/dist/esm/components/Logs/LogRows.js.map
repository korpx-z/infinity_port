{"version":3,"file":"LogRows.js","sources":["../../../../src/components/Logs/LogRows.tsx"],"sourcesContent":["import memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\n\nimport { TimeZone, LogsDedupStrategy, LogRowModel, Field, LinkModel, LogsSortOrder, sortLogRows } from '@grafana/data';\n\nimport { withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\n\nimport { LogRow } from './LogRow';\nimport { RowContextOptions } from './LogRowContextProvider';\nimport { getLogRowStyles } from './getLogRowStyles';\n\n/** @deprecated will be removed in the next major version */\nexport const PREVIEW_LIMIT = 100;\n\n/** @deprecated will be removed in the next major version */\nexport interface Props extends Themeable2 {\n  logRows?: LogRowModel[];\n  deduplicatedRows?: LogRowModel[];\n  dedupStrategy: LogsDedupStrategy;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  previewLimit?: number;\n  forceEscape?: boolean;\n  showDetectedFields?: string[];\n  showContextToggle?: (row?: LogRowModel) => boolean;\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  getRowContext?: (row: LogRowModel, options?: RowContextOptions) => Promise<any>;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  onClickShowDetectedField?: (key: string) => void;\n  onClickHideDetectedField?: (key: string) => void;\n  onLogRowHover?: (row?: LogRowModel) => void;\n}\n\ninterface State {\n  renderAll: boolean;\n}\n\nclass UnThemedLogRows extends PureComponent<Props, State> {\n  renderAllTimer: number | null = null;\n\n  static defaultProps = {\n    previewLimit: PREVIEW_LIMIT,\n  };\n\n  state: State = {\n    renderAll: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    const { logRows, previewLimit } = this.props;\n    const rowCount = logRows ? logRows.length : 0;\n    // Render all right away if not too far over the limit\n    const renderAll = rowCount <= previewLimit! * 2;\n    if (renderAll) {\n      this.setState({ renderAll });\n    } else {\n      this.renderAllTimer = window.setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.renderAllTimer) {\n      clearTimeout(this.renderAllTimer);\n    }\n  }\n\n  makeGetRows = memoizeOne((orderedRows: LogRowModel[]) => {\n    return () => orderedRows;\n  });\n\n  sortLogs = memoizeOne((logRows: LogRowModel[], logsSortOrder: LogsSortOrder): LogRowModel[] =>\n    sortLogRows(logRows, logsSortOrder)\n  );\n\n  render() {\n    const {\n      dedupStrategy,\n      showContextToggle,\n      showLabels,\n      showTime,\n      wrapLogMessage,\n      prettifyLogMessage,\n      logRows,\n      deduplicatedRows,\n      timeZone,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      theme,\n      enableLogDetails,\n      previewLimit,\n      getFieldLinks,\n      logsSortOrder,\n      showDetectedFields,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      forceEscape,\n      onLogRowHover,\n    } = this.props;\n    const { renderAll } = this.state;\n    const { logsRowsTable } = getLogRowStyles(theme);\n    const dedupedRows = deduplicatedRows ? deduplicatedRows : logRows;\n    const hasData = logRows && logRows.length > 0;\n    const dedupCount = dedupedRows\n      ? dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0)\n      : 0;\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    // Staged rendering\n    const processedRows = dedupedRows ? dedupedRows : [];\n    const orderedRows = logsSortOrder ? this.sortLogs(processedRows, logsSortOrder) : processedRows;\n    const firstRows = orderedRows.slice(0, previewLimit!);\n    const lastRows = orderedRows.slice(previewLimit!, orderedRows.length);\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = this.makeGetRows(orderedRows);\n    const getRowContext = this.props.getRowContext ? this.props.getRowContext : () => Promise.resolve([]);\n\n    return (\n      <table className={logsRowsTable}>\n        <tbody>\n          {hasData &&\n            firstRows.map((row, index) => (\n              <LogRow\n                key={row.uid}\n                getRows={getRows}\n                getRowContext={getRowContext}\n                row={row}\n                showContextToggle={showContextToggle}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showTime={showTime}\n                showDetectedFields={showDetectedFields}\n                wrapLogMessage={wrapLogMessage}\n                prettifyLogMessage={prettifyLogMessage}\n                timeZone={timeZone}\n                enableLogDetails={enableLogDetails}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                onClickShowDetectedField={onClickShowDetectedField}\n                onClickHideDetectedField={onClickHideDetectedField}\n                getFieldLinks={getFieldLinks}\n                logsSortOrder={logsSortOrder}\n                forceEscape={forceEscape}\n                onLogRowHover={onLogRowHover}\n              />\n            ))}\n          {hasData &&\n            renderAll &&\n            lastRows.map((row, index) => (\n              <LogRow\n                key={row.uid}\n                getRows={getRows}\n                getRowContext={getRowContext}\n                row={row}\n                showContextToggle={showContextToggle}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showTime={showTime}\n                showDetectedFields={showDetectedFields}\n                wrapLogMessage={wrapLogMessage}\n                prettifyLogMessage={prettifyLogMessage}\n                timeZone={timeZone}\n                enableLogDetails={enableLogDetails}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                onClickShowDetectedField={onClickShowDetectedField}\n                onClickHideDetectedField={onClickHideDetectedField}\n                getFieldLinks={getFieldLinks}\n                logsSortOrder={logsSortOrder}\n                forceEscape={forceEscape}\n                onLogRowHover={onLogRowHover}\n              />\n            ))}\n          {hasData && !renderAll && (\n            <tr>\n              <td colSpan={5}>Rendering {orderedRows.length - previewLimit!} rows...</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\n/** @deprecated will be removed in the next major version */\nexport const LogRows = withTheme2(UnThemedLogRows);\nLogRows.displayName = 'LogsRows';\n"],"names":["React"],"mappings":"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"}