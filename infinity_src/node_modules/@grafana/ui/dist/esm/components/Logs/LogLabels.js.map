{"version":3,"file":"LogLabels.js","sources":["../../../../src/components/Logs/LogLabels.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, Labels } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\n\n// Levels are already encoded in color, filename is a Loki-ism\nconst HIDDEN_LABELS = ['level', 'lvl', 'filename'];\n\ninterface Props {\n  labels: Labels;\n}\n\n/** @deprecated will be removed in the next major version */\nexport const LogLabels = ({ labels }: Props) => {\n  const styles = useStyles2(getStyles);\n  const displayLabels = Object.keys(labels).filter((label) => !label.startsWith('_') && !HIDDEN_LABELS.includes(label));\n\n  if (displayLabels.length === 0) {\n    return (\n      <span className={cx([styles.logsLabels])}>\n        <span className={cx([styles.logsLabel])}>(no unique labels)</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={cx([styles.logsLabels])}>\n      {displayLabels.sort().map((label) => {\n        const value = labels[label];\n        if (!value) {\n          return;\n        }\n        const tooltip = `${label}: ${value}`;\n        return (\n          <span key={label} className={cx([styles.logsLabel])}>\n            <span className={cx([styles.logsLabelValue])} title={tooltip}>\n              {value}\n            </span>\n          </span>\n        );\n      })}\n    </span>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsLabels: css`\n      display: flex;\n      flex-wrap: wrap;\n      font-size: ${theme.typography.size.xs};\n    `,\n    logsLabel: css`\n      label: logs-label;\n      display: flex;\n      padding: 0 2px;\n      background-color: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius(1)};\n      margin: 1px 4px 0 0;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    `,\n    logsLabelValue: css`\n      label: logs-label__value;\n      display: inline-block;\n      max-width: 20em;\n      text-overflow: ellipsis;\n      overflow: hidden;\n    `,\n  };\n};\n"],"names":["React"],"mappings":";;;;AAQA,MAAM,aAAgB,GAAA,CAAC,OAAS,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;AAO1C,MAAM,SAAY,GAAA,CAAC,EAAE,MAAA,EAAoB,KAAA;AAC9C,EAAM,MAAA,MAAA,GAAS,WAAW,SAAS,CAAA,CAAA;AACnC,EAAA,MAAM,gBAAgB,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAE,OAAO,CAAC,KAAA,KAAU,CAAC,KAAA,CAAM,WAAW,GAAG,CAAA,IAAK,CAAC,aAAc,CAAA,QAAA,CAAS,KAAK,CAAC,CAAA,CAAA;AAEpH,EAAI,IAAA,aAAA,CAAc,WAAW,CAAG,EAAA;AAC9B,IAAA,oDACG,MAAK,EAAA,EAAA,SAAA,EAAW,GAAG,CAAC,MAAA,CAAO,UAAU,CAAC,CAAA,EAAA,+CACpC,MAAK,EAAA,EAAA,SAAA,EAAW,GAAG,CAAC,MAAA,CAAO,SAAS,CAAC,CAAA,EAAA,EAAG,oBAAkB,CAC7D,CAAA,CAAA;AAAA,GAEJ;AAEA,EAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAK,SAAW,EAAA,EAAA,CAAG,CAAC,MAAO,CAAA,UAAU,CAAC,CAAA,EAAA,EACpC,aAAc,CAAA,IAAA,EAAO,CAAA,GAAA,CAAI,CAAC,KAAU,KAAA;AACnC,IAAM,MAAA,KAAA,GAAQ,OAAO,KAAK,CAAA,CAAA;AAC1B,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,OAAA;AAAA,KACF;AACA,IAAM,MAAA,OAAA,GAAU,GAAG,KAAU,CAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA;AAC7B,IACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,UAAK,GAAK,EAAA,KAAA,EAAO,WAAW,EAAG,CAAA,CAAC,MAAO,CAAA,SAAS,CAAC,CAAA,EAAA,+CAC/C,MAAK,EAAA,EAAA,SAAA,EAAW,EAAG,CAAA,CAAC,MAAO,CAAA,cAAc,CAAC,CAAG,EAAA,KAAA,EAAO,OAClD,EAAA,EAAA,KACH,CACF,CAAA,CAAA;AAAA,GAEH,CACH,CAAA,CAAA;AAEJ,EAAA;AAEA,MAAM,SAAA,GAAY,CAAC,KAAyB,KAAA;AAC1C,EAAO,OAAA;AAAA,IACL,UAAY,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA,iBAGG,EAAA,KAAA,CAAM,WAAW,IAAK,CAAA,EAAA,CAAA;AAAA,IAAA,CAAA;AAAA,IAErC,SAAW,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA,wBAIW,EAAA,KAAA,CAAM,OAAO,UAAW,CAAA,SAAA,CAAA;AAAA,qBAC3B,EAAA,KAAA,CAAM,KAAM,CAAA,YAAA,CAAa,CAAC,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,IAM7C,cAAgB,EAAA,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAA,CAAA;AAAA,GAOlB,CAAA;AACF,CAAA;;;;"}