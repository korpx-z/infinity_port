{"version":3,"file":"LogRow.js","sources":["../../../../src/components/Logs/LogRow.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport {\n  Field,\n  LinkModel,\n  LogRowModel,\n  LogsSortOrder,\n  TimeZone,\n  DataQueryResponse,\n  dateTimeFormat,\n  checkLogsError,\n  escapeUnescapedString,\n  GrafanaTheme2,\n} from '@grafana/data';\n\nimport { styleMixins, withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nimport { LogDetails } from './LogDetails';\nimport { LogLabels } from './LogLabels';\nimport {\n  LogRowContextRows,\n  LogRowContextQueryErrors,\n  HasMoreContextRows,\n  LogRowContextProvider,\n  RowContextOptions,\n} from './LogRowContextProvider';\nimport { LogRowMessage } from './LogRowMessage';\nimport { LogRowMessageDetectedFields } from './LogRowMessageDetectedFields';\nimport { getLogRowStyles } from './getLogRowStyles';\n\n//Components\n\ninterface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  forceEscape?: boolean;\n  showDetectedFields?: string[];\n  getRows: () => LogRowModel[];\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  onContextClick?: () => void;\n  getRowContext: (row: LogRowModel, options?: RowContextOptions) => Promise<DataQueryResponse>;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  showContextToggle?: (row?: LogRowModel) => boolean;\n  onClickShowDetectedField?: (key: string) => void;\n  onClickHideDetectedField?: (key: string) => void;\n  onLogRowHover?: (row?: LogRowModel) => void;\n}\n\ninterface State {\n  showContext: boolean;\n  showDetails: boolean;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    topVerticalAlign: css`\n      label: topVerticalAlign;\n      margin-top: -${theme.spacing(0.9)};\n      margin-left: -${theme.spacing(0.25)};\n    `,\n    detailsOpen: css`\n      &:hover {\n        background-color: ${styleMixins.hoverColor(theme.colors.background.primary, theme)};\n      }\n    `,\n    errorLogRow: css`\n      label: erroredLogRow;\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n/**\n * Renders a log line.\n *\n * When user hovers over it for a certain time, it lazily parses the log line.\n * Once a parser is found, it will determine fields, that will be highlighted.\n * When the user requests stats for a field, they will be calculated and rendered below the row.\n */\nclass UnThemedLogRow extends PureComponent<Props, State> {\n  state: State = {\n    showContext: false,\n    showDetails: false,\n  };\n\n  toggleContext = () => {\n    this.setState((state) => {\n      return {\n        showContext: !state.showContext,\n      };\n    });\n  };\n\n  toggleDetails = () => {\n    if (!this.props.enableLogDetails) {\n      return;\n    }\n    this.setState((state) => {\n      return {\n        showDetails: !state.showDetails,\n      };\n    });\n  };\n\n  renderTimeStamp(epochMs: number) {\n    return dateTimeFormat(epochMs, {\n      timeZone: this.props.timeZone,\n    });\n  }\n\n  renderLogRow(\n    context?: LogRowContextRows,\n    errors?: LogRowContextQueryErrors,\n    hasMoreContextRows?: HasMoreContextRows,\n    updateLimit?: () => void\n  ) {\n    const {\n      getRows,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      enableLogDetails,\n      row,\n      showDuplicates,\n      showContextToggle,\n      showLabels,\n      showTime,\n      showDetectedFields,\n      wrapLogMessage,\n      prettifyLogMessage,\n      theme,\n      getFieldLinks,\n      forceEscape,\n      onLogRowHover,\n    } = this.props;\n    const { showDetails, showContext } = this.state;\n    const style = getLogRowStyles(theme, row.logLevel);\n    const styles = getStyles(theme);\n    const { errorMessage, hasError } = checkLogsError(row);\n    const logRowBackground = cx(style.logsRow, {\n      [styles.errorLogRow]: hasError,\n    });\n\n    const processedRow =\n      row.hasUnescapedContent && forceEscape\n        ? { ...row, entry: escapeUnescapedString(row.entry), raw: escapeUnescapedString(row.raw) }\n        : row;\n\n    return (\n      <>\n        <tr\n          className={logRowBackground}\n          onClick={this.toggleDetails}\n          onMouseEnter={() => {\n            onLogRowHover && onLogRowHover(row);\n          }}\n          onMouseLeave={() => {\n            onLogRowHover && onLogRowHover(undefined);\n          }}\n        >\n          {showDuplicates && (\n            <td className={style.logsRowDuplicates}>\n              {processedRow.duplicates && processedRow.duplicates > 0 ? `${processedRow.duplicates + 1}x` : null}\n            </td>\n          )}\n          <td className={cx({ [style.logsRowLevel]: !hasError })}>\n            {hasError && (\n              <Tooltip content={`Error: ${errorMessage}`} placement=\"right\" theme=\"error\">\n                <Icon className={style.logIconError} name=\"exclamation-triangle\" size=\"xs\" />\n              </Tooltip>\n            )}\n          </td>\n          {enableLogDetails && (\n            <td title={showDetails ? 'Hide log details' : 'See log details'} className={style.logsRowToggleDetails}>\n              <Icon className={styles.topVerticalAlign} name={showDetails ? 'angle-down' : 'angle-right'} />\n            </td>\n          )}\n          {showTime && <td className={style.logsRowLocalTime}>{this.renderTimeStamp(row.timeEpochMs)}</td>}\n          {showLabels && processedRow.uniqueLabels && (\n            <td className={style.logsRowLabels}>\n              <LogLabels labels={processedRow.uniqueLabels} />\n            </td>\n          )}\n          {showDetectedFields && showDetectedFields.length > 0 ? (\n            <LogRowMessageDetectedFields\n              row={processedRow}\n              showDetectedFields={showDetectedFields!}\n              getFieldLinks={getFieldLinks}\n              wrapLogMessage={wrapLogMessage}\n            />\n          ) : (\n            <LogRowMessage\n              row={processedRow}\n              getRows={getRows}\n              errors={errors}\n              hasMoreContextRows={hasMoreContextRows}\n              updateLimit={updateLimit}\n              context={context}\n              contextIsOpen={showContext}\n              showContextToggle={showContextToggle}\n              wrapLogMessage={wrapLogMessage}\n              prettifyLogMessage={prettifyLogMessage}\n              onToggleContext={this.toggleContext}\n            />\n          )}\n        </tr>\n        {this.state.showDetails && (\n          <LogDetails\n            className={logRowBackground}\n            showDuplicates={showDuplicates}\n            getFieldLinks={getFieldLinks}\n            onClickFilterLabel={onClickFilterLabel}\n            onClickFilterOutLabel={onClickFilterOutLabel}\n            onClickShowDetectedField={onClickShowDetectedField}\n            onClickHideDetectedField={onClickHideDetectedField}\n            getRows={getRows}\n            row={processedRow}\n            wrapLogMessage={wrapLogMessage}\n            hasError={hasError}\n            showDetectedFields={showDetectedFields}\n          />\n        )}\n      </>\n    );\n  }\n\n  render() {\n    const { showContext } = this.state;\n    const { logsSortOrder, row, getRowContext } = this.props;\n\n    if (showContext) {\n      return (\n        <>\n          <LogRowContextProvider row={row} getRowContext={getRowContext} logsSortOrder={logsSortOrder}>\n            {({ result, errors, hasMoreContextRows, updateLimit }) => {\n              return <>{this.renderLogRow(result, errors, hasMoreContextRows, updateLimit)}</>;\n            }}\n          </LogRowContextProvider>\n        </>\n      );\n    }\n\n    return this.renderLogRow();\n  }\n}\n\n/** @deprecated will be removed in the next major version */\nexport const LogRow = withTheme2(UnThemedLogRow);\nLogRow.displayName = 'LogRow';\n"],"names":["styleMixins.hoverColor","React"],"mappings":"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"}