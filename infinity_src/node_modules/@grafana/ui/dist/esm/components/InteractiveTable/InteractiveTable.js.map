{"version":3,"file":"InteractiveTable.js","sources":["../../../../src/components/InteractiveTable/InteractiveTable.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { useMemo, Fragment, ReactNode, useCallback } from 'react';\nimport { useExpanded, useSortBy, useTable, TableOptions, Row, HeaderGroup } from 'react-table';\n\nimport { GrafanaTheme2, isTruthy } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { Icon } from '../Icon/Icon';\n\nimport { Column } from './types';\nimport { EXPANDER_CELL_ID, getColumns } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n\n    td {\n      padding: ${theme.spacing(1)};\n    }\n\n    td,\n    th {\n      min-width: ${theme.spacing(3)};\n    }\n  `,\n  evenRow: css`\n    background: ${theme.colors.background.primary};\n  `,\n  disableGrow: css`\n    width: 0%;\n  `,\n  header: css`\n    &,\n    & > button {\n      position: relative;\n      white-space: nowrap;\n      padding: ${theme.spacing(1)};\n    }\n    & > button {\n      &:after {\n        content: '\\\\00a0';\n      }\n      width: 100%;\n      height: 100%;\n      background: none;\n      border: none;\n      padding-right: ${theme.spacing(2.5)};\n      text-align: left;\n      &:hover {\n        background-color: ${theme.colors.emphasize(theme.colors.background.secondary, 0.05)};\n      }\n    }\n  `,\n  sortableHeader: css`\n    /* increases selector's specificity so that it always takes precedence over default styles  */\n    && {\n      padding: 0;\n    }\n  `,\n});\n\ninterface Props<TableData extends object> {\n  /**\n   * Table's columns definition. Must be memoized.\n   */\n  columns: Array<Column<TableData>>;\n  /**\n   * The data to display in the table. Must be memoized.\n   */\n  data: TableData[];\n  /**\n   * Render function for the expanded row. if not provided, the tables rows will not be expandable.\n   */\n  renderExpandedRow?: (row: TableData) => ReactNode;\n  className?: string;\n  /**\n   * Must return a unique id for each row\n   */\n  getRowId: TableOptions<TableData>['getRowId'];\n}\n\n/** @alpha */\nexport function InteractiveTable<TableData extends object>({\n  data,\n  className,\n  columns,\n  renderExpandedRow,\n  getRowId,\n}: Props<TableData>) {\n  const styles = useStyles2(getStyles);\n  const tableColumns = useMemo(() => {\n    const cols = getColumns<TableData>(columns);\n    return cols;\n  }, [columns]);\n  const id = useUniqueId();\n  const getRowHTMLID = useCallback(\n    (row: Row<TableData>) => {\n      return `${id}-${row.id}`.replace(/\\s/g, '');\n    },\n    [id]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<TableData>(\n    {\n      columns: tableColumns,\n      data,\n      autoResetExpanded: false,\n      autoResetSortBy: false,\n      disableMultiSort: true,\n      getRowId,\n      initialState: {\n        hiddenColumns: [\n          !renderExpandedRow && EXPANDER_CELL_ID,\n          ...tableColumns\n            .filter((col) => !(col.visible ? col.visible(data) : true))\n            .map((c) => c.id)\n            .filter(isTruthy),\n        ].filter(isTruthy),\n      },\n    },\n    useSortBy,\n    useExpanded\n  );\n\n  // This should be called only for rows thar we'd want to actually render, which is all at this stage.\n  // We may want to revisit this if we decide to add pagination and/or virtualized tables.\n  rows.forEach(prepareRow);\n\n  return (\n    <table {...getTableProps()} className={cx(styles.table, className)}>\n      <thead>\n        {headerGroups.map((headerGroup) => {\n          const { key, ...headerRowProps } = headerGroup.getHeaderGroupProps();\n\n          return (\n            <tr key={key} {...headerRowProps}>\n              {headerGroup.headers.map((column) => {\n                const { key, ...headerCellProps } = column.getHeaderProps();\n\n                return (\n                  <th\n                    key={key}\n                    className={cx(styles.header, {\n                      [styles.disableGrow]: column.width === 0,\n                      [styles.sortableHeader]: column.canSort,\n                    })}\n                    {...headerCellProps}\n                    {...(column.isSorted && { 'aria-sort': column.isSortedDesc ? 'descending' : 'ascending' })}\n                  >\n                    <ColumnHeader column={column} />\n                  </th>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </thead>\n\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, rowIndex) => {\n          const className = cx(rowIndex % 2 === 0 && styles.evenRow);\n          const { key, ...otherRowProps } = row.getRowProps();\n          const rowId = getRowHTMLID(row);\n\n          return (\n            <Fragment key={key}>\n              <tr className={className} {...otherRowProps}>\n                {row.cells.map((cell) => {\n                  const { key, ...otherCellProps } = cell.getCellProps();\n                  return (\n                    <td key={key} {...otherCellProps}>\n                      {cell.render('Cell', { __rowID: rowId })}\n                    </td>\n                  );\n                })}\n              </tr>\n              {\n                // @ts-expect-error react-table doesn't ship with useExpanded types and we can't use declaration merging without affecting the table viz\n                row.isExpanded && renderExpandedRow && (\n                  <tr className={className} {...otherRowProps} id={rowId}>\n                    <td colSpan={row.cells.length}>{renderExpandedRow(row.original)}</td>\n                  </tr>\n                )\n              }\n            </Fragment>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst useUniqueId = () => {\n  return useMemo(() => uniqueId('InteractiveTable'), []);\n};\n\nconst getColumnheaderStyles = (theme: GrafanaTheme2) => ({\n  sortIcon: css`\n    position: absolute;\n    top: ${theme.spacing(1)};\n  `,\n});\n\nfunction ColumnHeader<T extends object>({\n  column: { canSort, render, isSorted, isSortedDesc, getSortByToggleProps },\n}: {\n  column: HeaderGroup<T>;\n}) {\n  const styles = useStyles2(getColumnheaderStyles);\n  const { onClick } = getSortByToggleProps();\n\n  const children = (\n    <>\n      {render('Header')}\n\n      {isSorted && (\n        <span aria-hidden=\"true\" className={styles.sortIcon}>\n          <Icon name={isSortedDesc ? 'angle-down' : 'angle-up'} />\n        </span>\n      )}\n    </>\n  );\n\n  if (canSort) {\n    return (\n      <button type=\"button\" onClick={onClick}>\n        {children}\n      </button>\n    );\n  }\n\n  return children;\n}\n"],"names":["React","_a","key","className"],"mappings":"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"}