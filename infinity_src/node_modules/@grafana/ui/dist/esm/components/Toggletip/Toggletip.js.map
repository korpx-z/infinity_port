{"version":3,"file":"Toggletip.js","sources":["../../../../src/components/Toggletip/Toggletip.tsx"],"sourcesContent":["import { Placement } from '@popperjs/core';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { buildTooltipTheme } from '../../utils/tooltipUtils';\nimport { IconButton } from '../IconButton/IconButton';\nimport { Portal } from '../Portal/Portal';\n\nimport { ToggletipContent } from './types';\n\nexport interface ToggletipProps {\n  /** The theme used to display the toggletip */\n  theme?: 'info' | 'error';\n  /** The title to be displayed on the header */\n  title?: JSX.Element | string;\n  /** determine whether to show or not the close button **/\n  closeButton?: boolean;\n  /** Callback function to be called when the toggletip is closed */\n  onClose?: Function;\n  /** The preferred placement of the toggletip */\n  placement?: Placement;\n  /** The text or component that houses the content of the toggleltip */\n  content: ToggletipContent;\n  /** The text or component to be displayed on the toggletip's bottom */\n  footer?: JSX.Element | string;\n  /** The UI control users interact with to display toggletips */\n  children: JSX.Element;\n}\n\nexport const Toggletip = React.memo(\n  ({\n    children,\n    theme = 'info',\n    placement = 'auto',\n    content,\n    title,\n    closeButton = true,\n    onClose,\n    footer,\n  }: ToggletipProps) => {\n    const styles = useStyles2(getStyles);\n    const style = styles[theme];\n    const contentRef = useRef(null);\n    const [controlledVisible, setControlledVisible] = React.useState(false);\n\n    const closeToggletip = useCallback(() => {\n      setControlledVisible(false);\n      onClose?.();\n    }, [onClose]);\n\n    useEffect(() => {\n      if (controlledVisible) {\n        const handleKeyDown = (enterKey: KeyboardEvent) => {\n          if (enterKey.key === 'Escape') {\n            closeToggletip();\n          }\n        };\n        document.addEventListener('keydown', handleKeyDown);\n        return () => {\n          document.removeEventListener('keydown', handleKeyDown);\n        };\n      }\n      return;\n    }, [controlledVisible, closeToggletip]);\n\n    const { getArrowProps, getTooltipProps, setTooltipRef, setTriggerRef, visible, update } = usePopperTooltip({\n      visible: controlledVisible,\n      placement: placement,\n      interactive: true,\n      offset: [0, 8],\n      trigger: 'click',\n      onVisibleChange: (value: boolean) => {\n        setControlledVisible(value);\n        if (!value) {\n          onClose?.();\n        }\n      },\n    });\n\n    return (\n      <>\n        {React.cloneElement(children, {\n          ref: setTriggerRef,\n          tabIndex: 0,\n        })}\n        {visible && (\n          <Portal>\n            <div\n              data-testid=\"toggletip-content\"\n              ref={setTooltipRef}\n              {...getTooltipProps({ className: style.container })}\n            >\n              {Boolean(title) && <div className={style.header}>{title}</div>}\n              {closeButton && (\n                <div className={style.headerClose}>\n                  <IconButton\n                    aria-label=\"Close Toggletip\"\n                    name=\"times\"\n                    size=\"md\"\n                    data-testid=\"toggletip-header-close\"\n                    onClick={closeToggletip}\n                  />\n                </div>\n              )}\n              <div ref={contentRef} {...getArrowProps({ className: style.arrow })} />\n              <div className={style.body}>\n                {(typeof content === 'string' || React.isValidElement(content)) && content}\n                {typeof content === 'function' && update && content({ update })}\n              </div>\n              {Boolean(footer) && <div className={style.footer}>{footer}</div>}\n            </div>\n          </Portal>\n        )}\n      </>\n    );\n  }\n);\n\nToggletip.displayName = 'Toggletip';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  const info = buildTooltipTheme(\n    theme,\n    theme.components.tooltip.background,\n    theme.components.tooltip.background,\n    theme.components.tooltip.text,\n    { topBottom: 3, rightLeft: 3 }\n  );\n  const error = buildTooltipTheme(\n    theme,\n    theme.colors.error.main,\n    theme.colors.error.main,\n    theme.colors.error.contrastText,\n    { topBottom: 3, rightLeft: 3 }\n  );\n\n  return {\n    info,\n    error,\n  };\n};\n"],"names":["React"],"mappings":"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"}