{"version":3,"file":"ReactMonacoEditorLazy.js","sources":["../../../../src/components/Monaco/ReactMonacoEditorLazy.tsx"],"sourcesContent":["import React from 'react';\n\nimport { ErrorWithStack, LoadingPlaceholder } from '..';\nimport { useAsyncDependency } from '../../utils/useAsyncDependency';\n\n// we only use import type so it will not be included in the bundle\nimport type { ReactMonacoEditorProps } from './types';\n\n/**\n * @internal\n * Experimental export\n **/\nexport const ReactMonacoEditorLazy = (props: ReactMonacoEditorProps) => {\n  const { loading, error, dependency } = useAsyncDependency(\n    import(/* webpackChunkName: \"react-monaco-editor\" */ './ReactMonacoEditor')\n  );\n\n  if (loading) {\n    return <LoadingPlaceholder text={''} />;\n  }\n\n  if (error) {\n    return (\n      <ErrorWithStack\n        title=\"React Monaco Editor failed to load\"\n        error={error}\n        errorInfo={{ componentStack: error?.stack || '' }}\n      />\n    );\n  }\n\n  const ReactMonacoEditor = dependency.ReactMonacoEditor;\n  return <ReactMonacoEditor {...props} />;\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYa,MAAA,qBAAA,GAAwB,CAAC,KAAkC,KAAA;AACtE,EAAA,MAAM,EAAE,OAAA,EAAS,KAAO,EAAA,UAAA,EAAe,GAAA,kBAAA;AAAA,IACrC;AAAA;AAAA,MAAqD,wBAAA;AAAA,KAAqB;AAAA,GAC5E,CAAA;AAEA,EAAA,IAAI,OAAS,EAAA;AACX,IAAO,uBAAAA,cAAA,CAAA,aAAA,CAAC,kBAAmB,EAAA,EAAA,IAAA,EAAM,EAAI,EAAA,CAAA,CAAA;AAAA,GACvC;AAEA,EAAA,IAAI,KAAO,EAAA;AACT,IACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,MAAC,cAAA;AAAA,MAAA;AAAA,QACC,KAAM,EAAA,oCAAA;AAAA,QACN,KAAA;AAAA,QACA,SAAW,EAAA,EAAE,cAAgB,EAAA,CAAA,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAO,UAAS,EAAG,EAAA;AAAA,OAAA;AAAA,KAClD,CAAA;AAAA,GAEJ;AAEA,EAAA,MAAM,oBAAoB,UAAW,CAAA,iBAAA,CAAA;AACrC,EAAO,uBAAAA,cAAA,CAAA,aAAA,CAAC,sCAAsB,KAAO,CAAA,CAAA,CAAA;AACvC;;;;"}