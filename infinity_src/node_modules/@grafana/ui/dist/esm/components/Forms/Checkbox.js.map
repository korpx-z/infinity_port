{"version":3,"file":"Checkbox.js","sources":["../../../../src/components/Forms/Checkbox.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLProps, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { stylesFactory, useStyles2 } from '../../themes';\nimport { getFocusStyles, getMouseFocusStyles } from '../../themes/mixins';\n\nimport { getLabelStyles } from './Label';\n\nexport interface CheckboxProps extends Omit<HTMLProps<HTMLInputElement>, 'value'> {\n  label?: string;\n  description?: string;\n  value?: boolean;\n  // htmlValue allows to specify the input \"value\" attribute\n  htmlValue?: string | number;\n}\n\nexport const Checkbox = React.forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ label, description, value, htmlValue, onChange, disabled, className, ...inputProps }, ref) => {\n    const handleOnChange = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n          onChange(e);\n        }\n      },\n      [onChange]\n    );\n    const styles = useStyles2(getCheckboxStyles);\n\n    return (\n      <label className={cx(styles.wrapper, className)}>\n        <div className={styles.checkboxWrapper}>\n          <input\n            type=\"checkbox\"\n            className={styles.input}\n            checked={value}\n            disabled={disabled}\n            onChange={handleOnChange}\n            value={htmlValue}\n            {...inputProps}\n            ref={ref}\n          />\n          <span className={styles.checkmark} />\n        </div>\n        {label && <span className={styles.label}>{label}</span>}\n        {description && <span className={styles.description}>{description}</span>}\n      </label>\n    );\n  }\n);\n\nexport const getCheckboxStyles = stylesFactory((theme: GrafanaTheme2) => {\n  const labelStyles = getLabelStyles(theme);\n  const checkboxSize = 2;\n  const labelPadding = 1;\n\n  return {\n    wrapper: css`\n      display: inline-grid;\n      align-items: center;\n      column-gap: ${theme.spacing(labelPadding)};\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto auto;\n      position: relative;\n      vertical-align: middle;\n    `,\n    input: css`\n      position: absolute;\n      z-index: 1;\n      top: 0;\n      left: 0;\n      width: 100% !important; // global styles unset this\n      height: 100%;\n      opacity: 0;\n\n      &:focus + span,\n      &:focus-visible + span {\n        ${getFocusStyles(theme)}\n      }\n\n      &:focus:not(:focus-visible) + span {\n        ${getMouseFocusStyles(theme)}\n      }\n\n      /**\n       * Using adjacent sibling selector to style checked state.\n       * Primarily to limit the classes necessary to use when these classes will be used\n       * for angular components styling\n       * */\n      &:checked + span {\n        background: blue;\n        background: ${theme.colors.primary.main};\n        border: none;\n\n        &:hover {\n          background: ${theme.colors.primary.shade};\n        }\n\n        &:after {\n          content: '';\n          position: absolute;\n          z-index: 2;\n          left: 5px;\n          top: 1px;\n          width: 6px;\n          height: 12px;\n          border: solid ${theme.colors.primary.contrastText};\n          border-width: 0 3px 3px 0;\n          transform: rotate(45deg);\n        }\n      }\n\n      &:disabled + span {\n        background-color: ${theme.colors.action.disabledBackground};\n        cursor: not-allowed;\n\n        &:hover {\n          background-color: ${theme.colors.action.disabledBackground};\n        }\n\n        &:after {\n          border-color: ${theme.colors.action.disabledText};\n        }\n      }\n    `,\n    checkboxWrapper: css`\n      display: flex;\n      align-items: center;\n      grid-column-start: 1;\n      grid-row-start: 1;\n    `,\n    checkmark: css`\n      position: relative; /* Checkbox should be layered on top of the invisible input so it recieves :hover */\n      z-index: 2;\n      display: inline-block;\n      width: ${theme.spacing(checkboxSize)};\n      height: ${theme.spacing(checkboxSize)};\n      border-radius: ${theme.shape.borderRadius()};\n      background: ${theme.components.input.background};\n      border: 1px solid ${theme.components.input.borderColor};\n\n      &:hover {\n        cursor: pointer;\n        border-color: ${theme.components.input.borderHover};\n      }\n    `,\n    label: cx(\n      labelStyles.label,\n      css`\n        grid-column-start: 2;\n        grid-row-start: 1;\n        position: relative;\n        z-index: 2;\n        cursor: pointer;\n        max-width: fit-content;\n        line-height: ${theme.typography.bodySmall.lineHeight};\n        margin-bottom: 0;\n      `\n    ),\n    description: cx(\n      labelStyles.description,\n      css`\n        grid-column-start: 2;\n        grid-row-start: 2;\n        line-height: ${theme.typography.bodySmall.lineHeight};\n        margin-top: 0; /* The margin effectively comes from the top: -2px on the label above it */\n      `\n    ),\n  };\n});\n\nCheckbox.displayName = 'Checkbox';\n"],"names":["React"],"mappings":"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"}