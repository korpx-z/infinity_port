{"version":3,"file":"ConfirmModal.js","sources":["../../../../src/components/ConfirmModal/ConfirmModal.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { HorizontalGroup, Input } from '..';\nimport { useStyles2 } from '../../themes';\nimport { IconName } from '../../types/icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { Modal } from '../Modal/Modal';\n\nexport interface ConfirmModalProps {\n  /** Toggle modal's open/closed state */\n  isOpen: boolean;\n  /** Title for the modal header */\n  title: string;\n  /** Modal content */\n  body: React.ReactNode;\n  /** Modal description */\n  description?: React.ReactNode;\n  /** Text for confirm button */\n  confirmText: string;\n  /** Variant for confirm button */\n  confirmVariant?: ButtonVariant;\n  /** Text for dismiss button */\n  dismissText?: string;\n  /** Variant for dismiss button */\n  dismissVariant?: ButtonVariant;\n  /** Icon for the modal header */\n  icon?: IconName;\n  /** Additional styling for modal container */\n  modalClass?: string;\n  /** Text user needs to fill in before confirming */\n  confirmationText?: string;\n  /** Text for alternative button */\n  alternativeText?: string;\n  /** Confirm button variant */\n  confirmButtonVariant?: ButtonVariant;\n  /** Confirm action callback */\n  onConfirm(): void;\n  /** Dismiss action callback */\n  onDismiss(): void;\n  /** Alternative action callback */\n  onAlternative?(): void;\n}\n\nexport const ConfirmModal = ({\n  isOpen,\n  title,\n  body,\n  description,\n  confirmText,\n  confirmVariant = 'destructive',\n  confirmationText,\n  dismissText = 'Cancel',\n  dismissVariant = 'secondary',\n  alternativeText,\n  modalClass,\n  icon = 'exclamation-triangle',\n  onConfirm,\n  onDismiss,\n  onAlternative,\n  confirmButtonVariant = 'destructive',\n}: ConfirmModalProps): JSX.Element => {\n  const [disabled, setDisabled] = useState(Boolean(confirmationText));\n  const styles = useStyles2(getStyles);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const onConfirmationTextChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setDisabled(confirmationText?.localeCompare(event.currentTarget.value) !== 0);\n  };\n\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setDisabled(Boolean(confirmationText));\n    }\n  }, [isOpen, confirmationText]);\n\n  return (\n    <Modal className={cx(styles.modal, modalClass)} title={title} icon={icon} isOpen={isOpen} onDismiss={onDismiss}>\n      <div className={styles.modalText}>\n        {body}\n        {description ? <div className={styles.modalDescription}>{description}</div> : null}\n        {confirmationText ? (\n          <div className={styles.modalConfirmationInput}>\n            <HorizontalGroup>\n              <Input placeholder={`Type ${confirmationText} to confirm`} onChange={onConfirmationTextChange} />\n            </HorizontalGroup>\n          </div>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant={dismissVariant} onClick={onDismiss} fill=\"outline\">\n          {dismissText}\n        </Button>\n        <Button\n          variant={confirmButtonVariant}\n          onClick={onConfirm}\n          disabled={disabled}\n          ref={buttonRef}\n          aria-label={selectors.pages.ConfirmModal.delete}\n        >\n          {confirmText}\n        </Button>\n        {onAlternative ? (\n          <Button variant=\"primary\" onClick={onAlternative}>\n            {alternativeText}\n          </Button>\n        ) : null}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalText: css({\n    fontSize: theme.typography.h5.fontSize,\n    color: theme.colors.text.primary,\n  }),\n  modalDescription: css({\n    fontSize: theme.typography.body.fontSize,\n  }),\n  modalConfirmationInput: css({\n    paddingTop: theme.spacing(1),\n  }),\n});\n"],"names":["React"],"mappings":"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"}