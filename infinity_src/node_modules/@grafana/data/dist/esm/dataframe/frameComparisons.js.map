{"version":3,"file":"frameComparisons.js","sources":["../../../src/dataframe/frameComparisons.ts"],"sourcesContent":["import { isEqual } from 'lodash';\n\nimport { DataFrame } from '../types/dataFrame';\n\n/**\n * Returns true if both frames have the same name, fields, labels and configs.\n *\n * @example\n * To compare multiple frames use:\n * ```\n * compareArrayValues(a, b, framesHaveSameStructure);\n * ```\n * @beta\n */\nexport function compareDataFrameStructures(a: DataFrame, b: DataFrame, skipConfig?: boolean): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a?.fields?.length !== b?.fields?.length) {\n    return false;\n  }\n\n  if (a.name !== b.name) {\n    return false;\n  }\n\n  for (let i = 0; i < a.fields.length; i++) {\n    const fA = a.fields[i];\n    const fB = b.fields[i];\n\n    if (fA.type !== fB.type || fA.name !== fB.name) {\n      return false;\n    }\n\n    // Do not check the config fields\n    if (skipConfig) {\n      continue;\n    }\n\n    // Check if labels are different\n    if (fA.labels && fB.labels && !shallowCompare(fA.labels, fB.labels)) {\n      return false;\n    }\n\n    const cfgA = fA.config;\n    const cfgB = fB.config;\n\n    // need to type assert on the object keys here\n    // see e.g. https://github.com/Microsoft/TypeScript/issues/12870\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    let aKeys = Object.keys(cfgA) as Array<keyof typeof cfgA>;\n    let bKeys = Object.keys(cfgB) as Array<keyof typeof cfgB>;\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n\n    for (const key of aKeys) {\n      if (!(key in cfgB)) {\n        return false;\n      }\n\n      if (key === 'interval') {\n        continue;\n      }\n\n      // Deep comparison on all object properties\n      if (!isEqual(cfgA[key], cfgB[key])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check if all values in two arrays match the compare function\n *\n * @beta\n */\nexport function compareArrayValues<T>(a: T[], b: T[], cmp: (a: T, b: T) => boolean) {\n  if (a === b) {\n    return true;\n  }\n  if (a?.length !== b?.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (!cmp(a[i], b[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype Cmp = (valA: unknown, valB: unknown) => boolean;\n\nconst defaultCmp: Cmp = (a, b) => a === b;\n\n/**\n * Checks if two objects are equal shallowly\n *\n * @beta\n */\nexport function shallowCompare<T extends {}>(a: T, b: T, cmp: Cmp = defaultCmp) {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  for (let key of aKeys) {\n    //@ts-ignore\n    if (!cmp(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"names":[],"mappings":"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"}