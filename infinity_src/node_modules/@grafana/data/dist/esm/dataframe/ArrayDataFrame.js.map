{"version":3,"file":"ArrayDataFrame.js","sources":["../../../src/dataframe/ArrayDataFrame.ts"],"sourcesContent":["import { Vector, QueryResultMeta } from '../types';\nimport { Field, FieldType, DataFrame } from '../types/dataFrame';\nimport { FunctionalVector } from '../vector/FunctionalVector';\nimport { vectorToArray } from '../vector/vectorToArray';\n\nimport { guessFieldTypeFromNameAndValue, toDataFrameDTO } from './processDataFrame';\n\n/** @public */\nexport type ValueConverter<T = any> = (val: unknown) => T;\n\nconst NOOP: ValueConverter = (v) => v;\n\nclass ArrayPropertyVector<T = any> implements Vector<T> {\n  converter = NOOP;\n\n  constructor(private source: any[], private prop: string) {}\n\n  get length(): number {\n    return this.source.length;\n  }\n\n  get(index: number): T {\n    return this.converter(this.source[index][this.prop]);\n  }\n\n  toArray(): T[] {\n    return vectorToArray(this);\n  }\n\n  toJSON(): T[] {\n    return vectorToArray(this);\n  }\n}\n\n/**\n * The ArrayDataFrame takes an array of objects and presents it as a DataFrame\n *\n * @alpha\n */\nexport class ArrayDataFrame<T = any> extends FunctionalVector<T> implements DataFrame {\n  name?: string;\n  refId?: string;\n  meta?: QueryResultMeta;\n\n  fields: Field[] = [];\n  length = 0;\n\n  constructor(private source: T[], names?: string[]) {\n    super();\n\n    this.length = source.length;\n    const first: any = source.length ? source[0] : {};\n    if (names) {\n      this.fields = names.map((name) => {\n        return {\n          name,\n          type: guessFieldTypeFromNameAndValue(name, first[name]),\n          config: {},\n          values: new ArrayPropertyVector(source, name),\n        };\n      });\n    } else {\n      this.setFieldsFromObject(first);\n    }\n  }\n\n  /**\n   * Add a field for each property in the object.  This will guess the type\n   */\n  setFieldsFromObject(obj: Record<string, unknown>) {\n    this.fields = Object.keys(obj).map((name) => {\n      return {\n        name,\n        type: guessFieldTypeFromNameAndValue(name, obj[name]),\n        config: {},\n        values: new ArrayPropertyVector(this.source, name),\n      };\n    });\n  }\n\n  /**\n   * Configure how the object property is passed to the data frame\n   */\n  setFieldType(name: string, type: FieldType, converter?: ValueConverter): Field {\n    let field = this.fields.find((f) => f.name === name);\n    if (field) {\n      field.type = type;\n    } else {\n      field = {\n        name,\n        type,\n        config: {},\n        values: new ArrayPropertyVector(this.source, name),\n      };\n      this.fields.push(field);\n    }\n    (field.values as any).converter = converter ?? NOOP;\n    return field;\n  }\n\n  /**\n   * Get an object with a property for each field in the DataFrame\n   */\n  get(idx: number): T {\n    return this.source[idx];\n  }\n\n  /**\n   * The simplified JSON values used in JSON.stringify()\n   */\n  toJSON() {\n    return toDataFrameDTO(this);\n  }\n}\n"],"names":[],"mappings":"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"}