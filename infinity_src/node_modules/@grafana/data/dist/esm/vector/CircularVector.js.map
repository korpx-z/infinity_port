{"version":3,"file":"CircularVector.js","sources":["../../../src/vector/CircularVector.ts"],"sourcesContent":["import { MutableVector } from '../types/vector';\n\nimport { FunctionalVector } from './FunctionalVector';\nimport { vectorToArray } from './vectorToArray';\n\ninterface CircularOptions<T> {\n  buffer?: T[];\n  append?: 'head' | 'tail';\n  capacity?: number;\n}\n\n/**\n * Circular vector uses a single buffer to capture a stream of values\n * overwriting the oldest value on add.\n *\n * This supports adding to the 'head' or 'tail' and will grow the buffer\n * to match a configured capacity.\n *\n * @public\n */\nexport class CircularVector<T = any> extends FunctionalVector<T> implements MutableVector<T> {\n  private buffer: T[];\n  private index: number;\n  private capacity: number;\n  private tail: boolean;\n\n  constructor(options: CircularOptions<T>) {\n    super();\n\n    this.buffer = options.buffer || [];\n    this.capacity = this.buffer.length;\n    this.tail = 'head' !== options.append;\n    this.index = 0;\n\n    this.add = this.getAddFunction();\n    if (options.capacity) {\n      this.setCapacity(options.capacity);\n    }\n  }\n\n  /**\n   * This gets the appropriate add function depending on the buffer state:\n   *  * head vs tail\n   *  * growing buffer vs overwriting values\n   */\n  private getAddFunction() {\n    // When we are not at capacity, it should actually modify the buffer\n    if (this.capacity > this.buffer.length) {\n      if (this.tail) {\n        return (value: T) => {\n          this.buffer.push(value);\n          if (this.buffer.length >= this.capacity) {\n            this.add = this.getAddFunction();\n          }\n        };\n      } else {\n        return (value: T) => {\n          this.buffer.unshift(value);\n          if (this.buffer.length >= this.capacity) {\n            this.add = this.getAddFunction();\n          }\n        };\n      }\n    }\n\n    if (this.tail) {\n      return (value: T) => {\n        this.buffer[this.index] = value;\n        this.index = (this.index + 1) % this.buffer.length;\n      };\n    }\n\n    // Append values to the head\n    return (value: T) => {\n      let idx = this.index - 1;\n      if (idx < 0) {\n        idx = this.buffer.length - 1;\n      }\n      this.buffer[idx] = value;\n      this.index = idx;\n    };\n  }\n\n  setCapacity(v: number) {\n    if (this.capacity === v) {\n      return;\n    }\n    // Make a copy so it is in order and new additions can be at the head or tail\n    const copy = this.toArray();\n    if (v > this.length) {\n      this.buffer = copy;\n    } else if (v < this.capacity) {\n      // Shrink the buffer\n      const delta = this.length - v;\n      if (this.tail) {\n        this.buffer = copy.slice(delta, copy.length); // Keep last items\n      } else {\n        this.buffer = copy.slice(0, copy.length - delta); // Keep first items\n      }\n    }\n    this.capacity = v;\n    this.index = 0;\n    this.add = this.getAddFunction();\n  }\n\n  setAppendMode(mode: 'head' | 'tail') {\n    const tail = 'head' !== mode;\n    if (tail !== this.tail) {\n      this.buffer = this.toArray().reverse();\n      this.index = 0;\n      this.tail = tail;\n      this.add = this.getAddFunction();\n    }\n  }\n\n  reverse() {\n    this.buffer.reverse();\n  }\n\n  /**\n   * Add the value to the buffer\n   */\n  add: (value: T) => void;\n\n  get(index: number) {\n    return this.buffer[(index + this.index) % this.buffer.length];\n  }\n\n  set(index: number, value: T) {\n    this.buffer[(index + this.index) % this.buffer.length] = value;\n  }\n\n  get length() {\n    return this.buffer.length;\n  }\n\n  toArray(): T[] {\n    return vectorToArray(this);\n  }\n\n  toJSON(): T[] {\n    return vectorToArray(this);\n  }\n}\n"],"names":[],"mappings":"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"}