{"version":3,"file":"logs.js","sources":["../../../src/types/logs.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n\nimport { Labels } from './data';\nimport { DataFrame } from './dataFrame';\nimport { DataQueryRequest, DataQueryResponse } from './datasource';\nimport { DataQuery } from './query';\nimport { AbsoluteTimeRange } from './time';\nexport { LogsDedupStrategy, LogsSortOrder } from '@grafana/schema';\n\n/**\n * Mapping of log level abbreviation to canonical log level.\n * Supported levels are reduce to limit color variation.\n */\nexport enum LogLevel {\n  emerg = 'critical',\n  fatal = 'critical',\n  alert = 'critical',\n  crit = 'critical',\n  critical = 'critical',\n  warn = 'warning',\n  warning = 'warning',\n  err = 'error',\n  eror = 'error',\n  error = 'error',\n  info = 'info',\n  information = 'info',\n  informational = 'info',\n  notice = 'info',\n  dbug = 'debug',\n  debug = 'debug',\n  trace = 'trace',\n  unknown = 'unknown',\n}\n\n// Used for meta information such as common labels or returned log rows in logs view in Explore\nexport enum LogsMetaKind {\n  Number,\n  String,\n  LabelsMap,\n  Error,\n}\n\nexport interface LogsMetaItem {\n  label: string;\n  value: string | number | Labels;\n  kind: LogsMetaKind;\n}\n\nexport interface LogRowModel {\n  // Index of the field from which the entry has been created so that we do not show it later in log row details.\n  entryFieldIndex: number;\n\n  // Index of the row in the dataframe. As log rows can be stitched from multiple dataFrames, this does not have to be\n  // the same as rows final index when rendered.\n  rowIndex: number;\n\n  // Full DataFrame from which we parsed this log.\n  // TODO: refactor this so we do not need to pass whole dataframes in addition to also parsed data.\n  dataFrame: DataFrame;\n  duplicates?: number;\n\n  // Actual log line\n  entry: string;\n  hasAnsi: boolean;\n  hasUnescapedContent: boolean;\n  labels: Labels;\n  logLevel: LogLevel;\n  raw: string;\n  searchWords?: string[];\n  timeFromNow: string;\n  timeEpochMs: number;\n  // timeEpochNs stores time with nanosecond-level precision,\n  // as millisecond-level precision is usually not enough for proper sorting of logs\n  timeEpochNs: string;\n  timeLocal: string;\n  timeUtc: string;\n  uid: string;\n  uniqueLabels?: Labels;\n  datasourceType?: string;\n}\n\nexport interface LogsModel {\n  hasUniqueLabels: boolean;\n  meta?: LogsMetaItem[];\n  rows: LogRowModel[];\n  series?: DataFrame[];\n  // visibleRange is time range for histogram created from log results\n  visibleRange?: AbsoluteTimeRange;\n  queries?: DataQuery[];\n  bucketSize?: number;\n}\n\nexport interface LogSearchMatch {\n  start: number;\n  length: number;\n  text: string;\n}\n\nexport interface LogLabelStatsModel {\n  active?: boolean;\n  count: number;\n  proportion: number;\n  value: string;\n}\n\n/** @deprecated will be removed in the next major version */\nexport interface LogsParser {\n  /**\n   * Value-agnostic matcher for a field label.\n   * Used to filter rows, and first capture group contains the value.\n   */\n  buildMatcher: (label: string) => RegExp;\n\n  /**\n   * Returns all parsable substrings from a line, used for highlighting\n   */\n  getFields: (line: string) => string[];\n\n  /**\n   * Gets the label name from a parsable substring of a line\n   */\n  getLabelFromField: (field: string) => string;\n\n  /**\n   * Gets the label value from a parsable substring of a line\n   */\n  getValueFromField: (field: string) => string;\n  /**\n   * Function to verify if this is a valid parser for the given line.\n   * The parser accepts the line if it returns true.\n   */\n  test: (line: string) => boolean;\n}\n\nexport enum LogsDedupDescription {\n  none = 'No de-duplication',\n  exact = 'De-duplication of successive lines that are identical, ignoring ISO datetimes.',\n  numbers = 'De-duplication of successive lines that are identical when ignoring numbers, e.g., IP addresses, latencies.',\n  signature = 'De-duplication of successive lines that have identical punctuation and whitespace.',\n}\n\n/**\n * Data sources that allow showing context rows around the provided LowRowModel should implement this method.\n * This will enable \"context\" button in Logs Panel.\n */\nexport interface DataSourceWithLogsContextSupport<TQuery extends DataQuery = DataQuery> {\n  /**\n   * Retrieve context for a given log row\n   */\n  getLogRowContext: <TContextQueryOptions extends {}>(\n    row: LogRowModel,\n    options?: TContextQueryOptions,\n    query?: TQuery\n  ) => Promise<DataQueryResponse>;\n\n  /**\n   * This method can be used to show \"context\" button based on runtime conditions (for example row model data or plugin settings, etc.)\n   */\n  showContextToggle(row?: LogRowModel): boolean;\n\n  /**\n   * This method can be used to display a custom UI in the context view.\n   * @alpha\n   * @internal\n   */\n  getLogRowContextUi?(row: LogRowModel, runContextQuery?: () => void): React.ReactNode;\n}\n\nexport const hasLogsContextSupport = (datasource: unknown): datasource is DataSourceWithLogsContextSupport => {\n  if (!datasource) {\n    return false;\n  }\n\n  const withLogsSupport = datasource as DataSourceWithLogsContextSupport;\n\n  return withLogsSupport.getLogRowContext !== undefined && withLogsSupport.showContextToggle !== undefined;\n};\n\n/**\n * Types of supplementary queries that can be run in Explore.\n * @internal\n */\nexport enum SupplementaryQueryType {\n  LogsVolume = 'LogsVolume',\n  LogsSample = 'LogsSample',\n}\n\n/**\n * Types of logs volume responses. A data source may return full range histogram (based on selected range)\n * or limited (based on returned results). This information is attached to DataFrame.meta.custom object.\n * @internal\n */\nexport enum LogsVolumeType {\n  FullRange = 'FullRange',\n  Limited = 'Limited',\n}\n\n/**\n * Custom meta information required by Logs Volume responses\n */\nexport type LogsVolumeCustomMetaData = {\n  absoluteRange: AbsoluteTimeRange;\n  logsVolumeType: LogsVolumeType;\n  datasourceName: string;\n  sourceQuery: DataQuery;\n};\n\nexport const getLogsVolumeAbsoluteRange = (\n  dataFrames: DataFrame[],\n  defaultRange: AbsoluteTimeRange\n): AbsoluteTimeRange => {\n  return dataFrames[0].meta?.custom?.absoluteRange || defaultRange;\n};\n\nexport const getLogsVolumeDataSourceInfo = (dataFrames: DataFrame[]): { name: string } | null => {\n  const customMeta = dataFrames[0]?.meta?.custom;\n\n  if (customMeta && customMeta.datasourceName) {\n    return {\n      name: customMeta.datasourceName,\n    };\n  }\n\n  return null;\n};\n\nexport const isLogsVolumeLimited = (dataFrames: DataFrame[]) => {\n  return dataFrames[0]?.meta?.custom?.logsVolumeType === LogsVolumeType.Limited;\n};\n\n/**\n * Data sources that support supplementary queries in Explore.\n * This will enable users to see additional data when running original queries.\n * Supported supplementary queries are defined in SupplementaryQueryType enum.\n * @internal\n */\nexport interface DataSourceWithSupplementaryQueriesSupport<TQuery extends DataQuery> {\n  /**\n   * Returns an observable that will be used to fetch supplementary data based on the provided\n   * supplementary query type and original request.\n   */\n  getDataProvider(\n    type: SupplementaryQueryType,\n    request: DataQueryRequest<TQuery>\n  ): Observable<DataQueryResponse> | undefined;\n  /**\n   * Returns supplementary query types that data source supports.\n   */\n  getSupportedSupplementaryQueryTypes(): SupplementaryQueryType[];\n  /**\n   * Returns a supplementary query to be used to fetch supplementary data based on the provided type and original query.\n   * If provided query is not suitable for provided supplementary query type, undefined should be returned.\n   */\n  getSupplementaryQuery(type: SupplementaryQueryType, query: TQuery): TQuery | undefined;\n}\n\nexport const hasSupplementaryQuerySupport = <TQuery extends DataQuery>(\n  datasource: unknown,\n  type: SupplementaryQueryType\n): datasource is DataSourceWithSupplementaryQueriesSupport<TQuery> => {\n  if (!datasource) {\n    return false;\n  }\n\n  const withSupplementaryQueriesSupport = datasource as DataSourceWithSupplementaryQueriesSupport<TQuery>;\n\n  return (\n    withSupplementaryQueriesSupport.getDataProvider !== undefined &&\n    withSupplementaryQueriesSupport.getSupplementaryQuery !== undefined &&\n    withSupplementaryQueriesSupport.getSupportedSupplementaryQueryTypes().includes(type)\n  );\n};\n\nexport const hasLogsContextUiSupport = (datasource: unknown): datasource is DataSourceWithLogsContextSupport => {\n  if (!datasource) {\n    return false;\n  }\n\n  const withLogsSupport = datasource as DataSourceWithLogsContextSupport;\n\n  return withLogsSupport.getLogRowContextUi !== undefined;\n};\n"],"names":["LogLevel","LogsMetaKind","LogsDedupDescription","SupplementaryQueryType","LogsVolumeType"],"mappings":"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"}