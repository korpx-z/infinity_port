{"version":3,"file":"pluginExtensions.js","sources":["../../../src/types/pluginExtensions.ts"],"sourcesContent":["import { DataQuery } from '@grafana/schema';\n\nimport { RawTimeRange, TimeZone } from './time';\n\n// Plugin Extensions types\n// ---------------------------------------\n\nexport enum PluginExtensionTypes {\n  link = 'link',\n}\n\nexport type PluginExtension = {\n  id: string;\n  type: PluginExtensionTypes;\n  title: string;\n  description: string;\n  pluginId: string;\n};\n\nexport type PluginExtensionLink = PluginExtension & {\n  type: PluginExtensionTypes.link;\n  path?: string;\n  onClick?: (event?: React.MouseEvent) => void;\n};\n\n// Objects used for registering extensions (in app plugins)\n// --------------------------------------------------------\n\nexport type PluginExtensionConfig<Context extends object = object, ExtraProps extends object = object> = Pick<\n  PluginExtension,\n  'title' | 'description'\n> &\n  ExtraProps & {\n    // The unique identifier of the Extension Point\n    // (Core Grafana extension point ids are available in the `PluginExtensionPoints` enum)\n    extensionPointId: string;\n\n    // (Optional) A function that can be used to configure the extension dynamically based on the extension point's context\n    configure?: (\n      context?: Readonly<Context>\n    ) => Partial<{ title: string; description: string } & ExtraProps> | undefined;\n  };\n\nexport type PluginExtensionLinkConfig<Context extends object = object> = PluginExtensionConfig<\n  Context,\n  Pick<PluginExtensionLink, 'path'> & {\n    type: PluginExtensionTypes.link;\n    onClick?: (event: React.MouseEvent | undefined, helpers: PluginExtensionEventHelpers<Context>) => void;\n  }\n>;\n\nexport type PluginExtensionEventHelpers<Context extends object = object> = {\n  context?: Readonly<Context>;\n  // Opens a modal dialog and renders the provided React component inside it\n  openModal: (options: {\n    // The title of the modal\n    title: string;\n    // A React element that will be rendered inside the modal\n    body: React.ElementType<{ onDismiss?: () => void }>;\n  }) => void;\n};\n\n// Extension Points & Contexts\n// --------------------------------------------------------\n\n// Extension Points available in core Grafana\nexport enum PluginExtensionPoints {\n  DashboardPanelMenu = 'grafana/dashboard/panel/menu',\n}\n\nexport type PluginExtensionPanelContext = {\n  pluginId: string;\n  id: number;\n  title: string;\n  timeRange: RawTimeRange;\n  timeZone: TimeZone;\n  dashboard: Dashboard;\n  targets: DataQuery[];\n};\n\ntype Dashboard = {\n  uid: string;\n  title: string;\n  tags: string[];\n};\n"],"names":["PluginExtensionTypes","PluginExtensionPoints"],"mappings":"AAOY,IAAA,oBAAA,qBAAAA,qBAAL,KAAA;AACL,EAAAA,sBAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AADG,EAAAA,OAAAA,qBAAAA,CAAAA;AAAA,CAAA,EAAA,oBAAA,IAAA,EAAA,EAAA;AA2DA,IAAA,qBAAA,qBAAAC,sBAAL,KAAA;AACL,EAAAA,uBAAA,oBAAqB,CAAA,GAAA,8BAAA,CAAA;AADX,EAAAA,OAAAA,sBAAAA,CAAAA;AAAA,CAAA,EAAA,qBAAA,IAAA,EAAA;;;;"}