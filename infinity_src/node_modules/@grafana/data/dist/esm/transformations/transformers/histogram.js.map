{"version":3,"file":"histogram.js","sources":["../../../../src/transformations/transformers/histogram.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getDisplayProcessor } from '../../field';\nimport { createTheme, GrafanaTheme2 } from '../../themes';\nimport { DataFrameType, SynchronousDataTransformerInfo } from '../../types';\nimport { DataFrame, Field, FieldConfig, FieldType } from '../../types/dataFrame';\nimport { roundDecimals } from '../../utils';\nimport { ArrayVector } from '../../vector/ArrayVector';\n\nimport { DataTransformerID } from './ids';\nimport { AlignedData, join } from './joinDataFrames';\n\n/**\n * @internal\n */\n/* eslint-disable */\n// prettier-ignore\nexport const histogramBucketSizes = [\n  1e-9,  2e-9,  2.5e-9,  4e-9,  5e-9,\n  1e-8,  2e-8,  2.5e-8,  4e-8,  5e-8,\n  1e-7,  2e-7,  2.5e-7,  4e-7,  5e-7,\n  1e-6,  2e-6,  2.5e-6,  4e-6,  5e-6,\n  1e-5,  2e-5,  2.5e-5,  4e-5,  5e-5,\n  1e-4,  2e-4,  2.5e-4,  4e-4,  5e-4,\n  1e-3,  2e-3,  2.5e-3,  4e-3,  5e-3,\n  1e-2,  2e-2,  2.5e-2,  4e-2,  5e-2,\n  1e-1,  2e-1,  2.5e-1,  4e-1,  5e-1,\n  1,     2,              4,     5,\n  1e+1,  2e+1,  2.5e+1,  4e+1,  5e+1,\n  1e+2,  2e+2,  2.5e+2,  4e+2,  5e+2,\n  1e+3,  2e+3,  2.5e+3,  4e+3,  5e+3,\n  1e+4,  2e+4,  2.5e+4,  4e+4,  5e+4,\n  1e+5,  2e+5,  2.5e+5,  4e+5,  5e+5,\n  1e+6,  2e+6,  2.5e+6,  4e+6,  5e+6,\n  1e+7,  2e+7,  2.5e+7,  4e+7,  5e+7,\n  1e+8,  2e+8,  2.5e+8,  4e+8,  5e+8,\n  1e+9,  2e+9,  2.5e+9,  4e+9,  5e+9,\n];\n/* eslint-enable */\n\nconst histFilter = [null];\nconst histSort = (a: number, b: number) => a - b;\n\n/**\n * @alpha\n */\nexport interface HistogramTransformerOptions {\n  bucketSize?: number; // 0 is auto\n  bucketOffset?: number;\n  // xMin?: number;\n  // xMax?: number;\n  combine?: boolean; // if multiple series are input, join them into one\n}\n\n/**\n * This is a helper class to use the same text in both a panel and transformer UI\n *\n * @internal\n */\nexport const histogramFieldInfo = {\n  bucketSize: {\n    name: 'Bucket size',\n    description: undefined,\n  },\n  bucketOffset: {\n    name: 'Bucket offset',\n    description: 'for non-zero-based buckets',\n  },\n  combine: {\n    name: 'Combine series',\n    description: 'combine all series into a single histogram',\n  },\n};\n\n/**\n * @alpha\n */\nexport const histogramTransformer: SynchronousDataTransformerInfo<HistogramTransformerOptions> = {\n  id: DataTransformerID.histogram,\n  name: 'Histogram',\n  description: 'Calculate a histogram from input data',\n  defaultOptions: {\n    fields: {},\n  },\n\n  operator: (options, ctx) => (source) =>\n    source.pipe(map((data) => histogramTransformer.transformer(options, ctx)(data))),\n\n  transformer: (options: HistogramTransformerOptions) => (data: DataFrame[]) => {\n    if (!Array.isArray(data) || data.length === 0) {\n      return data;\n    }\n    const hist = buildHistogram(data, options);\n    if (hist == null) {\n      return [];\n    }\n    return [histogramFieldsToFrame(hist)];\n  },\n};\n\n/**\n * @internal\n */\nexport const histogramFrameBucketMinFieldName = 'xMin';\n\n/**\n * @internal\n */\nexport function isHistogramFrameBucketMinFieldName(v: string) {\n  return v === histogramFrameBucketMinFieldName || v === 'BucketMin'; // REMOVE 'BuckentMin/Max'\n}\n\n/**\n * @internal\n */\nexport const histogramFrameBucketMaxFieldName = 'xMax';\n\n/**\n * @internal\n */\nexport function isHistogramFrameBucketMaxFieldName(v: string) {\n  return v === histogramFrameBucketMaxFieldName || v === 'BucketMax'; // REMOVE 'BuckentMin/Max'\n}\n\n/**\n * @alpha\n */\nexport interface HistogramFields {\n  xMin: Field;\n  xMax: Field;\n  counts: Field[]; // frequency\n}\n\n/**\n * Given a frame, find the explicit histogram fields\n *\n * @alpha\n */\nexport function getHistogramFields(frame: DataFrame): HistogramFields | undefined {\n  let xMin: Field | undefined = undefined;\n  let xMax: Field | undefined = undefined;\n  const counts: Field[] = [];\n  for (const field of frame.fields) {\n    if (isHistogramFrameBucketMinFieldName(field.name)) {\n      xMin = field;\n    } else if (isHistogramFrameBucketMaxFieldName(field.name)) {\n      xMax = field;\n    } else if (field.type === FieldType.number) {\n      counts.push(field);\n    }\n  }\n\n  // guess bucket size from single explicit bucket field\n  if (!xMax && xMin && xMin.values.length > 1) {\n    let vals = xMin.values.toArray();\n    let bucketSize = roundDecimals(vals[1] - vals[0], 6);\n\n    xMax = {\n      ...xMin,\n      name: histogramFrameBucketMaxFieldName,\n      values: new ArrayVector(vals.map((v) => v + bucketSize)),\n    };\n  }\n\n  if (!xMin && xMax && xMax?.values.length > 1) {\n    let vals = xMax.values.toArray();\n    let bucketSize = roundDecimals(vals[1] - vals[0], 6);\n\n    xMin = {\n      ...xMax,\n      name: histogramFrameBucketMinFieldName,\n      values: new ArrayVector(vals.map((v) => v - bucketSize)),\n    };\n  }\n\n  if (xMin && xMax && counts.length) {\n    return {\n      xMin,\n      xMax,\n      counts,\n    };\n  }\n  return undefined;\n}\n\nconst APPROX_BUCKETS = 20;\n\n/**\n * @alpha\n */\nexport function buildHistogram(frames: DataFrame[], options?: HistogramTransformerOptions): HistogramFields | null {\n  let bucketSize = options?.bucketSize;\n  let bucketOffset = options?.bucketOffset ?? 0;\n\n  // if bucket size is auto, try to calc from all numeric fields\n  if (!bucketSize || bucketSize < 0) {\n    let allValues: number[] = [];\n\n    // TODO: include field configs!\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          allValues = allValues.concat(field.values.toArray());\n        }\n      }\n    }\n\n    allValues = allValues.filter((v) => v != null);\n\n    allValues.sort((a, b) => a - b);\n\n    let smallestDelta = Infinity;\n\n    // TODO: case of 1 value needs work\n    if (allValues.length === 1) {\n      smallestDelta = 1;\n    } else {\n      for (let i = 1; i < allValues.length; i++) {\n        let delta = allValues[i] - allValues[i - 1];\n\n        if (delta !== 0) {\n          smallestDelta = Math.min(smallestDelta, delta);\n        }\n      }\n    }\n\n    let min = allValues[0];\n    let max = allValues[allValues.length - 1];\n\n    let range = max - min;\n\n    const targetSize = range / APPROX_BUCKETS;\n\n    // choose bucket\n    for (let i = 0; i < histogramBucketSizes.length; i++) {\n      let _bucketSize = histogramBucketSizes[i];\n\n      if (targetSize < _bucketSize && _bucketSize >= smallestDelta) {\n        bucketSize = _bucketSize;\n        break;\n      }\n    }\n  }\n\n  const getBucket = (v: number) => incrRoundDn(v - bucketOffset, bucketSize!) + bucketOffset;\n\n  // guess number of decimals\n  let bucketDecimals = (('' + bucketSize).match(/\\.\\d+$/) ?? ['.'])[0].length - 1;\n\n  let histograms: AlignedData[] = [];\n  let counts: Field[] = [];\n  let config: FieldConfig | undefined = undefined;\n\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.number) {\n        let fieldHist = histogram(field.values.toArray(), getBucket, histFilter, histSort) as AlignedData;\n        histograms.push(fieldHist);\n        counts.push({\n          ...field,\n          config: {\n            ...field.config,\n            unit: field.config.unit === 'short' ? 'short' : undefined,\n          },\n        });\n        if (!config && field.config.unit) {\n          config = field.config;\n        }\n      }\n    }\n  }\n\n  // Quit early for empty a\n  if (!counts.length) {\n    return null;\n  }\n\n  // align histograms\n  let joinedHists = join(histograms);\n\n  // zero-fill all undefined values (missing buckets -> 0 counts)\n  for (let histIdx = 1; histIdx < joinedHists.length; histIdx++) {\n    let hist = joinedHists[histIdx];\n\n    for (let bucketIdx = 0; bucketIdx < hist.length; bucketIdx++) {\n      if (hist[bucketIdx] == null) {\n        hist[bucketIdx] = 0;\n      }\n    }\n  }\n\n  const xMin: Field = {\n    name: histogramFrameBucketMinFieldName,\n    values: new ArrayVector(joinedHists[0]),\n    type: FieldType.number,\n    state: undefined,\n    config:\n      bucketDecimals === 0\n        ? config ?? {}\n        : {\n            ...config,\n            decimals: bucketDecimals,\n          },\n  };\n  const xMax = {\n    ...xMin,\n    name: histogramFrameBucketMaxFieldName,\n    values: new ArrayVector(joinedHists[0].map((v) => v + bucketSize!)),\n  };\n\n  if (options?.combine) {\n    const vals = new Array(joinedHists[0].length).fill(0);\n    for (let i = 1; i < joinedHists.length; i++) {\n      for (let j = 0; j < vals.length; j++) {\n        vals[j] += joinedHists[i][j];\n      }\n    }\n    counts = [\n      {\n        ...counts[0],\n        name: 'count',\n        values: new ArrayVector(vals),\n        type: FieldType.number,\n        state: undefined,\n      },\n    ];\n  } else {\n    counts.forEach((field, i) => {\n      field.values = new ArrayVector(joinedHists[i + 1]);\n    });\n  }\n\n  return {\n    xMin,\n    xMax,\n    counts,\n  };\n}\n\n/**\n * @internal\n */\nexport function incrRound(num: number, incr: number) {\n  return Math.round(num / incr) * incr;\n}\n\n/**\n * @internal\n */\nexport function incrRoundUp(num: number, incr: number) {\n  return Math.ceil(num / incr) * incr;\n}\n\n/**\n * @internal\n */\nexport function incrRoundDn(num: number, incr: number) {\n  return Math.floor(num / incr) * incr;\n}\n\nfunction histogram(\n  vals: number[],\n  getBucket: (v: number) => number,\n  filterOut?: any[] | null,\n  sort?: ((a: any, b: any) => number) | null\n) {\n  let hist = new Map();\n\n  for (let i = 0; i < vals.length; i++) {\n    let v = vals[i];\n\n    if (v != null) {\n      v = getBucket(v);\n    }\n\n    let entry = hist.get(v);\n\n    if (entry) {\n      entry.count++;\n    } else {\n      hist.set(v, { value: v, count: 1 });\n    }\n  }\n\n  filterOut && filterOut.forEach((v) => hist.delete(v));\n\n  let bins = [...hist.values()];\n\n  sort && bins.sort((a, b) => sort(a.value, b.value));\n\n  let values = Array(bins.length);\n  let counts = Array(bins.length);\n\n  for (let i = 0; i < bins.length; i++) {\n    values[i] = bins[i].value;\n    counts[i] = bins[i].count;\n  }\n\n  return [values, counts];\n}\n\n/**\n * @internal\n */\nexport function histogramFieldsToFrame(info: HistogramFields, theme?: GrafanaTheme2): DataFrame {\n  if (!info.xMin.display) {\n    const display = getDisplayProcessor({\n      field: info.xMin,\n      theme: theme ?? createTheme(),\n    });\n    info.xMin.display = display;\n    info.xMax.display = display;\n  }\n\n  // ensure updated units are reflected on the count field used for y axis formatting\n  info.counts[0].display = getDisplayProcessor({\n    field: info.counts[0],\n    theme: theme ?? createTheme(),\n  });\n\n  return {\n    length: info.xMin.values.length,\n    meta: {\n      type: DataFrameType.Histogram,\n    },\n    fields: [info.xMin, info.xMax, ...info.counts],\n  };\n}\n"],"names":[],"mappings":"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"}