{"version":3,"file":"filterByValue.js","sources":["../../../../src/transformations/transformers/filterByValue.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, Field } from '../../types/dataFrame';\nimport { DataTransformerInfo, MatcherConfig } from '../../types/transformations';\nimport { ArrayVector } from '../../vector/ArrayVector';\nimport { getValueMatcher } from '../matchers';\n\nimport { DataTransformerID } from './ids';\nimport { noopTransformer } from './noop';\n\nexport enum FilterByValueType {\n  exclude = 'exclude',\n  include = 'include',\n}\n\nexport enum FilterByValueMatch {\n  all = 'all',\n  any = 'any',\n}\n\nexport interface FilterByValueFilter {\n  fieldName: string;\n  config: MatcherConfig;\n}\n\nexport interface FilterByValueTransformerOptions {\n  filters: FilterByValueFilter[];\n  type: FilterByValueType;\n  match: FilterByValueMatch;\n}\n\nexport const filterByValueTransformer: DataTransformerInfo<FilterByValueTransformerOptions> = {\n  id: DataTransformerID.filterByValue,\n  name: 'Filter data by values',\n  description: 'select a subset of results based on values',\n  defaultOptions: {\n    filters: [],\n    type: FilterByValueType.include,\n    match: FilterByValueMatch.any,\n  },\n\n  operator: (options, ctx) => (source) => {\n    const filters = options.filters;\n    const matchAll = options.match === FilterByValueMatch.all;\n    const include = options.type === FilterByValueType.include;\n\n    if (!Array.isArray(filters) || filters.length === 0) {\n      return source.pipe(noopTransformer.operator({}, ctx));\n    }\n\n    return source.pipe(\n      map((data) => {\n        if (!Array.isArray(data) || data.length === 0) {\n          return data;\n        }\n\n        const rows = new Set<number>();\n\n        for (const frame of data) {\n          const fieldIndexByName = groupFieldIndexByName(frame, data);\n          const matchers = createFilterValueMatchers(filters, fieldIndexByName);\n\n          for (let index = 0; index < frame.length; index++) {\n            if (rows.has(index)) {\n              continue;\n            }\n\n            let matching = true;\n\n            for (const matcher of matchers) {\n              const match = matcher(index, frame, data);\n\n              if (!matchAll && match) {\n                matching = true;\n                break;\n              }\n\n              if (matchAll && !match) {\n                matching = false;\n                break;\n              }\n\n              matching = match;\n            }\n\n            if (matching) {\n              rows.add(index);\n            }\n          }\n        }\n\n        const processed: DataFrame[] = [];\n        const frameLength = include ? rows.size : data[0].length - rows.size;\n\n        for (const frame of data) {\n          const fields: Field[] = [];\n\n          for (const field of frame.fields) {\n            const buffer = [];\n\n            for (let index = 0; index < frame.length; index++) {\n              if (include && rows.has(index)) {\n                buffer.push(field.values.get(index));\n                continue;\n              }\n\n              if (!include && !rows.has(index)) {\n                buffer.push(field.values.get(index));\n                continue;\n              }\n            }\n\n            // We keep field config, but clean the state as it's being recalculated when the field overrides are applied\n            fields.push({\n              ...field,\n              values: new ArrayVector(buffer),\n              state: {},\n            });\n          }\n\n          processed.push({\n            ...frame,\n            fields: fields,\n            length: frameLength,\n          });\n        }\n\n        return processed;\n      })\n    );\n  },\n};\n\nconst createFilterValueMatchers = (\n  filters: FilterByValueFilter[],\n  fieldIndexByName: Record<string, number>\n): Array<(index: number, frame: DataFrame, data: DataFrame[]) => boolean> => {\n  const noop = () => false;\n\n  return filters.map((filter) => {\n    const fieldIndex = fieldIndexByName[filter.fieldName] ?? -1;\n\n    if (fieldIndex < 0) {\n      console.warn(`[FilterByValue] Could not find index for field name: ${filter.fieldName}`);\n      return noop;\n    }\n\n    const matcher = getValueMatcher(filter.config);\n    return (index, frame, data) => matcher(index, frame.fields[fieldIndex], frame, data);\n  });\n};\n\nconst groupFieldIndexByName = (frame: DataFrame, data: DataFrame[]): Record<string, number> => {\n  return frame.fields.reduce((all: Record<string, number>, field, fieldIndex) => {\n    const fieldName = getFieldDisplayName(field, frame, data);\n    all[fieldName] = fieldIndex;\n    return all;\n  }, {});\n};\n"],"names":[],"mappings":"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"}