{"version":3,"file":"groupingToMatrix.js","sources":["../../../../src/transformations/transformers/groupingToMatrix.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { MutableDataFrame } from '../../dataframe';\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, DataTransformerInfo, Field, FieldType, SpecialValue, Vector } from '../../types';\n\nimport { DataTransformerID } from './ids';\n\nexport interface GroupingToMatrixTransformerOptions {\n  columnField?: string;\n  rowField?: string;\n  valueField?: string;\n  emptyValue?: SpecialValue;\n}\n\nconst DEFAULT_COLUMN_FIELD = 'Time';\nconst DEFAULT_ROW_FIELD = 'Time';\nconst DEFAULT_VALUE_FIELD = 'Value';\nconst DEFAULT_EMPTY_VALUE = SpecialValue.Empty;\n\nexport const groupingToMatrixTransformer: DataTransformerInfo<GroupingToMatrixTransformerOptions> = {\n  id: DataTransformerID.groupingToMatrix,\n  name: 'Grouping to Matrix',\n  description: 'Groups series by field and return a matrix visualisation',\n  defaultOptions: {\n    columnField: DEFAULT_COLUMN_FIELD,\n    rowField: DEFAULT_ROW_FIELD,\n    valueField: DEFAULT_VALUE_FIELD,\n  },\n\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        const columnFieldMatch = options.columnField || DEFAULT_COLUMN_FIELD;\n        const rowFieldMatch = options.rowField || DEFAULT_ROW_FIELD;\n        const valueFieldMatch = options.valueField || DEFAULT_VALUE_FIELD;\n        const emptyValue = options.emptyValue || DEFAULT_EMPTY_VALUE;\n\n        // Accept only single queries\n        if (data.length !== 1) {\n          return data;\n        }\n\n        const frame = data[0];\n        const keyColumnField = findKeyField(frame, columnFieldMatch);\n        const keyRowField = findKeyField(frame, rowFieldMatch);\n        const valueField = findKeyField(frame, valueFieldMatch);\n        const rowColumnField = `${rowFieldMatch}\\\\${columnFieldMatch}`;\n\n        if (!keyColumnField || !keyRowField || !valueField) {\n          return data;\n        }\n\n        const columnValues = uniqueValues(keyColumnField.values);\n        const rowValues = uniqueValues(keyRowField.values);\n\n        const matrixValues: { [key: string]: { [key: string]: any } } = {};\n\n        for (let index = 0; index < valueField.values.length; index++) {\n          const columnName = keyColumnField.values.get(index);\n          const rowName = keyRowField.values.get(index);\n          const value = valueField.values.get(index);\n\n          if (!matrixValues[columnName]) {\n            matrixValues[columnName] = {};\n          }\n\n          matrixValues[columnName][rowName] = value;\n        }\n\n        const resultFrame = new MutableDataFrame();\n\n        resultFrame.addField({\n          name: rowColumnField,\n          values: rowValues,\n          type: FieldType.string,\n        });\n\n        for (const columnName of columnValues) {\n          let values = [];\n          for (const rowName of rowValues) {\n            const value = matrixValues[columnName][rowName] ?? getSpecialValue(emptyValue);\n            values.push(value);\n          }\n\n          resultFrame.addField({\n            name: columnName.toString(),\n            values: values,\n            config: valueField.config,\n            type: valueField.type,\n          });\n        }\n\n        return [resultFrame];\n      })\n    ),\n};\n\nfunction uniqueValues(values: Vector): any[] {\n  const unique = new Set();\n\n  for (let index = 0; index < values.length; index++) {\n    unique.add(values.get(index));\n  }\n\n  return Array.from(unique);\n}\n\nfunction findKeyField(frame: DataFrame, matchTitle: string): Field | null {\n  for (let fieldIndex = 0; fieldIndex < frame.fields.length; fieldIndex++) {\n    const field = frame.fields[fieldIndex];\n\n    if (matchTitle === getFieldDisplayName(field)) {\n      return field;\n    }\n  }\n\n  return null;\n}\n\nfunction getSpecialValue(specialValue: SpecialValue) {\n  switch (specialValue) {\n    case SpecialValue.False:\n      return false;\n    case SpecialValue.True:\n      return true;\n    case SpecialValue.Null:\n      return null;\n    case SpecialValue.Empty:\n    default:\n      return '';\n  }\n}\n"],"names":[],"mappings":"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"}