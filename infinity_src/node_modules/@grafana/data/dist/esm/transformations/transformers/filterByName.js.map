{"version":3,"file":"filterByName.js","sources":["../../../../src/transformations/transformers/filterByName.ts"],"sourcesContent":["import { DataTransformerInfo, MatcherConfig } from '../../types/transformations';\nimport { FieldMatcherID } from '../matchers/ids';\nimport { RegexpOrNamesMatcherOptions } from '../matchers/nameMatcher';\n\nimport { filterFieldsTransformer } from './filter';\nimport { DataTransformerID } from './ids';\n\nexport interface FilterFieldsByNameTransformerOptions {\n  include?: RegexpOrNamesMatcherOptions;\n  exclude?: RegexpOrNamesMatcherOptions;\n}\n\nexport const filterFieldsByNameTransformer: DataTransformerInfo<FilterFieldsByNameTransformerOptions> = {\n  id: DataTransformerID.filterFieldsByName,\n  name: 'Filter fields by name',\n  description: 'select a subset of fields',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options, replace) => (source) =>\n    source.pipe(\n      filterFieldsTransformer.operator(\n        {\n          include: getMatcherConfig(options.include),\n          exclude: getMatcherConfig(options.exclude),\n        },\n        replace\n      )\n    ),\n};\n\n// Exported to share with other implementations, but not exported to `@grafana/data`\nexport const getMatcherConfig = (options?: RegexpOrNamesMatcherOptions): MatcherConfig | undefined => {\n  if (!options) {\n    return undefined;\n  }\n\n  const { names, pattern } = options;\n\n  if ((!Array.isArray(names) || names.length === 0) && !pattern) {\n    return undefined;\n  }\n\n  if (!pattern) {\n    return { id: FieldMatcherID.byNames, options: { names } };\n  }\n\n  if (!Array.isArray(names) || names.length === 0) {\n    return { id: FieldMatcherID.byRegexp, options: pattern };\n  }\n\n  return { id: FieldMatcherID.byRegexpOrNames, options };\n};\n"],"names":[],"mappings":";;;;AAYO,MAAM,6BAA2F,GAAA;AAAA,EACtG,IAAI,iBAAkB,CAAA,kBAAA;AAAA,EACtB,IAAM,EAAA,uBAAA;AAAA,EACN,WAAa,EAAA,2BAAA;AAAA,EACb,gBAAgB,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,UAAU,CAAC,OAAA,EAAS,OAAY,KAAA,CAAC,WAC/B,MAAO,CAAA,IAAA;AAAA,IACL,uBAAwB,CAAA,QAAA;AAAA,MACtB;AAAA,QACE,OAAA,EAAS,gBAAiB,CAAA,OAAA,CAAQ,OAAO,CAAA;AAAA,QACzC,OAAA,EAAS,gBAAiB,CAAA,OAAA,CAAQ,OAAO,CAAA;AAAA,OAC3C;AAAA,MACA,OAAA;AAAA,KACF;AAAA,GACF;AACJ,EAAA;AAGa,MAAA,gBAAA,GAAmB,CAAC,OAAqE,KAAA;AACpG,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,EAAE,KAAO,EAAA,OAAA,EAAY,GAAA,OAAA,CAAA;AAE3B,EAAK,IAAA,CAAA,CAAC,MAAM,OAAQ,CAAA,KAAK,KAAK,KAAM,CAAA,MAAA,KAAW,CAAM,KAAA,CAAC,OAAS,EAAA;AAC7D,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAA,OAAO,EAAE,EAAI,EAAA,cAAA,CAAe,SAAS,OAAS,EAAA,EAAE,OAAQ,EAAA,CAAA;AAAA,GAC1D;AAEA,EAAA,IAAI,CAAC,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAK,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AAC/C,IAAA,OAAO,EAAE,EAAA,EAAI,cAAe,CAAA,QAAA,EAAU,SAAS,OAAQ,EAAA,CAAA;AAAA,GACzD;AAEA,EAAA,OAAO,EAAE,EAAA,EAAI,cAAe,CAAA,eAAA,EAAiB,OAAQ,EAAA,CAAA;AACvD;;;;"}