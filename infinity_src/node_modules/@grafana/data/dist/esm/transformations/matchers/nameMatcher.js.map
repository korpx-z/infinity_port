{"version":3,"file":"nameMatcher.js","sources":["../../../../src/transformations/matchers/nameMatcher.ts"],"sourcesContent":["import { getFieldDisplayName } from '../../field/fieldState';\nimport { stringToJsRegex } from '../../text/string';\nimport { Field, DataFrame } from '../../types/dataFrame';\nimport { FieldMatcherInfo, FrameMatcherInfo, FieldMatcher } from '../../types/transformations';\n\nimport { FieldMatcherID, FrameMatcherID } from './ids';\n\nexport interface RegexpOrNamesMatcherOptions {\n  pattern?: string;\n  names?: string[];\n}\n\n/**\n * Mode to be able to toggle if the names matcher should match fields in provided\n * list or all except provided names.\n * @public\n */\nexport enum ByNamesMatcherMode {\n  exclude = 'exclude',\n  include = 'include',\n}\n\n/**\n * Options to instruct the by names matcher to either match all fields in given list\n * or all except the fields in the list.\n * @public\n */\nexport interface ByNamesMatcherOptions {\n  mode?: ByNamesMatcherMode;\n  names?: string[];\n  readOnly?: boolean;\n  prefix?: string;\n}\n\n// General Field matcher\nconst fieldNameMatcher: FieldMatcherInfo<string> = {\n  id: FieldMatcherID.byName,\n  name: 'Field Name',\n  description: 'match the field name',\n  defaultOptions: '',\n\n  get: (name: string): FieldMatcher => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return name === field.name || getFieldDisplayName(field, frame, allFrames) === name;\n    };\n  },\n\n  getOptionsDisplayText: (name: string) => {\n    return `Field name: ${name}`;\n  },\n};\n\nconst multipleFieldNamesMatcher: FieldMatcherInfo<ByNamesMatcherOptions> = {\n  id: FieldMatcherID.byNames,\n  name: 'Field Names',\n  description: 'match any of the given the field names',\n  defaultOptions: {\n    mode: ByNamesMatcherMode.include,\n    names: [],\n  },\n\n  get: (options: ByNamesMatcherOptions): FieldMatcher => {\n    const { names, mode = ByNamesMatcherMode.include } = options;\n    const uniqueNames = new Set<string>(names ?? []);\n\n    const matcher = (field: Field, frame: DataFrame, frames: DataFrame[]) => {\n      return uniqueNames.has(field.name) || uniqueNames.has(getFieldDisplayName(field, frame, frames));\n    };\n\n    if (mode === ByNamesMatcherMode.exclude) {\n      return (field: Field, frame: DataFrame, frames: DataFrame[]) => {\n        return !matcher(field, frame, frames);\n      };\n    }\n    return matcher;\n  },\n\n  getOptionsDisplayText: (options: ByNamesMatcherOptions): string => {\n    const { names, mode } = options;\n    const displayText = (names ?? []).join(', ');\n    if (mode === ByNamesMatcherMode.exclude) {\n      return `All except: ${displayText}`;\n    }\n    return `All of: ${displayText}`;\n  },\n};\n\nconst regexpFieldNameMatcher: FieldMatcherInfo<string> = {\n  id: FieldMatcherID.byRegexp,\n  name: 'Field Name by Regexp',\n  description: 'match the field name by a given regexp pattern',\n  defaultOptions: '/.*/',\n\n  get: (pattern: string): FieldMatcher => {\n    const regexp = patternToRegex(pattern);\n\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      const displayName = getFieldDisplayName(field, frame, allFrames);\n      return !!regexp && regexp.test(displayName);\n    };\n  },\n\n  getOptionsDisplayText: (pattern: string): string => {\n    return `Field name by pattern: ${pattern}`;\n  },\n};\n\n/**\n * Field matcher that will match all fields that exists in a\n * data frame with configured refId.\n * @public\n */\nconst fieldsInFrameMatcher: FieldMatcherInfo<string> = {\n  id: FieldMatcherID.byFrameRefID,\n  name: 'Fields by frame refId',\n  description: 'match all fields returned in data frame with refId.',\n  defaultOptions: '',\n\n  get: (refId: string): FieldMatcher => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return frame.refId === refId;\n    };\n  },\n\n  getOptionsDisplayText: (refId: string): string => {\n    return `Math all fields returned by query with reference ID: ${refId}`;\n  },\n};\n\nconst regexpOrMultipleNamesMatcher: FieldMatcherInfo<RegexpOrNamesMatcherOptions> = {\n  id: FieldMatcherID.byRegexpOrNames,\n  name: 'Field Name by Regexp or Names',\n  description: 'match the field name by a given regexp pattern or given names',\n  defaultOptions: {\n    pattern: '/.*/',\n    names: [],\n  },\n\n  get: (options: RegexpOrNamesMatcherOptions): FieldMatcher => {\n    const regexpMatcher = regexpFieldNameMatcher.get(options?.pattern || '');\n    const namesMatcher = multipleFieldNamesMatcher.get({\n      mode: ByNamesMatcherMode.include,\n      names: options?.names ?? [],\n    });\n\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return namesMatcher(field, frame, allFrames) || regexpMatcher(field, frame, allFrames);\n    };\n  },\n\n  getOptionsDisplayText: (options: RegexpOrNamesMatcherOptions): string => {\n    const pattern = options?.pattern ?? '';\n    const names = options?.names?.join(',') ?? '';\n    return `Field name by pattern: ${pattern} or names: ${names}`;\n  },\n};\n\nconst patternToRegex = (pattern?: string): RegExp | undefined => {\n  if (!pattern) {\n    return undefined;\n  }\n\n  try {\n    return stringToJsRegex(pattern);\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n};\n\n// General Frame matcher\nconst frameNameMatcher: FrameMatcherInfo<string> = {\n  id: FrameMatcherID.byName,\n  name: 'Frame Name',\n  description: 'match the frame name',\n  defaultOptions: '/.*/',\n\n  get: (pattern: string) => {\n    const regex = stringToJsRegex(pattern);\n    return (frame: DataFrame) => {\n      return regex.test(frame.name || '');\n    };\n  },\n\n  getOptionsDisplayText: (pattern: string) => {\n    return `Frame name: ${pattern}`;\n  },\n};\n\n/**\n * Registry Initialization\n */\nexport function getFieldNameMatchers(): FieldMatcherInfo[] {\n  return [\n    fieldNameMatcher,\n    regexpFieldNameMatcher,\n    multipleFieldNamesMatcher,\n    regexpOrMultipleNamesMatcher,\n    fieldsInFrameMatcher,\n  ];\n}\n\nexport function getFrameNameMatchers(): FrameMatcherInfo[] {\n  return [frameNameMatcher];\n}\n"],"names":["ByNamesMatcherMode"],"mappings":"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"}