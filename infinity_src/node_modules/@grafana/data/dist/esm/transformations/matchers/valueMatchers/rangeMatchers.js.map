{"version":3,"file":"rangeMatchers.js","sources":["../../../../../src/transformations/matchers/valueMatchers/rangeMatchers.ts"],"sourcesContent":["import { Field, FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { RangeValueMatcherOptions } from './types';\n\nconst isBetweenValueMatcher: ValueMatcherInfo<RangeValueMatcherOptions<number>> = {\n  id: ValueMatcherID.between,\n  name: 'Is between',\n  description: 'Match when field value is between given option values.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value > options.from && value < options.to;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is between ${options.from} and ${options.to}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ from: 0, to: 100 }),\n};\n\nexport const getRangeValueMatchers = (): ValueMatcherInfo[] => [isBetweenValueMatcher];\n"],"names":[],"mappings":";;;AAMA,MAAM,qBAA4E,GAAA;AAAA,EAChF,IAAI,cAAe,CAAA,OAAA;AAAA,EACnB,IAAM,EAAA,YAAA;AAAA,EACN,WAAa,EAAA,wDAAA;AAAA,EACb,GAAA,EAAK,CAAC,OAAY,KAAA;AAChB,IAAO,OAAA,CAAC,YAAoB,KAAiB,KAAA;AAC3C,MAAA,MAAM,KAAQ,GAAA,KAAA,CAAM,MAAO,CAAA,GAAA,CAAI,UAAU,CAAA,CAAA;AACzC,MAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,KAAQ,GAAA,OAAA,CAAQ,IAAQ,IAAA,KAAA,GAAQ,OAAQ,CAAA,EAAA,CAAA;AAAA,KACjD,CAAA;AAAA,GACF;AAAA,EACA,qBAAA,EAAuB,CAAC,OAAY,KAAA;AAClC,IAAO,OAAA,CAAA,8CAAA,EAAiD,OAAQ,CAAA,IAAA,CAAA,KAAA,EAAY,OAAQ,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,GACtF;AAAA,EACA,YAAc,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,SAAS,SAAU,CAAA,MAAA;AAAA,EAClD,mBAAmB,OAAO,EAAE,IAAM,EAAA,CAAA,EAAG,IAAI,GAAI,EAAA,CAAA;AAC/C,CAAA,CAAA;AAEa,MAAA,qBAAA,GAAwB,MAA0B,CAAC,qBAAqB;;;;"}