{"version":3,"file":"fieldReducer.js","sources":["../../../src/transformations/fieldReducer.ts"],"sourcesContent":["// Libraries\nimport { isNumber } from 'lodash';\n\nimport { NullValueMode, Field, FieldCalcs, FieldType } from '../types/index';\nimport { Registry, RegistryItem } from '../utils/Registry';\n\nexport enum ReducerID {\n  sum = 'sum',\n  max = 'max',\n  min = 'min',\n  logmin = 'logmin',\n  mean = 'mean',\n  variance = 'variance',\n  stdDev = 'stdDev',\n  last = 'last',\n  first = 'first',\n  count = 'count',\n  range = 'range',\n  diff = 'diff',\n  diffperc = 'diffperc',\n  delta = 'delta',\n  step = 'step',\n  firstNotNull = 'firstNotNull',\n  lastNotNull = 'lastNotNull',\n  changeCount = 'changeCount',\n  distinctCount = 'distinctCount',\n  allIsZero = 'allIsZero',\n  allIsNull = 'allIsNull',\n  allValues = 'allValues',\n  uniqueValues = 'uniqueValues',\n}\n\n// Internal function\ntype FieldReducer = (field: Field, ignoreNulls: boolean, nullAsZero: boolean) => FieldCalcs;\n\nexport interface FieldReducerInfo extends RegistryItem {\n  // Internal details\n  emptyInputResult?: any; // typically null, but some things like 'count' & 'sum' should be zero\n  standard: boolean; // The most common stats can all be calculated in a single pass\n  reduce?: FieldReducer;\n}\n\ninterface ReduceFieldOptions {\n  field: Field;\n  reducers: string[]; // The stats to calculate\n}\n\n/**\n * @returns an object with a key for each selected stat\n * NOTE: This will also modify the 'field.state' object,\n * leaving values in a cache until cleared.\n */\nexport function reduceField(options: ReduceFieldOptions): FieldCalcs {\n  const { field, reducers } = options;\n\n  if (!field || !reducers || reducers.length < 1) {\n    return {};\n  }\n\n  if (field.state?.calcs) {\n    // Find the values we need to calculate\n    const missing: string[] = [];\n    for (const s of reducers) {\n      if (!field.state.calcs.hasOwnProperty(s)) {\n        missing.push(s);\n      }\n    }\n    if (missing.length < 1) {\n      return {\n        ...field.state.calcs,\n      };\n    }\n  }\n  if (!field.state) {\n    field.state = {};\n  }\n\n  const queue = fieldReducers.list(reducers);\n\n  // Return early for empty series\n  // This lets the concrete implementations assume at least one row\n  const data = field.values;\n  if (data.length < 1) {\n    const calcs: FieldCalcs = { ...field.state.calcs };\n    for (const reducer of queue) {\n      calcs[reducer.id] = reducer.emptyInputResult !== null ? reducer.emptyInputResult : null;\n    }\n    return (field.state.calcs = calcs);\n  }\n\n  const { nullValueMode } = field.config;\n  const ignoreNulls = nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = nullValueMode === NullValueMode.AsZero;\n\n  // Avoid calculating all the standard stats if possible\n  if (queue.length === 1 && queue[0].reduce) {\n    const values = queue[0].reduce(field, ignoreNulls, nullAsZero);\n    field.state.calcs = {\n      ...field.state.calcs,\n      ...values,\n    };\n    return values;\n  }\n\n  // For now everything can use the standard stats\n  let values = doStandardCalcs(field, ignoreNulls, nullAsZero);\n\n  for (const reducer of queue) {\n    if (!values.hasOwnProperty(reducer.id) && reducer.reduce) {\n      values = {\n        ...values,\n        ...reducer.reduce(field, ignoreNulls, nullAsZero),\n      };\n    }\n  }\n\n  field.state.calcs = {\n    ...field.state.calcs,\n    ...values,\n  };\n  return values;\n}\n\n// ------------------------------------------------------------------------------\n//\n//  No Exported symbols below here.\n//\n// ------------------------------------------------------------------------------\n\nexport const fieldReducers = new Registry<FieldReducerInfo>(() => [\n  {\n    id: ReducerID.lastNotNull,\n    name: 'Last *',\n    description: 'Last non-null value',\n    standard: true,\n    aliasIds: ['current'],\n    reduce: calculateLastNotNull,\n  },\n  {\n    id: ReducerID.last,\n    name: 'Last',\n    description: 'Last value',\n    standard: true,\n    reduce: calculateLast,\n  },\n  {\n    id: ReducerID.firstNotNull,\n    name: 'First *',\n    description: 'First non-null value',\n    standard: true,\n    reduce: calculateFirstNotNull,\n  },\n  { id: ReducerID.first, name: 'First', description: 'First Value', standard: true, reduce: calculateFirst },\n  { id: ReducerID.min, name: 'Min', description: 'Minimum Value', standard: true },\n  { id: ReducerID.max, name: 'Max', description: 'Maximum Value', standard: true },\n  { id: ReducerID.mean, name: 'Mean', description: 'Average Value', standard: true, aliasIds: ['avg'] },\n  {\n    id: ReducerID.variance,\n    name: 'Variance',\n    description: 'Variance of all values in a field',\n    standard: false,\n    reduce: calculateStdDev,\n  },\n  {\n    id: ReducerID.stdDev,\n    name: 'StdDev',\n    description: 'Standard deviation of all values in a field',\n    standard: false,\n    reduce: calculateStdDev,\n  },\n  {\n    id: ReducerID.sum,\n    name: 'Total',\n    description: 'The sum of all values',\n    emptyInputResult: 0,\n    standard: true,\n    aliasIds: ['total'],\n  },\n  {\n    id: ReducerID.count,\n    name: 'Count',\n    description: 'Number of values in response',\n    emptyInputResult: 0,\n    standard: true,\n  },\n  {\n    id: ReducerID.range,\n    name: 'Range',\n    description: 'Difference between minimum and maximum values',\n    standard: true,\n  },\n  {\n    id: ReducerID.delta,\n    name: 'Delta',\n    description: 'Cumulative change in value',\n    standard: true,\n  },\n  {\n    id: ReducerID.step,\n    name: 'Step',\n    description: 'Minimum interval between values',\n    standard: true,\n  },\n  {\n    id: ReducerID.diff,\n    name: 'Difference',\n    description: 'Difference between first and last values',\n    standard: true,\n  },\n  {\n    id: ReducerID.logmin,\n    name: 'Min (above zero)',\n    description: 'Used for log min scale',\n    standard: true,\n  },\n  {\n    id: ReducerID.allIsZero,\n    name: 'All Zeros',\n    description: 'All values are zero',\n    emptyInputResult: false,\n    standard: true,\n  },\n  {\n    id: ReducerID.allIsNull,\n    name: 'All Nulls',\n    description: 'All values are null',\n    emptyInputResult: true,\n    standard: true,\n  },\n  {\n    id: ReducerID.changeCount,\n    name: 'Change Count',\n    description: 'Number of times the value changes',\n    standard: false,\n    reduce: calculateChangeCount,\n  },\n  {\n    id: ReducerID.distinctCount,\n    name: 'Distinct Count',\n    description: 'Number of distinct values',\n    standard: false,\n    reduce: calculateDistinctCount,\n  },\n  {\n    id: ReducerID.diffperc,\n    name: 'Difference percent',\n    description: 'Percentage difference between first and last values',\n    standard: true,\n  },\n  {\n    id: ReducerID.allValues,\n    name: 'All values',\n    description: 'Returns an array with all values',\n    standard: false,\n    reduce: (field: Field) => ({ allValues: field.values.toArray() }),\n  },\n  {\n    id: ReducerID.uniqueValues,\n    name: 'All unique values',\n    description: 'Returns an array with all unique values',\n    standard: false,\n    reduce: (field: Field) => ({\n      uniqueValues: [...new Set(field.values.toArray())],\n    }),\n  },\n]);\n\nexport function doStandardCalcs(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const calcs: FieldCalcs = {\n    sum: 0,\n    max: -Number.MAX_VALUE,\n    min: Number.MAX_VALUE,\n    logmin: Number.MAX_VALUE,\n    mean: null,\n    last: null,\n    first: null,\n    lastNotNull: null,\n    firstNotNull: null,\n    count: 0,\n    nonNullCount: 0,\n    allIsNull: true,\n    allIsZero: true,\n    range: null,\n    diff: null,\n    delta: 0,\n    step: Number.MAX_VALUE,\n    diffperc: 0,\n\n    // Just used for calculations -- not exposed as a stat\n    previousDeltaUp: true,\n  };\n\n  const data = field.values;\n  calcs.count = ignoreNulls ? data.length : data.toArray().filter((val) => val != null).length;\n\n  const isNumberField = field.type === FieldType.number || FieldType.time;\n\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data.get(i);\n\n    if (i === 0) {\n      calcs.first = currentValue;\n    }\n\n    calcs.last = currentValue;\n\n    if (currentValue === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n\n    if (currentValue != null) {\n      // null || undefined\n      const isFirst = calcs.firstNotNull === null;\n      if (isFirst) {\n        calcs.firstNotNull = currentValue;\n      }\n\n      if (isNumberField) {\n        calcs.sum += currentValue;\n        calcs.allIsNull = false;\n        calcs.nonNullCount++;\n\n        if (!isFirst) {\n          const step = currentValue - calcs.lastNotNull!;\n          if (calcs.step > step) {\n            calcs.step = step; // the minimum interval\n          }\n\n          if (calcs.lastNotNull! > currentValue) {\n            // counter reset\n            calcs.previousDeltaUp = false;\n            if (i === data.length - 1) {\n              // reset on last\n              calcs.delta += currentValue;\n            }\n          } else {\n            if (calcs.previousDeltaUp) {\n              calcs.delta += step; // normal increment\n            } else {\n              calcs.delta += currentValue; // account for counter reset\n            }\n            calcs.previousDeltaUp = true;\n          }\n        }\n\n        if (currentValue > calcs.max) {\n          calcs.max = currentValue;\n        }\n\n        if (currentValue < calcs.min) {\n          calcs.min = currentValue;\n        }\n\n        if (currentValue < calcs.logmin && currentValue > 0) {\n          calcs.logmin = currentValue;\n        }\n      }\n\n      if (currentValue !== 0) {\n        calcs.allIsZero = false;\n      }\n\n      calcs.lastNotNull = currentValue;\n    }\n  }\n\n  if (calcs.max === -Number.MAX_VALUE) {\n    calcs.max = null;\n  }\n\n  if (calcs.min === Number.MAX_VALUE) {\n    calcs.min = null;\n  }\n\n  if (calcs.step === Number.MAX_VALUE) {\n    calcs.step = null;\n  }\n\n  if (calcs.nonNullCount > 0) {\n    calcs.mean = calcs.sum! / calcs.nonNullCount;\n  }\n\n  if (calcs.allIsNull) {\n    calcs.allIsZero = false;\n  }\n\n  if (calcs.max !== null && calcs.min !== null) {\n    calcs.range = calcs.max - calcs.min;\n  }\n\n  if (isNumber(calcs.firstNotNull) && isNumber(calcs.lastNotNull)) {\n    calcs.diff = calcs.lastNotNull - calcs.firstNotNull;\n  }\n\n  if (isNumber(calcs.firstNotNull) && isNumber(calcs.diff)) {\n    calcs.diffperc = calcs.diff / calcs.firstNotNull;\n  }\n  return calcs;\n}\n\nfunction calculateFirst(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  return { first: field.values.get(0) };\n}\n\nfunction calculateFirstNotNull(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  for (let idx = 0; idx < data.length; idx++) {\n    const v = data.get(idx);\n    if (v != null && v !== undefined) {\n      return { firstNotNull: v };\n    }\n  }\n  return { firstNotNull: null };\n}\n\nfunction calculateLast(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  return { last: data.get(data.length - 1) };\n}\n\nfunction calculateLastNotNull(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  let idx = data.length - 1;\n  while (idx >= 0) {\n    const v = data.get(idx--);\n    if (v != null && v !== undefined) {\n      return { lastNotNull: v };\n    }\n  }\n  return { lastNotNull: null };\n}\n\n/** Calculates standard deviation and variance */\nfunction calculateStdDev(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  // Only support number fields\n  if (!(field.type === FieldType.number || field.type === FieldType.time)) {\n    return { variance: 0, stdDev: 0 };\n  }\n\n  let squareSum = 0;\n  let runningMean = 0;\n  let runningNonNullCount = 0;\n  const data = field.values;\n  for (let i = 0; i < data.length; i++) {\n    const currentValue = data.get(i);\n    if (currentValue != null) {\n      runningNonNullCount++;\n      let _oldMean = runningMean;\n      runningMean += (currentValue - _oldMean) / runningNonNullCount;\n      squareSum += (currentValue - _oldMean) * (currentValue - runningMean);\n    }\n  }\n  if (runningNonNullCount > 0) {\n    const variance = squareSum / runningNonNullCount;\n    return { variance, stdDev: Math.sqrt(variance) };\n  }\n  return { variance: 0, stdDev: 0 };\n}\n\nfunction calculateChangeCount(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  let count = 0;\n  let first = true;\n  let last = null;\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data.get(i);\n    if (currentValue === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n    if (!first && last !== currentValue) {\n      count++;\n    }\n    first = false;\n    last = currentValue;\n  }\n\n  return { changeCount: count };\n}\n\nfunction calculateDistinctCount(field: Field, ignoreNulls: boolean, nullAsZero: boolean): FieldCalcs {\n  const data = field.values;\n  const distinct = new Set();\n  for (let i = 0; i < data.length; i++) {\n    let currentValue = data.get(i);\n    if (currentValue === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        currentValue = 0;\n      }\n    }\n    distinct.add(currentValue);\n  }\n  return { distinctCount: distinct.size };\n}\n"],"names":["ReducerID","values"],"mappings":"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"}