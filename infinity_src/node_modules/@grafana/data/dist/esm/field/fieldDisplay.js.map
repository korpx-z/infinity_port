{"version":3,"file":"fieldDisplay.js","sources":["../../../src/field/fieldDisplay.ts"],"sourcesContent":["import { toString, isEmpty } from 'lodash';\n\nimport { DataFrameView } from '../dataframe/DataFrameView';\nimport { getTimeField } from '../dataframe/processDataFrame';\nimport { GrafanaTheme2 } from '../themes';\nimport { getFieldMatcher } from '../transformations';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { FieldMatcherID } from '../transformations/matchers/ids';\nimport {\n  DataFrame,\n  DisplayValue,\n  DisplayValueAlignmentFactors,\n  Field,\n  FieldConfig,\n  FieldConfigSource,\n  FieldType,\n  InterpolateFunction,\n  LinkModel,\n  TimeRange,\n  TimeZone,\n} from '../types';\nimport { ScopedVars } from '../types/ScopedVars';\n\nimport { getDisplayProcessor } from './displayProcessor';\nimport { getFieldDisplayName } from './fieldState';\n\n/**\n * Options for how to turn DataFrames into an array of display values\n */\nexport interface ReduceDataOptions {\n  /* If true show each row value */\n  values?: boolean;\n  /** if showing all values limit */\n  limit?: number;\n  /** When !values, pick one value for the whole field */\n  calcs: string[];\n  /** Which fields to show.  By default this is only numeric fields */\n  fields?: string;\n}\n\n// TODO: use built in variables, same as for data links?\nexport const VAR_SERIES_NAME = '__series.name';\nexport const VAR_FIELD_NAME = '__field.displayName'; // Includes the rendered tags and naming strategy\nexport const VAR_FIELD_LABELS = '__field.labels';\nexport const VAR_CALC = '__calc';\nexport const VAR_CELL_PREFIX = '__cell_'; // consistent with existing table templates\n\nexport interface FieldSparkline {\n  y: Field; // Y values\n  x?: Field; // if this does not exist, use the index\n  timeRange?: TimeRange; // Optionally force an absolute time\n  highlightIndex?: number;\n}\n\nexport interface FieldDisplay {\n  name: string; // The field name (title is in display)\n  field: FieldConfig;\n  display: DisplayValue;\n  sparkline?: FieldSparkline;\n\n  // Expose to the original values for delayed inspection (DataLinks etc)\n  view?: DataFrameView;\n  colIndex?: number; // The field column index\n  rowIndex?: number; // only filled in when the value is from a row (ie, not a reduction)\n  getLinks?: () => LinkModel[];\n  hasLinks: boolean;\n}\n\nexport interface GetFieldDisplayValuesOptions {\n  data?: DataFrame[];\n  reduceOptions: ReduceDataOptions;\n  fieldConfig: FieldConfigSource;\n  replaceVariables: InterpolateFunction;\n  sparkline?: boolean; // Calculate the sparkline\n  theme: GrafanaTheme2;\n  timeZone?: TimeZone;\n}\n\nexport const DEFAULT_FIELD_DISPLAY_VALUES_LIMIT = 25;\n\nexport const getFieldDisplayValues = (options: GetFieldDisplayValuesOptions): FieldDisplay[] => {\n  const { replaceVariables, reduceOptions, timeZone, theme } = options;\n  const calcs = reduceOptions.calcs.length ? reduceOptions.calcs : [ReducerID.last];\n\n  const values: FieldDisplay[] = [];\n  const fieldMatcher = getFieldMatcher(\n    reduceOptions.fields\n      ? {\n          id: FieldMatcherID.byRegexp,\n          options: reduceOptions.fields,\n        }\n      : {\n          id: FieldMatcherID.numeric,\n        }\n  );\n\n  const data = options.data ?? [];\n  const limit = reduceOptions.limit ? reduceOptions.limit : DEFAULT_FIELD_DISPLAY_VALUES_LIMIT;\n  const scopedVars: ScopedVars = {};\n\n  let hitLimit = false;\n\n  for (let s = 0; s < data.length && !hitLimit; s++) {\n    const dataFrame = data[s]; // Name is already set\n\n    const { timeField } = getTimeField(dataFrame);\n    const view = new DataFrameView(dataFrame);\n\n    for (let i = 0; i < dataFrame.fields.length && !hitLimit; i++) {\n      const field = dataFrame.fields[i];\n      const fieldLinksSupplier = field.getLinks;\n\n      // To filter out time field, need an option for this\n      if (!fieldMatcher(field, dataFrame, data)) {\n        continue;\n      }\n\n      let config = field.config; // already set by the prepare task\n\n      if (field.state?.range) {\n        // Us the global min/max values\n        config = {\n          ...config,\n          ...field.state?.range,\n        };\n      }\n\n      const displayName = field.config.displayName ?? '';\n\n      const display =\n        field.display ??\n        getDisplayProcessor({\n          field,\n          theme: options.theme,\n          timeZone,\n        });\n\n      // Show all rows\n      if (reduceOptions.values) {\n        const usesCellValues = displayName.indexOf(VAR_CELL_PREFIX) >= 0;\n\n        for (let j = 0; j < field.values.length; j++) {\n          // Add all the row variables\n          if (usesCellValues) {\n            for (let k = 0; k < dataFrame.fields.length; k++) {\n              const f = dataFrame.fields[k];\n              const v = f.values.get(j);\n              scopedVars[VAR_CELL_PREFIX + k] = {\n                value: v,\n                text: toString(v),\n              };\n            }\n          }\n\n          field.state = setIndexForPaletteColor(field, values.length);\n\n          const displayValue = display(field.values.get(j));\n          const rowName = getSmartDisplayNameForRow(dataFrame, field, j, replaceVariables, scopedVars);\n          const overrideColor = lookupRowColorFromOverride(rowName, options.fieldConfig, theme);\n\n          values.push({\n            name: '',\n            field: config,\n            display: {\n              ...displayValue,\n              title: rowName,\n              color: overrideColor ?? displayValue.color,\n            },\n            view,\n            colIndex: i,\n            rowIndex: j,\n            getLinks: fieldLinksSupplier\n              ? () =>\n                  fieldLinksSupplier({\n                    valueRowIndex: j,\n                  })\n              : () => [],\n            hasLinks: hasLinks(field),\n          });\n\n          if (values.length >= limit) {\n            hitLimit = true;\n            break;\n          }\n        }\n      } else {\n        const results = reduceField({\n          field,\n          reducers: calcs, // The stats to calculate\n        });\n\n        for (const calc of calcs) {\n          scopedVars[VAR_CALC] = { value: calc, text: calc };\n          const displayValue = display(results[calc]);\n\n          if (displayName !== '') {\n            displayValue.title = replaceVariables(displayName, {\n              ...field.state?.scopedVars, // series and field scoped vars\n              ...scopedVars,\n            });\n          } else {\n            displayValue.title = getFieldDisplayName(field, dataFrame, data);\n          }\n\n          let sparkline: FieldSparkline | undefined = undefined;\n          if (options.sparkline) {\n            sparkline = {\n              y: dataFrame.fields[i],\n              x: timeField,\n            };\n            if (calc === ReducerID.last) {\n              sparkline.highlightIndex = sparkline.y.values.length - 1;\n            } else if (calc === ReducerID.first) {\n              sparkline.highlightIndex = 0;\n            }\n          }\n\n          values.push({\n            name: calc,\n            field: config,\n            display: displayValue,\n            sparkline,\n            view,\n            colIndex: i,\n            getLinks: fieldLinksSupplier\n              ? () =>\n                  fieldLinksSupplier({\n                    calculatedValue: displayValue,\n                  })\n              : () => [],\n            hasLinks: hasLinks(field),\n          });\n        }\n      }\n    }\n  }\n\n  if (values.length === 0) {\n    values.push(createNoValuesFieldDisplay(options));\n  }\n\n  return values;\n};\n\nfunction getSmartDisplayNameForRow(\n  frame: DataFrame,\n  field: Field,\n  rowIndex: number,\n  replaceVariables: InterpolateFunction,\n  scopedVars: ScopedVars\n): string {\n  let parts: string[] = [];\n  let otherNumericFields = 0;\n\n  if (field.config.displayName) {\n    return replaceVariables(field.config.displayName, {\n      ...field.state?.scopedVars, // series and field scoped vars\n      ...scopedVars,\n    });\n  }\n\n  for (const otherField of frame.fields) {\n    if (otherField === field) {\n      continue;\n    }\n\n    if (otherField.type === FieldType.string) {\n      const value = otherField.values.get(rowIndex) ?? '';\n      const mappedValue = otherField.display ? otherField.display(value).text : value;\n      if (mappedValue.length > 0) {\n        parts.push(mappedValue);\n      }\n    } else if (otherField.type === FieldType.number) {\n      otherNumericFields++;\n    }\n  }\n\n  if (otherNumericFields || parts.length === 0) {\n    parts.push(getFieldDisplayName(field, frame));\n  }\n\n  return parts.join(' ');\n}\n\n/**\n * Palette color modes use series index (field index) which does not work for when displaing rows\n * So updating seriesIndex here makes the palette color modes work in \"All values\" mode\n */\nfunction setIndexForPaletteColor(field: Field, currentLength: number) {\n  return {\n    ...field.state,\n    seriesIndex: currentLength,\n  };\n}\n\n/**\n * This function makes overrides that set color work for row values\n */\nfunction lookupRowColorFromOverride(displayName: string, fieldConfig: FieldConfigSource, theme: GrafanaTheme2) {\n  for (const override of fieldConfig.overrides) {\n    if (override.matcher.id === 'byName' && override.matcher.options === displayName) {\n      for (const prop of override.properties) {\n        if (prop.id === 'color' && prop.value) {\n          return theme.visualization.getColorByName(prop.value.fixedColor);\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function hasLinks(field: Field): boolean {\n  return field.config?.links?.length ? field.config.links.length > 0 : false;\n}\n\nexport function getDisplayValueAlignmentFactors(values: FieldDisplay[]): DisplayValueAlignmentFactors {\n  let maxTitle = '';\n  let maxText = '';\n  let maxPrefix = '';\n  let maxSuffix = '';\n\n  for (let i = 0; i < values.length; i++) {\n    const v = values[i].display;\n\n    if (v.text && v.text.length > maxText.length) {\n      maxText = v.text;\n    }\n\n    if (v.title && v.title.length > maxTitle.length) {\n      maxTitle = v.title;\n    }\n\n    if (v.prefix && v.prefix.length > maxPrefix.length) {\n      maxPrefix = v.prefix;\n    }\n\n    if (v.suffix && v.suffix.length > maxSuffix.length) {\n      maxSuffix = v.suffix;\n    }\n  }\n\n  return { text: maxText, title: maxTitle, suffix: maxSuffix, prefix: maxPrefix };\n}\n\nfunction createNoValuesFieldDisplay(options: GetFieldDisplayValuesOptions): FieldDisplay {\n  const displayName = 'No data';\n  const { fieldConfig, timeZone } = options;\n  const { defaults } = fieldConfig;\n\n  const displayProcessor = getDisplayProcessor({\n    field: {\n      type: FieldType.other,\n      config: defaults,\n    },\n    theme: options.theme,\n    timeZone,\n  });\n\n  const display = displayProcessor(null);\n  const text = getDisplayText(display, displayName);\n\n  return {\n    name: displayName,\n    field: {\n      ...defaults,\n      max: defaults.max ?? 0,\n      min: defaults.min ?? 0,\n    },\n    display: {\n      text,\n      numeric: 0,\n      color: display.color,\n    },\n    hasLinks: false,\n  };\n}\n\nfunction getDisplayText(display: DisplayValue, fallback: string): string {\n  if (!display || isEmpty(display.text)) {\n    return fallback;\n  }\n  return display.text;\n}\n"],"names":[],"mappings":"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"}