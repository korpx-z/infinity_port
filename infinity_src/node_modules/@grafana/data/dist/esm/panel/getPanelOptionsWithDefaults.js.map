{"version":3,"file":"getPanelOptionsWithDefaults.js","sources":["../../../src/panel/getPanelOptionsWithDefaults.ts"],"sourcesContent":["import { mergeWith, isArray, isObject, unset, isEqual } from 'lodash';\n\nimport { FieldConfigOptionsRegistry } from '../field/FieldConfigOptionsRegistry';\nimport { fieldColorModeRegistry } from '../field/fieldColor';\nimport { FieldColorConfigSettings } from '../field/overrides/processors';\nimport { FieldColorModeId } from '../types/fieldColor';\nimport {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldConfigProperty,\n  FieldConfigSource,\n} from '../types/fieldOverrides';\nimport { ThresholdsConfig, ThresholdsMode } from '../types/thresholds';\n\nimport { PanelPlugin } from './PanelPlugin';\n\nexport interface Props {\n  plugin: PanelPlugin;\n  currentFieldConfig: FieldConfigSource;\n  currentOptions: Record<string, any>;\n  isAfterPluginChange: boolean;\n}\n\nexport interface OptionDefaults {\n  options: any;\n  fieldConfig: FieldConfigSource;\n}\n\n/**\n * This will return the panel options with defaults applied.\n * Used internally, not intended for external use.\n * @internal\n */\nexport function getPanelOptionsWithDefaults({\n  plugin,\n  currentOptions,\n  currentFieldConfig,\n  isAfterPluginChange,\n}: Props): OptionDefaults {\n  const optionsWithDefaults = mergeWith(\n    {},\n    plugin.defaults,\n    currentOptions || {},\n    (objValue: any, srcValue: any): any => {\n      if (isArray(srcValue)) {\n        return srcValue;\n      }\n    }\n  );\n\n  const fieldConfigWithDefaults = applyFieldConfigDefaults(currentFieldConfig, plugin);\n  const fieldConfigWithOptimalColorMode = adaptFieldColorMode(plugin, fieldConfigWithDefaults, isAfterPluginChange);\n\n  return { options: optionsWithDefaults, fieldConfig: fieldConfigWithOptimalColorMode };\n}\n\nfunction applyFieldConfigDefaults(existingFieldConfig: FieldConfigSource, plugin: PanelPlugin): FieldConfigSource {\n  const pluginDefaults = plugin.fieldConfigDefaults;\n\n  const result: FieldConfigSource = {\n    defaults: mergeWith(\n      {},\n      pluginDefaults.defaults,\n      existingFieldConfig ? existingFieldConfig.defaults : {},\n      (objValue: any, srcValue: any): any => {\n        if (isArray(srcValue)) {\n          return srcValue;\n        }\n      }\n    ),\n    overrides: existingFieldConfig?.overrides ?? [],\n  };\n\n  cleanProperties(result.defaults, '', plugin.fieldConfigRegistry);\n\n  // Thresholds base values are null in JSON but need to be converted to -Infinity\n  if (result.defaults.thresholds) {\n    fixThresholds(result.defaults.thresholds);\n  }\n\n  // Filter out overrides for properties that cannot be found in registry\n  result.overrides = filterFieldConfigOverrides(result.overrides, (prop) => {\n    return plugin.fieldConfigRegistry.getIfExists(prop.id) !== undefined;\n  });\n\n  for (const override of result.overrides) {\n    for (const property of override.properties) {\n      if (property.id === 'thresholds') {\n        fixThresholds(property.value as ThresholdsConfig);\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Used internally, not intended for external use.\n * @internal\n */\nexport function filterFieldConfigOverrides(\n  overrides: ConfigOverrideRule[],\n  condition: (value: DynamicConfigValue) => boolean\n): ConfigOverrideRule[] {\n  return overrides\n    .map((x) => {\n      const properties = x.properties.filter(condition);\n\n      return {\n        ...x,\n        properties,\n      };\n    })\n    .filter((x) => x.properties.length > 0);\n}\n\nfunction cleanProperties(obj: any, parentPath: string, fieldConfigRegistry: FieldConfigOptionsRegistry) {\n  let found = false;\n\n  for (const propName of Object.keys(obj)) {\n    const value = obj[propName];\n    const fullPath = `${parentPath}${propName}`;\n    const existsInRegistry = !!fieldConfigRegistry.getIfExists(fullPath);\n\n    // need to check early here as some standard properties have nested properies\n    if (existsInRegistry) {\n      found = true;\n      continue;\n    }\n\n    if (isArray(value) || !isObject(value)) {\n      if (!existsInRegistry) {\n        unset(obj, propName);\n      }\n    } else {\n      const childPropFound = cleanProperties(value, `${fullPath}.`, fieldConfigRegistry);\n      // If no child props found unset the main object\n      if (!childPropFound) {\n        unset(obj, propName);\n      }\n    }\n  }\n\n  return found;\n}\n\nfunction adaptFieldColorMode(\n  plugin: PanelPlugin,\n  fieldConfig: FieldConfigSource,\n  isAfterPluginChange: boolean\n): FieldConfigSource {\n  if (!isAfterPluginChange) {\n    return fieldConfig;\n  }\n\n  // adjust to prefered field color setting if needed\n  const color = plugin.fieldConfigRegistry.getIfExists(FieldConfigProperty.Color);\n\n  if (color && color.settings) {\n    const colorSettings = color.settings as FieldColorConfigSettings;\n    const mode = fieldColorModeRegistry.getIfExists(fieldConfig.defaults.color?.mode);\n\n    // When no support fo value colors, use classic palette\n    if (!colorSettings.byValueSupport) {\n      if (!mode || mode.isByValue) {\n        fieldConfig.defaults.color = { mode: FieldColorModeId.PaletteClassic };\n        return fieldConfig;\n      }\n    }\n\n    // When supporting value colors and prefering thresholds, use Thresholds mode.\n    // Otherwise keep current mode\n    if (colorSettings.byValueSupport && colorSettings.preferThresholdsMode && mode?.id !== FieldColorModeId.Fixed) {\n      if (!mode || !mode.isByValue) {\n        fieldConfig.defaults.color = { mode: FieldColorModeId.Thresholds };\n        return fieldConfig;\n      }\n    }\n\n    // If panel support bySeries then we should default to that when switching to this panel as that is most likely\n    // what users will expect. Example scenario a user who has a graph panel (time series) and switches to Gauge and\n    // then back to time series we want the graph panel color mode to reset to classic palette and not preserve the\n    // Gauge prefered thresholds mode.\n    if (colorSettings.bySeriesSupport && mode?.isByValue) {\n      fieldConfig.defaults.color = { mode: FieldColorModeId.PaletteClassic };\n      return fieldConfig;\n    }\n  }\n  return fieldConfig;\n}\n\nfunction fixThresholds(thresholds: ThresholdsConfig) {\n  if (!thresholds.mode) {\n    thresholds.mode = ThresholdsMode.Absolute;\n  }\n\n  if (!thresholds.steps) {\n    thresholds.steps = [];\n  } else if (thresholds.steps.length) {\n    // First value is always -Infinity\n    // JSON saves it as null\n    thresholds.steps[0].value = -Infinity;\n  }\n}\n\n/**\n * Used internally, not intended for external use.\n * @internal\n */\nexport function restoreCustomOverrideRules(current: FieldConfigSource, old: FieldConfigSource): FieldConfigSource {\n  const result = {\n    defaults: {\n      ...current.defaults,\n      custom: old.defaults.custom,\n    },\n    overrides: [...current.overrides],\n  };\n\n  for (const override of old.overrides) {\n    for (const prop of override.properties) {\n      if (isCustomFieldProp(prop)) {\n        const currentOverride = result.overrides.find((o) => isEqual(o.matcher, override.matcher));\n        if (currentOverride) {\n          if (currentOverride !== override) {\n            currentOverride.properties.push(prop);\n          }\n        } else {\n          result.overrides.push(override);\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Used internally, not intended for external use.\n * @internal\n */\nexport function isCustomFieldProp(prop: DynamicConfigValue): boolean {\n  return prop.id.startsWith('custom.');\n}\n\n/**\n * Used internally, not intended for external use.\n * @internal\n */\nexport function isStandardFieldProp(prop: DynamicConfigValue): boolean {\n  return !isCustomFieldProp(prop);\n}\n"],"names":[],"mappings":"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"}