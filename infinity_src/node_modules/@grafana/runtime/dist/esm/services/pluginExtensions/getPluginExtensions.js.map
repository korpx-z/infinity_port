{"version":3,"file":"getPluginExtensions.js","sources":["../../../../src/services/pluginExtensions/getPluginExtensions.ts"],"sourcesContent":["import { PluginExtension } from '@grafana/data';\n\nexport type GetPluginExtensions = ({\n  extensionPointId,\n  context,\n}: {\n  extensionPointId: string;\n  context?: object | Record<string | symbol, unknown>;\n}) => {\n  extensions: PluginExtension[];\n};\n\nlet singleton: GetPluginExtensions | undefined;\n\nexport function setPluginExtensionGetter(instance: GetPluginExtensions): void {\n  // We allow overriding the registry in tests\n  if (singleton && process.env.NODE_ENV !== 'test') {\n    throw new Error('setPluginExtensionGetter() function should only be called once, when Grafana is starting.');\n  }\n  singleton = instance;\n}\n\nfunction getPluginExtensionGetter(): GetPluginExtensions {\n  if (!singleton) {\n    throw new Error('getPluginExtensionGetter() can only be used after the Grafana instance has started.');\n  }\n  return singleton;\n}\n\nexport const getPluginExtensions: GetPluginExtensions = (options) => getPluginExtensionGetter()(options);\n"],"names":[],"mappings":"AAYA,IAAI,SAAA,CAAA;AAEG,SAAS,yBAAyB,QAAqC,EAAA;AAE5E,EAAA,IAAI,SAAa,IAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,MAAQ,EAAA;AAChD,IAAM,MAAA,IAAI,MAAM,2FAA2F,CAAA,CAAA;AAAA,GAC7G;AACA,EAAY,SAAA,GAAA,QAAA,CAAA;AACd,CAAA;AAEA,SAAS,wBAAgD,GAAA;AACvD,EAAA,IAAI,CAAC,SAAW,EAAA;AACd,IAAM,MAAA,IAAI,MAAM,qFAAqF,CAAA,CAAA;AAAA,GACvG;AACA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAEO,MAAM,mBAA2C,GAAA,CAAC,OAAY,KAAA,wBAAA,GAA2B,OAAO;;;;"}