{"version":3,"file":"logging.js","sources":["../../../src/utils/logging.ts"],"sourcesContent":["import { captureMessage, captureException, Severity as LogLevel } from '@sentry/browser';\n\nimport { faro, LogLevel as GrafanaLogLevel } from '@grafana/faro-web-sdk';\n\nimport { config } from '../config';\n\nexport { LogLevel };\n\n// a bit stricter than what Sentry allows\ntype Contexts = Record<string, Record<string, number | string | Record<string, string | number>>>;\n\n/**\n * Log a message at INFO level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logInfo(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.INFO,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Info,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log a message at WARNING level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logWarning(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.WARN,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Warning,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log a message at DEBUG level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logDebug(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.DEBUG,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Debug,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log an error. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logError(err: Error, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushError(err);\n  }\n  if (config.sentry.enabled) {\n    captureException(err, { contexts });\n  }\n}\n"],"names":["GrafanaLogLevel","LogLevel"],"mappings":";;;;;AAgBgB,SAAA,OAAA,CAAQ,SAAiB,QAAqB,EAAA;AAC5D,EAAI,IAAA,MAAA,CAAO,uBAAuB,OAAS,EAAA;AACzC,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,CAAC,OAAO,CAAG,EAAA;AAAA,MAC1B,OAAOA,QAAgB,CAAA,IAAA;AAAA,MACvB,OAAS,EAAA,QAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AACA,EAAI,IAAA,MAAA,CAAO,OAAO,OAAS,EAAA;AACzB,IAAA,cAAA,CAAe,OAAS,EAAA;AAAA,MACtB,OAAOC,QAAS,CAAA,IAAA;AAAA,MAChB,QAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAOgB,SAAA,UAAA,CAAW,SAAiB,QAAqB,EAAA;AAC/D,EAAI,IAAA,MAAA,CAAO,uBAAuB,OAAS,EAAA;AACzC,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,CAAC,OAAO,CAAG,EAAA;AAAA,MAC1B,OAAOD,QAAgB,CAAA,IAAA;AAAA,MACvB,OAAS,EAAA,QAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AACA,EAAI,IAAA,MAAA,CAAO,OAAO,OAAS,EAAA;AACzB,IAAA,cAAA,CAAe,OAAS,EAAA;AAAA,MACtB,OAAOC,QAAS,CAAA,OAAA;AAAA,MAChB,QAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAOgB,SAAA,QAAA,CAAS,SAAiB,QAAqB,EAAA;AAC7D,EAAI,IAAA,MAAA,CAAO,uBAAuB,OAAS,EAAA;AACzC,IAAA,IAAA,CAAK,GAAI,CAAA,OAAA,CAAQ,CAAC,OAAO,CAAG,EAAA;AAAA,MAC1B,OAAOD,QAAgB,CAAA,KAAA;AAAA,MACvB,OAAS,EAAA,QAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AACA,EAAI,IAAA,MAAA,CAAO,OAAO,OAAS,EAAA;AACzB,IAAA,cAAA,CAAe,OAAS,EAAA;AAAA,MACtB,OAAOC,QAAS,CAAA,KAAA;AAAA,MAChB,QAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAOgB,SAAA,QAAA,CAAS,KAAY,QAAqB,EAAA;AACxD,EAAI,IAAA,MAAA,CAAO,uBAAuB,OAAS,EAAA;AACzC,IAAK,IAAA,CAAA,GAAA,CAAI,UAAU,GAAG,CAAA,CAAA;AAAA,GACxB;AACA,EAAI,IAAA,MAAA,CAAO,OAAO,OAAS,EAAA;AACzB,IAAiB,gBAAA,CAAA,GAAA,EAAK,EAAE,QAAA,EAAU,CAAA,CAAA;AAAA,GACpC;AACF;;;;"}