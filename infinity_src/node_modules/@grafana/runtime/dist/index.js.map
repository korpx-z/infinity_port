{"version":3,"file":"index.js","sources":["../src/services/backendSrv.ts","../src/services/AngularLoader.ts","../src/services/dataSourceSrv.ts","../src/services/LocationSrv.ts","../src/services/EchoSrv.ts","../src/services/templateSrv.ts","../src/services/legacyAngularInjector.ts","../src/services/live.ts","../src/config.ts","../src/services/LocationService.ts","../src/services/appEvents.ts","../src/services/pluginExtensions/getPluginExtensions.ts","../src/services/pluginExtensions/utils.ts","../src/analytics/types.ts","../src/utils/plugin.ts","../src/analytics/utils.ts","../src/utils/licensing.ts","../src/utils/logging.ts","../src/utils/toDataQueryError.ts","../src/utils/queryResponse.ts","../src/utils/DataSourceWithBackend.ts","../src/components/PanelRenderer.tsx","../src/components/PanelDataErrorView.tsx","../src/services/QueryRunner.ts","../src/components/PluginPage.tsx","../src/components/DataSourcePicker.tsx","../src/analytics/plugins/eventProperties.ts","../src/analytics/plugins/usePluginInteractionReporter.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n\n/**\n * Used to initiate a remote call via the {@link BackendSrv}\n *\n * @public\n */\nexport type BackendSrvRequest = {\n  /**\n   * Request URL\n   */\n  url: string;\n\n  /**\n   * Number of times to retry the remote call if it fails.\n   */\n  retry?: number;\n\n  /**\n   * HTTP headers that should be passed along with the remote call.\n   * Please have a look at {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API | Fetch API}\n   * for supported headers.\n   */\n  headers?: Record<string, any>;\n\n  /**\n   * HTTP verb to perform in the remote call GET, POST, PUT etc.\n   */\n  method?: string;\n\n  /**\n   * Set to false an success application alert box will not be shown for successful PUT, DELETE, POST requests\n   */\n  showSuccessAlert?: boolean;\n\n  /**\n   * Set to false to not show an application alert box for request errors\n   */\n  showErrorAlert?: boolean;\n\n  /**\n   * Provided by the initiator to identify a particular remote call. An example\n   * of this is when a datasource plugin triggers a query. If the request id already\n   * exist the backendSrv will try to cancel and replace the previous call with the\n   * new one.\n   */\n  requestId?: string;\n\n  /**\n   * Set to to true to not include call in query inspector\n   */\n  hideFromInspector?: boolean;\n\n  /**\n   * The data to send\n   */\n  data?: any;\n\n  /**\n   * Query params\n   */\n  params?: Record<string, any>;\n\n  /**\n   * Define how the response object should be parsed.  See:\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n   *\n   * By default values are json parsed from text\n   */\n  responseType?: 'json' | 'text' | 'arraybuffer' | 'blob';\n\n  /**\n   * The credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests.\n   */\n  credentials?: RequestCredentials;\n\n  /**\n   * @deprecated withCredentials is deprecated in favor of credentials\n   */\n  withCredentials?: boolean;\n};\n\n/**\n * Response for fetch function in {@link BackendSrv}\n *\n * @public\n */\nexport interface FetchResponse<T = any> {\n  data: T;\n  readonly status: number;\n  readonly statusText: string;\n  readonly ok: boolean;\n  readonly headers: Headers;\n  readonly redirected: boolean;\n  readonly type: ResponseType;\n  readonly url: string;\n  readonly config: BackendSrvRequest;\n}\n\n/**\n * Error type for fetch function in {@link BackendSrv}\n *\n * @public\n */\nexport interface FetchErrorDataProps {\n  message?: string;\n  status?: string;\n  error?: string | any;\n}\n\n/**\n * Error type for fetch function in {@link BackendSrv}\n *\n * @public\n */\nexport interface FetchError<T = any> {\n  status: number;\n  statusText?: string;\n  data: T;\n  message?: string;\n  cancelled?: boolean;\n  isHandled?: boolean;\n  config: BackendSrvRequest;\n}\n\nexport function isFetchError(e: unknown): e is FetchError {\n  return typeof e === 'object' && e !== null && 'status' in e && 'data' in e;\n}\n\n/**\n * Used to communicate via http(s) to a remote backend such as the Grafana backend,\n * a datasource etc. The BackendSrv is using the {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API | Fetch API}\n * under the hood to handle all the communication.\n *\n * The request function can be used to perform a remote call by specifying a {@link BackendSrvRequest}.\n * To make the BackendSrv a bit easier to use we have added a couple of shorthand functions that will\n * use default values executing the request.\n *\n * @remarks\n * By default, Grafana displays an error message alert if the remote call fails. To prevent this from\n * happening `showErrorAlert = true` on the options object.\n *\n * @public\n */\nexport interface BackendSrv {\n  get<T = any>(url: string, params?: any, requestId?: string, options?: Partial<BackendSrvRequest>): Promise<T>;\n  delete<T = any>(url: string, data?: any, options?: Partial<BackendSrvRequest>): Promise<T>;\n  post<T = any>(url: string, data?: any, options?: Partial<BackendSrvRequest>): Promise<T>;\n  patch<T = any>(url: string, data?: any, options?: Partial<BackendSrvRequest>): Promise<T>;\n  put<T = any>(url: string, data?: any, options?: Partial<BackendSrvRequest>): Promise<T>;\n\n  /**\n   * @deprecated Use the `.fetch()` function instead. If you prefer to work with a promise\n   * wrap the Observable returned by fetch with the lastValueFrom function, or use the get|delete|post|patch|put methods.\n   * This method is going to be private from Grafana 10.\n   */\n  request<T = any>(options: BackendSrvRequest): Promise<T>;\n\n  /**\n   * Special function used to communicate with datasources that will emit core\n   * events that the Grafana QueryInspector and QueryEditor is listening for to be able\n   * to display datasource query information. Can be skipped by adding `option.silent`\n   * when initializing the request.\n   *\n   * @deprecated Use the fetch function instead\n   */\n  datasourceRequest<T = any>(options: BackendSrvRequest): Promise<FetchResponse<T>>;\n\n  /**\n   * Observable http request interface\n   */\n  fetch<T>(options: BackendSrvRequest): Observable<FetchResponse<T>>;\n}\n\nlet singletonInstance: BackendSrv;\n\n/**\n * Used during startup by Grafana to set the BackendSrv so it is available\n * via the {@link getBackendSrv} to the rest of the application.\n *\n * @internal\n */\nexport const setBackendSrv = (instance: BackendSrv) => {\n  singletonInstance = instance;\n};\n\n/**\n * Used to retrieve the {@link BackendSrv} that can be used to communicate\n * via http(s) to a remote backend such as the Grafana backend, a datasource etc.\n *\n * @public\n */\nexport const getBackendSrv = (): BackendSrv => singletonInstance;\n","/**\n * Used to enable rendering of Angular components within a\n * React component without losing proper typings.\n *\n * @example\n * ```typescript\n * class Component extends PureComponent<Props> {\n *   element: HTMLElement;\n *   angularComponent: AngularComponent;\n *\n *   componentDidMount() {\n *     const template = '<angular-component />' // angular template here;\n *     const scopeProps = { ctrl: angularController }; // angular scope properties here\n *     const loader = getAngularLoader();\n *     this.angularComponent = loader.load(this.element, scopeProps, template);\n *   }\n *\n *   componentWillUnmount() {\n *     if (this.angularComponent) {\n *       this.angularComponent.destroy();\n *     }\n *   }\n *\n *   render() {\n *     return (\n *       <div ref={element => (this.element = element)} />\n *     );\n *   }\n * }\n * ```\n *\n * @public\n */\nexport interface AngularComponent {\n  /**\n   * Should be called when the React component will unmount.\n   */\n  destroy(): void;\n  /**\n   * Can be used to trigger a re-render of the Angular component.\n   */\n  digest(): void;\n  /**\n   * Used to access the Angular scope from the React component.\n   */\n  getScope(): any;\n}\n\n/**\n * Used to load an Angular component from the context of a React component.\n * Please see the {@link AngularComponent} for a proper example.\n *\n * @public\n */\nexport interface AngularLoader {\n  /**\n   *\n   * @param elem - the element that the Angular component will be loaded into.\n   * @param scopeProps - values that will be accessed via the Angular scope.\n   * @param template  - template used by the Angular component.\n   */\n  load(elem: any, scopeProps: any, template: string): AngularComponent;\n}\n\nlet instance: AngularLoader;\n\n/**\n * Used during startup by Grafana to set the AngularLoader so it is available\n * via the {@link getAngularLoader} to the rest of the application.\n *\n * @internal\n */\nexport function setAngularLoader(v: AngularLoader) {\n  instance = v;\n}\n\n/**\n * Used to retrieve the {@link AngularLoader} that enables the use of Angular\n * components within a React component.\n *\n * Please see the {@link AngularComponent} for a proper example.\n *\n * @public\n */\nexport function getAngularLoader(): AngularLoader {\n  return instance;\n}\n","import { ScopedVars, DataSourceApi, DataSourceInstanceSettings, DataSourceRef } from '@grafana/data';\n\n/**\n * This is the entry point for communicating with a datasource that is added as\n * a plugin (both external and internal). Via this service you will get access\n * to the {@link @grafana/data#DataSourceApi | DataSourceApi} that have a rich API for\n * communicating with the datasource.\n *\n * @public\n */\nexport interface DataSourceSrv {\n  /**\n   * Returns the requested dataSource. If it cannot be found it rejects the promise.\n   * @param ref - The datasource identifier, typically an object with UID and type,\n   * @param scopedVars - variables used to interpolate a templated passed as name.\n   */\n  get(ref?: DataSourceRef | string | null, scopedVars?: ScopedVars): Promise<DataSourceApi>;\n\n  /**\n   * Get a list of data sources\n   */\n  getList(filters?: GetDataSourceListFilters): DataSourceInstanceSettings[];\n\n  /**\n   * Get settings and plugin metadata by name or uid\n   */\n  getInstanceSettings(\n    ref?: DataSourceRef | string | null,\n    scopedVars?: ScopedVars\n  ): DataSourceInstanceSettings | undefined;\n\n  /**\n   * Reloads the DataSourceSrv\n   */\n  reload(): void;\n}\n\n/** @public */\nexport interface GetDataSourceListFilters {\n  /** Include mixed data source by setting this to true */\n  mixed?: boolean;\n\n  /** Only return data sources that support metrics response */\n  metrics?: boolean;\n\n  /** Only return data sources that support tracing response */\n  tracing?: boolean;\n\n  /** Only return data sources that support logging response */\n  logs?: boolean;\n\n  /** Only return data sources that support annotations */\n  annotations?: boolean;\n\n  /** Only filter data sources that support alerting */\n  alerting?: boolean;\n\n  /**\n   * By default only data sources that can be queried will be returned. Meaning they have tracing,\n   * metrics, logs or annotations flag set in plugin.json file\n   * */\n  all?: boolean;\n\n  /** Set to true to return dashboard data source */\n  dashboard?: boolean;\n\n  /** Set to true to return data source variables */\n  variables?: boolean;\n\n  /** filter list by plugin  */\n  pluginId?: string;\n\n  /** apply a function to filter */\n  filter?: (dataSource: DataSourceInstanceSettings) => boolean;\n\n  /** Only returns datasources matching the specified types (ie. Loki, Prometheus) */\n  type?: string | string[];\n}\n\nlet singletonInstance: DataSourceSrv;\n\n/**\n * Used during startup by Grafana to set the DataSourceSrv so it is available\n * via the {@link getDataSourceSrv} to the rest of the application.\n *\n * @internal\n */\nexport function setDataSourceSrv(instance: DataSourceSrv) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve the {@link DataSourceSrv} that is the entry point for communicating with\n * a datasource that is added as a plugin (both external and internal).\n *\n * @public\n */\nexport function getDataSourceSrv(): DataSourceSrv {\n  return singletonInstance;\n}\n","import { UrlQueryMap } from '@grafana/data';\n\n/**\n * @public\n * @deprecated in favor of {@link locationService} and will be removed in Grafana 9\n */\nexport interface LocationUpdate {\n  /**\n   * Target path where you automatically wants to navigate the user.\n   */\n  path?: string;\n\n  /**\n   * Specify this value if you want to add values to the query string of the URL.\n   */\n  query?: UrlQueryMap;\n\n  /**\n   * If set to true, the query argument will be added to the existing URL.\n   */\n  partial?: boolean;\n\n  /**\n   * Used internally to sync the Redux state from Angular to make sure that the Redux location\n   * state is in sync when navigating using the Angular router.\n   *\n   * @remarks\n   * Do not change this unless you are the Angular router.\n   *\n   * @internal\n   */\n  routeParams?: UrlQueryMap;\n\n  /*\n   * If set to true, this will replace URL state (ie. cause no new browser history).\n   */\n  replace?: boolean;\n}\n\n/**\n * If you need to automatically navigate the user to a new place in the application this should\n * be done via the LocationSrv and it will make sure to update the application state accordingly.\n *\n * @public\n * @deprecated in favor of {@link locationService} and will be removed in Grafana 9\n */\nexport interface LocationSrv {\n  update(options: LocationUpdate): void;\n}\n\nlet singletonInstance: LocationSrv;\n\n/**\n * Used during startup by Grafana to set the LocationSrv so it is available\n * via the {@link getLocationSrv} to the rest of the application.\n *\n * @internal\n */\nexport function setLocationSrv(instance: LocationSrv) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve the {@link LocationSrv} that can be used to automatically navigate\n * the user to a new place in Grafana.\n *\n * @public\n * @deprecated in favor of {@link locationService} and will be removed in Grafana 9\n */\nexport function getLocationSrv(): LocationSrv {\n  return singletonInstance;\n}\n","/**\n * Describes a size with width/height\n *\n * @public\n */\nexport interface SizeMeta {\n  width: number;\n  height: number;\n}\n\n/**\n * Describes the meta information that are sent together with each event.\n *\n * @public\n */\nexport interface EchoMeta {\n  screenSize: SizeMeta;\n  windowSize: SizeMeta;\n  userAgent: string;\n  url?: string;\n  /**\n   * A unique browser session\n   */\n  sessionId: string;\n  /**\n   * The current users username used to login into Grafana e.g. email.\n   */\n  userLogin: string;\n  /**\n   * The current users unique identifier.\n   */\n  userId: number;\n  /**\n   * True when user is logged in into Grafana.\n   */\n  userSignedIn: boolean;\n  /**\n   * A millisecond epoch\n   */\n  ts: number;\n  /**\n   * A highres timestamp since navigation start\n   */\n  timeSinceNavigationStart: number;\n}\n\n/**\n * Describes echo backends that can be registered to receive of events.\n *\n * @public\n */\nexport interface EchoBackend<T extends EchoEvent = any, O = any> {\n  options: O;\n  supportedEvents: EchoEventType[];\n  flush: () => void;\n  addEvent: (event: T) => void;\n}\n\n/**\n * Describes an echo event.\n *\n * @public\n */\nexport interface EchoEvent<T extends EchoEventType = any, P = any> {\n  type: EchoEventType;\n  /**\n   * Event payload containing event specific data.\n   */\n  payload: P;\n  meta: EchoMeta;\n}\n\n/**\n * Supported echo event types that can be sent via the {@link EchoSrv}.\n *\n * @public\n */\nexport enum EchoEventType {\n  Performance = 'performance',\n  MetaAnalytics = 'meta-analytics',\n  Sentry = 'sentry',\n  Pageview = 'pageview',\n  Interaction = 'interaction',\n  ExperimentView = 'experimentview',\n  GrafanaJavascriptAgent = 'grafana-javascript-agent',\n}\n\n/**\n * Used to send events to all the registered backends. This should be accessed via the\n * {@link getEchoSrv} function. Will, by default, flush events to the backends every\n * 10s or when the flush function is triggered.\n *\n * @public\n */\nexport interface EchoSrv {\n  /**\n   * Call this to flush current events to the echo backends.\n   */\n  flush(): void;\n  /**\n   * Add a new echo backend to the list of backends that will receive events.\n   */\n  addBackend(backend: EchoBackend): void;\n  /**\n   * Call this to add event that will be sent to the echo backends upon next\n   * flush.\n   *\n   * @param event - Object containing event information.\n   * @param meta - Object that will extend/override the default meta object.\n   */\n  addEvent<T extends EchoEvent>(event: Omit<T, 'meta'>, meta?: {}): void;\n}\n\nlet singletonInstance: EchoSrv;\n\n/**\n * Used during startup by Grafana to set the EchoSrv so it is available\n * via the {@link getEchoSrv} to the rest of the application.\n *\n * @internal\n */\nexport function setEchoSrv(instance: EchoSrv) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve the {@link EchoSrv} that can be used to report events to registered\n * echo backends.\n *\n * @public\n */\nexport function getEchoSrv(): EchoSrv {\n  if (!singletonInstance) {\n    singletonInstance = new FakeEchoSrv();\n  }\n\n  return singletonInstance;\n}\n\n/**\n * Used to register echo backends that will receive Grafana echo events during application\n * runtime.\n *\n * @public\n */\nexport const registerEchoBackend = (backend: EchoBackend) => {\n  getEchoSrv().addBackend(backend);\n};\n\nexport class FakeEchoSrv implements EchoSrv {\n  events: Array<Omit<EchoEvent, 'meta'>> = [];\n\n  flush(): void {\n    this.events = [];\n  }\n\n  addBackend(backend: EchoBackend): void {}\n\n  addEvent<T extends EchoEvent>(event: Omit<T, 'meta'>, meta?: {} | undefined): void {\n    this.events.push(event);\n  }\n}\n","import { ScopedVars, TimeRange, TypedVariableModel } from '@grafana/data';\n\n/**\n * Can be used to gain more information about an interpolation operation\n */\nexport interface VariableInterpolation {\n  /** The full matched expression including, example: ${varName.field:regex} */\n  match: string;\n  /** In the expression ${varName.field:regex} variableName is varName */\n  variableName: string;\n  /** In the expression ${varName.fields[0].name:regex} the fieldPath is fields[0].name */\n  fieldPath?: string;\n  /** In the expression ${varName:regex} the regex part is the format */\n  format?: string;\n  /** The formatted value of the variable expresion. Will equal match when variable not found or scopedVar was undefined or null **/\n  value: string;\n  // When value === match this will be true, meaning the variable was not found\n  found?: boolean;\n}\n\n/**\n * Via the TemplateSrv consumers get access to all the available template variables\n * that can be used within the current active dashboard.\n *\n * For a more in-depth description visit: https://grafana.com/docs/grafana/latest/reference/templating\n * @public\n */\nexport interface TemplateSrv {\n  /**\n   * List the dashboard variables\n   */\n  getVariables(): TypedVariableModel[];\n\n  /**\n   * Replace the values within the target string.  See also {@link InterpolateFunction}\n   *\n   * Note: interpolations array is being mutated by replace function by adding information about variables that\n   * have been interpolated during replacement. Variables that were specified in the target but not found in\n   * the list of available variables are also added to the array. See {@link VariableInterpolation} for more details.\n   *\n   * @param {VariableInterpolation[]} interpolations an optional map that is updated with interpolated variables\n   */\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    format?: string | Function,\n    interpolations?: VariableInterpolation[]\n  ): string;\n\n  /**\n   * Checks if a target contains template variables.\n   */\n  containsTemplate(target?: string): boolean;\n\n  /**\n   * Update the current time range to be used when interpolating __from / __to variables.\n   */\n  updateTimeRange(timeRange: TimeRange): void;\n}\n\nlet singletonInstance: TemplateSrv;\n\n/**\n * Used during startup by Grafana to set the TemplateSrv so it is available\n * via the {@link getTemplateSrv} to the rest of the application.\n *\n * @internal\n */\nexport const setTemplateSrv = (instance: TemplateSrv) => {\n  singletonInstance = instance;\n};\n\n/**\n * Used to retrieve the {@link TemplateSrv} that can be used to fetch available\n * template variables.\n *\n * @public\n */\nexport const getTemplateSrv = (): TemplateSrv => singletonInstance;\n","import { auto } from 'angular';\n\nlet singleton: auto.IInjectorService;\n\n/**\n * Used during startup by Grafana to temporarily expose the angular injector to\n * pure javascript plugins using {@link getLegacyAngularInjector}.\n *\n * @internal\n */\nexport const setLegacyAngularInjector = (instance: auto.IInjectorService) => {\n  singleton = instance;\n};\n\n/**\n * WARNING: this function provides a temporary way for plugins to access anything in the\n * angular injector.  While the migration from angular to react continues, there are a few\n * options that do not yet have good alternatives.  Note that use of this function will\n * be removed in the future.\n *\n * @beta\n */\nexport const getLegacyAngularInjector = (): auto.IInjectorService => singleton;\n","import { Observable } from 'rxjs';\n\nimport {\n  DataFrameJSON,\n  DataQueryRequest,\n  DataQueryResponse,\n  LiveChannelAddress,\n  LiveChannelEvent,\n  LiveChannelPresenceStatus,\n} from '@grafana/data';\n\n/**\n * @alpha -- experimental\n */\nexport interface LiveDataFilter {\n  fields?: string[];\n}\n\n/**\n * Indicate if the frame is appened or replace\n *\n * @alpha\n */\nexport enum StreamingFrameAction {\n  Append = 'append',\n  Replace = 'replace',\n}\n\n/**\n * @alpha\n */\nexport interface StreamingFrameOptions {\n  maxLength: number; // 1000\n  maxDelta: number; // how long to keep things\n  action: StreamingFrameAction; // default will append\n\n  /** optionally format field names based on labels */\n  displayNameFormat?: string;\n}\n\n/**\n * @alpha\n */\nexport interface LiveDataStreamOptions {\n  addr: LiveChannelAddress;\n  frame?: DataFrameJSON; // initial results\n  key?: string;\n  buffer?: Partial<StreamingFrameOptions>;\n  filter?: LiveDataFilter;\n}\n\n/**\n * @alpha -- experimental: send a normal query request over websockt\n */\nexport interface LiveQueryDataOptions {\n  request: DataQueryRequest;\n  body: any; // processed queries, same as sent to `/api/query/ds`\n}\n\n/**\n * @alpha -- experimental\n */\nexport interface GrafanaLiveSrv {\n  /**\n   * Listen for changes to the main service\n   */\n  getConnectionState(): Observable<boolean>;\n\n  /**\n   * Watch for messages in a channel\n   */\n  getStream<T>(address: LiveChannelAddress): Observable<LiveChannelEvent<T>>;\n\n  /**\n   * Connect to a channel and return results as DataFrames\n   */\n  getDataStream(options: LiveDataStreamOptions): Observable<DataQueryResponse>;\n\n  /**\n   * Execute a query over the live websocket and potentiall subscribe to a live channel.\n   *\n   * Since the initial request and subscription are on the same socket, this will support HA setups\n   *\n   * @alpha -- this function requires the feature toggle `queryOverLive` to be set\n   */\n  getQueryData(options: LiveQueryDataOptions): Observable<DataQueryResponse>;\n\n  /**\n   * For channels that support presence, this will request the current state from the server.\n   *\n   * Join and leave messages will be sent to the open stream\n   */\n  getPresence(address: LiveChannelAddress): Promise<LiveChannelPresenceStatus>;\n\n  /**\n   * Publish into a channel\n   *\n   * @alpha -- experimental\n   */\n  publish(address: LiveChannelAddress, data: any): Promise<any>;\n}\n\nlet singletonInstance: GrafanaLiveSrv;\n\n/**\n * Used during startup by Grafana to set the GrafanaLiveSrv so it is available\n * via the {@link getGrafanaLiveSrv} to the rest of the application.\n *\n * @internal\n */\nexport const setGrafanaLiveSrv = (instance: GrafanaLiveSrv) => {\n  singletonInstance = instance;\n};\n\n/**\n * Used to retrieve the GrafanaLiveSrv that allows you to subscribe to\n * server side events and streams\n *\n * @alpha -- experimental\n */\nexport const getGrafanaLiveSrv = (): GrafanaLiveSrv => singletonInstance;\n","import { merge } from 'lodash';\n\nimport {\n  AuthSettings,\n  BootData,\n  BuildInfo,\n  createTheme,\n  DataSourceInstanceSettings,\n  FeatureToggles,\n  GrafanaConfig,\n  GrafanaTheme,\n  GrafanaTheme2,\n  LicenseInfo,\n  MapLayerOptions,\n  OAuthSettings,\n  PanelPluginMeta,\n  systemDateFormats,\n  SystemDateFormatSettings,\n  NewThemeOptions,\n} from '@grafana/data';\n\nexport interface AzureSettings {\n  cloud?: string;\n  managedIdentityEnabled: boolean;\n  workloadIdentityEnabled: boolean;\n}\n\nexport type AppPluginConfig = {\n  id: string;\n  path: string;\n  version: string;\n  preload: boolean;\n};\n\nexport class GrafanaBootConfig implements GrafanaConfig {\n  isPublicDashboardView: boolean;\n  snapshotEnabled = true;\n  datasources: { [str: string]: DataSourceInstanceSettings } = {};\n  panels: { [key: string]: PanelPluginMeta } = {};\n  apps: Record<string, AppPluginConfig> = {};\n  auth: AuthSettings = {};\n  minRefreshInterval = '';\n  appUrl = '';\n  appSubUrl = '';\n  windowTitlePrefix = '';\n  buildInfo: BuildInfo;\n  newPanelTitle = '';\n  bootData: BootData;\n  externalUserMngLinkUrl = '';\n  externalUserMngLinkName = '';\n  externalUserMngInfo = '';\n  allowOrgCreate = false;\n  feedbackLinksEnabled = true;\n  disableLoginForm = false;\n  defaultDatasource = ''; // UID\n  alertingEnabled = false;\n  alertingErrorOrTimeout = '';\n  alertingNoDataOrNullValues = '';\n  alertingMinInterval = 1;\n  angularSupportEnabled = false;\n  authProxyEnabled = false;\n  exploreEnabled = false;\n  queryHistoryEnabled = false;\n  helpEnabled = false;\n  profileEnabled = false;\n  ldapEnabled = false;\n  jwtHeaderName = '';\n  jwtUrlLogin = false;\n  sigV4AuthEnabled = false;\n  azureAuthEnabled = false;\n  samlEnabled = false;\n  samlName = '';\n  autoAssignOrg = true;\n  verifyEmailEnabled = false;\n  oauth: OAuthSettings = {};\n  rbacEnabled = true;\n  disableUserSignUp = false;\n  loginHint = '';\n  passwordHint = '';\n  loginError = undefined;\n  viewersCanEdit = false;\n  editorsCanAdmin = false;\n  disableSanitizeHtml = false;\n  liveEnabled = true;\n  /** @deprecated Use `theme2` instead. */\n  theme: GrafanaTheme;\n  theme2: GrafanaTheme2;\n  featureToggles: FeatureToggles = {};\n  anonymousEnabled = false;\n  licenseInfo: LicenseInfo = {} as LicenseInfo;\n  rendererAvailable = false;\n  dashboardPreviews: {\n    systemRequirements: {\n      met: boolean;\n      requiredImageRendererPluginVersion: string;\n    };\n    thumbnailsExist: boolean;\n  } = { systemRequirements: { met: false, requiredImageRendererPluginVersion: '' }, thumbnailsExist: false };\n  rendererVersion = '';\n  secretsManagerPluginEnabled = false;\n  supportBundlesEnabled = false;\n  http2Enabled = false;\n  dateFormats?: SystemDateFormatSettings;\n  sentry = {\n    enabled: false,\n    dsn: '',\n    customEndpoint: '',\n    sampleRate: 1,\n  };\n  grafanaJavascriptAgent = {\n    enabled: false,\n    customEndpoint: '',\n    apiKey: '',\n    errorInstrumentalizationEnabled: true,\n    consoleInstrumentalizationEnabled: false,\n    webVitalsInstrumentalizationEnabled: false,\n  };\n  pluginCatalogURL = 'https://grafana.com/grafana/plugins/';\n  pluginAdminEnabled = true;\n  pluginAdminExternalManageEnabled = false;\n  pluginCatalogHiddenPlugins: string[] = [];\n  pluginsCDNBaseURL = '';\n  expressionsEnabled = false;\n  customTheme?: undefined;\n  awsAllowedAuthProviders: string[] = [];\n  awsAssumeRoleEnabled = false;\n  azure: AzureSettings = {\n    managedIdentityEnabled: false,\n    workloadIdentityEnabled: false,\n  };\n  caching = {\n    enabled: false,\n  };\n  geomapDefaultBaseLayerConfig?: MapLayerOptions;\n  geomapDisableCustomBaseLayer?: boolean;\n  unifiedAlertingEnabled = false;\n  unifiedAlerting = { minInterval: '' };\n  applicationInsightsConnectionString?: string;\n  applicationInsightsEndpointUrl?: string;\n  recordedQueries = {\n    enabled: true,\n  };\n  featureHighlights = {\n    enabled: false,\n  };\n  reporting = {\n    enabled: true,\n  };\n  googleAnalyticsId: undefined;\n  googleAnalytics4Id: undefined;\n  googleAnalytics4SendManualPageViews = false;\n  rudderstackWriteKey: undefined;\n  rudderstackDataPlaneUrl: undefined;\n  rudderstackSdkUrl: undefined;\n  rudderstackConfigUrl: undefined;\n  sqlConnectionLimits = {\n    maxOpenConns: 100,\n    maxIdleConns: 100,\n    connMaxLifetime: 14400,\n  };\n\n  tokenExpirationDayLimit: undefined;\n\n  constructor(options: GrafanaBootConfig) {\n    this.bootData = options.bootData;\n    this.bootData.user.lightTheme = getThemeMode(options) === 'light';\n    this.isPublicDashboardView = options.bootData.settings.isPublicDashboardView;\n\n    const defaults = {\n      datasources: {},\n      windowTitlePrefix: 'Grafana - ',\n      panels: {},\n      newPanelTitle: 'Panel Title',\n      playlist_timespan: '1m',\n      unsaved_changes_warning: true,\n      appUrl: '',\n      appSubUrl: '',\n      buildInfo: {\n        version: '1.0',\n        commit: '1',\n        env: 'production',\n      },\n      viewersCanEdit: false,\n      editorsCanAdmin: false,\n      disableSanitizeHtml: false,\n    };\n\n    merge(this, defaults, options);\n\n    this.buildInfo = options.buildInfo || defaults.buildInfo;\n\n    if (this.dateFormats) {\n      systemDateFormats.update(this.dateFormats);\n    }\n\n    overrideFeatureTogglesFromUrl(this);\n\n    if (this.featureToggles.disableAngular) {\n      this.angularSupportEnabled = false;\n    }\n\n    // Creating theme after applying feature toggle overrides in case we need to toggle anything\n    this.theme2 = createTheme(getThemeCustomizations(this));\n\n    this.theme = this.theme2.v1;\n    // Special feature toggle that impact theme/component looks\n    this.theme2.flags.topnav = this.featureToggles.topnav;\n  }\n}\n\nfunction getThemeMode(config: GrafanaBootConfig) {\n  let mode: 'light' | 'dark' = 'dark';\n  const themePref = config.bootData.user.theme;\n\n  if (themePref === 'light' || themePref === 'dark') {\n    mode = themePref;\n  } else if (themePref === 'system') {\n    const mediaResult = window.matchMedia('(prefers-color-scheme: dark)');\n    mode = mediaResult.matches ? 'dark' : 'light';\n  }\n\n  return mode;\n}\n\nfunction getThemeCustomizations(config: GrafanaBootConfig) {\n  // if/when we remove CurrentUserDTO.lightTheme, change this to use getThemeMode instead\n  const mode = config.bootData.user.lightTheme ? 'light' : 'dark';\n\n  const themeOptions: NewThemeOptions = {\n    colors: { mode },\n  };\n\n  return themeOptions;\n}\n\nfunction overrideFeatureTogglesFromUrl(config: GrafanaBootConfig) {\n  if (window.location.href.indexOf('__feature') === -1) {\n    return;\n  }\n\n  const params = new URLSearchParams(window.location.search);\n  params.forEach((value, key) => {\n    if (key.startsWith('__feature.')) {\n      const featureToggles = config.featureToggles as Record<string, boolean>;\n      const featureName = key.substring(10);\n      const toggleState = value === 'true';\n      if (toggleState !== featureToggles[key]) {\n        featureToggles[featureName] = toggleState;\n        console.log(`Setting feature toggle ${featureName} = ${toggleState}`);\n      }\n    }\n  });\n}\n\nconst bootData = (window as any).grafanaBootData || {\n  settings: {},\n  user: {},\n  navTree: [],\n};\n\nconst options = bootData.settings;\noptions.bootData = bootData;\n\n/**\n * Use this to access the {@link GrafanaBootConfig} for the current running Grafana instance.\n *\n * @public\n */\nexport const config = new GrafanaBootConfig(options);\n","import * as H from 'history';\n\nimport { deprecationWarning, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { attachDebugger, createLogger } from '@grafana/ui';\n\nimport { config } from '../config';\n\nimport { LocationUpdate } from './LocationSrv';\n\n/**\n * @public\n * A wrapper to help work with browser location and history\n */\nexport interface LocationService {\n  partial: (query: Record<string, any>, replace?: boolean) => void;\n  push: (location: H.Path | H.LocationDescriptor<any>) => void;\n  replace: (location: H.Path | H.LocationDescriptor<any>) => void;\n  reload: () => void;\n  getLocation: () => H.Location;\n  getHistory: () => H.History;\n  getSearch: () => URLSearchParams;\n  getSearchObject: () => UrlQueryMap;\n\n  /**\n   * This is from the old LocationSrv interface\n   * @deprecated use partial, push or replace instead */\n  update: (update: LocationUpdate) => void;\n}\n\n/** @internal */\nexport class HistoryWrapper implements LocationService {\n  private readonly history: H.History;\n\n  constructor(history?: H.History) {\n    // If no history passed create an in memory one if being called from test\n    this.history =\n      history ||\n      (process.env.NODE_ENV === 'test'\n        ? H.createMemoryHistory({ initialEntries: ['/'] })\n        : H.createBrowserHistory({ basename: config.appSubUrl ?? '/' }));\n\n    this.partial = this.partial.bind(this);\n    this.push = this.push.bind(this);\n    this.replace = this.replace.bind(this);\n    this.getSearch = this.getSearch.bind(this);\n    this.getHistory = this.getHistory.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  getHistory() {\n    return this.history;\n  }\n\n  getSearch() {\n    return new URLSearchParams(this.history.location.search);\n  }\n\n  partial(query: Record<string, any>, replace?: boolean) {\n    const currentLocation = this.history.location;\n    const newQuery = this.getSearchObject();\n\n    for (const key of Object.keys(query)) {\n      // removing params with null | undefined\n      if (query[key] === null || query[key] === undefined) {\n        delete newQuery[key];\n      } else {\n        newQuery[key] = query[key];\n      }\n    }\n\n    const updatedUrl = urlUtil.renderUrl(currentLocation.pathname, newQuery);\n\n    if (replace) {\n      this.history.replace(updatedUrl, this.history.location.state);\n    } else {\n      this.history.push(updatedUrl, this.history.location.state);\n    }\n  }\n\n  push(location: H.Path | H.LocationDescriptor) {\n    this.history.push(location);\n  }\n\n  replace(location: H.Path | H.LocationDescriptor) {\n    this.history.replace(location);\n  }\n\n  reload() {\n    const prevState = (this.history.location.state as any)?.routeReloadCounter;\n    this.history.replace({\n      ...this.history.location,\n      state: { routeReloadCounter: prevState ? prevState + 1 : 1 },\n    });\n  }\n\n  getLocation() {\n    return this.history.location;\n  }\n\n  getSearchObject() {\n    return locationSearchToObject(this.history.location.search);\n  }\n\n  /** @deprecated use partial, push or replace instead */\n  update(options: LocationUpdate) {\n    deprecationWarning('LocationSrv', 'update', 'partial, push or replace');\n    if (options.partial && options.query) {\n      this.partial(options.query, options.partial);\n    } else {\n      const newLocation: H.LocationDescriptor = {\n        pathname: options.path,\n      };\n      if (options.query) {\n        newLocation.search = urlUtil.toUrlParams(options.query);\n      }\n      if (options.replace) {\n        this.replace(newLocation);\n      } else {\n        this.push(newLocation);\n      }\n    }\n  }\n}\n\n/**\n * @public\n * Parses a location search string to an object\n * */\nexport function locationSearchToObject(search: string | number): UrlQueryMap {\n  let queryString = typeof search === 'number' ? String(search) : search;\n\n  if (queryString.length > 0) {\n    if (queryString.startsWith('?')) {\n      return urlUtil.parseKeyValue(queryString.substring(1));\n    }\n    return urlUtil.parseKeyValue(queryString);\n  }\n\n  return {};\n}\n\n/**\n * @public\n */\nexport let locationService: LocationService = new HistoryWrapper();\n\n/**\n * Used for tests only\n * @internal\n */\nexport const setLocationService = (location: LocationService) => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('locationService can be only overriden in test environment');\n  }\n  locationService = location;\n};\n\nconst navigationLog = createLogger('Router');\n\n/** @internal */\nexport const navigationLogger = navigationLog.logger;\n\n// For debugging purposes the location service is attached to global _debug variable\nattachDebugger('location', locationService, navigationLog);\n","import { BusEventBase, BusEventWithPayload, EventBus, GrafanaTheme2, PanelModel, TimeRange } from '@grafana/data';\n\n/**\n * Called when a dashboard is refreshed\n *\n * @public\n */\nexport class RefreshEvent extends BusEventBase {\n  static type = 'refresh';\n}\n\n/**\n * Called when the theme settings change\n *\n * @public\n */\nexport class ThemeChangedEvent extends BusEventWithPayload<GrafanaTheme2> {\n  static type = 'theme-changed';\n}\n\n/**\n * Called when time range is updated\n *\n * @public\n */\nexport class TimeRangeUpdatedEvent extends BusEventWithPayload<TimeRange> {\n  static type = 'time-range-updated';\n}\n\n/**\n * Called to copy a panel JSON into local storage\n *\n * @public\n */\nexport class CopyPanelEvent extends BusEventWithPayload<PanelModel> {\n  static type = 'copy-panel';\n}\n\n// Internal singleton instance\nlet singletonInstance: EventBus;\n\n/**\n * Used during startup by Grafana to set the setAppEvents so it is available\n * via the {@link setAppEvents} to the rest of the application.\n *\n * @internal\n */\nexport function setAppEvents(instance: EventBus) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve an event bus that manages application level events\n *\n * @public\n */\nexport function getAppEvents(): EventBus {\n  return singletonInstance;\n}\n","import { PluginExtension } from '@grafana/data';\n\nexport type GetPluginExtensions = ({\n  extensionPointId,\n  context,\n}: {\n  extensionPointId: string;\n  context?: object | Record<string | symbol, unknown>;\n}) => {\n  extensions: PluginExtension[];\n};\n\nlet singleton: GetPluginExtensions | undefined;\n\nexport function setPluginExtensionGetter(instance: GetPluginExtensions): void {\n  // We allow overriding the registry in tests\n  if (singleton && process.env.NODE_ENV !== 'test') {\n    throw new Error('setPluginExtensionGetter() function should only be called once, when Grafana is starting.');\n  }\n  singleton = instance;\n}\n\nfunction getPluginExtensionGetter(): GetPluginExtensions {\n  if (!singleton) {\n    throw new Error('getPluginExtensionGetter() can only be used after the Grafana instance has started.');\n  }\n  return singleton;\n}\n\nexport const getPluginExtensions: GetPluginExtensions = (options) => getPluginExtensionGetter()(options);\n","import { PluginExtension, PluginExtensionLink, PluginExtensionTypes } from '@grafana/data';\n\nexport function isPluginExtensionLink(extension: PluginExtension | undefined): extension is PluginExtensionLink {\n  if (!extension) {\n    return false;\n  }\n  return extension.type === PluginExtensionTypes.link && ('path' in extension || 'onClick' in extension);\n}\n","import { CoreApp } from '@grafana/data';\n\nimport { EchoEvent, EchoEventType } from '../services/EchoSrv';\n\n/**\n * Describes the basic dashboard information that can be passed as the meta\n * analytics payload.\n *\n * @public\n */\nexport interface DashboardInfo {\n  dashboardId: number;\n  dashboardUid: string;\n  dashboardName: string;\n  folderName?: string;\n  publicDashboardUid?: string;\n}\n\n/**\n * Describes the data request information passed as the meta analytics payload.\n *\n * @public\n */\nexport interface DataRequestInfo extends Partial<DashboardInfo> {\n  source?: CoreApp | string;\n  datasourceName: string;\n  datasourceId: number;\n  datasourceUid: string;\n  datasourceType: string;\n  panelId?: number;\n  panelName?: string;\n  duration: number;\n  error?: string;\n  dataSize?: number;\n}\n\n/**\n * The meta analytics events that can be added to the echo service.\n *\n * @public\n */\nexport enum MetaAnalyticsEventName {\n  DashboardView = 'dashboard-view',\n  DataRequest = 'data-request',\n}\n\n/**\n * Describes the payload of a dashboard view event.\n *\n * @public\n */\nexport interface DashboardViewEventPayload extends DashboardInfo {\n  eventName: MetaAnalyticsEventName.DashboardView;\n}\n\n/**\n * Describes the payload of a data request event.\n *\n * @public\n */\nexport interface DataRequestEventPayload extends DataRequestInfo {\n  eventName: MetaAnalyticsEventName.DataRequest;\n  totalQueries?: number;\n  cachedQueries?: number;\n}\n\n/**\n * Describes the meta analytics payload passed with the {@link MetaAnalyticsEvent}\n *\n * @public\n */\nexport type MetaAnalyticsEventPayload = DashboardViewEventPayload | DataRequestEventPayload;\n\n/**\n * Describes meta analytics event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport interface MetaAnalyticsEvent extends EchoEvent<EchoEventType.MetaAnalytics, MetaAnalyticsEventPayload> {}\n\n/**\n * Describes the payload of a pageview event.\n *\n * @public\n */\nexport interface PageviewEchoEventPayload {\n  page: string;\n}\n\n/**\n * Describes pageview event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type PageviewEchoEvent = EchoEvent<EchoEventType.Pageview, PageviewEchoEventPayload>;\n\n/**\n * Describes the payload of a user interaction event.\n *\n * @public\n */\nexport interface InteractionEchoEventPayload {\n  interactionName: string;\n  properties?: Record<string, any>;\n}\n\n/**\n * Describes interaction event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type InteractionEchoEvent = EchoEvent<EchoEventType.Interaction, InteractionEchoEventPayload>;\n\n/**\n * Describes the payload of an experimentview event.\n *\n * @public\n */\nexport interface ExperimentViewEchoEventPayload {\n  experimentId: string;\n  experimentGroup: string;\n  experimentVariant: string;\n}\n\n/**\n * Describes experimentview event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type ExperimentViewEchoEvent = EchoEvent<EchoEventType.ExperimentView, ExperimentViewEchoEventPayload>;\n\n/**\n * Pageview event typeguard.\n *\n * @public\n */\nexport const isPageviewEvent = (event: EchoEvent): event is PageviewEchoEvent => {\n  return Boolean(event.payload.page);\n};\n\n/**\n * Interaction event typeguard.\n *\n * @public\n */\nexport const isInteractionEvent = (event: EchoEvent): event is InteractionEchoEvent => {\n  return Boolean(event.payload.interactionName);\n};\n\n/**\n * Experimentview event typeguard.\n *\n * @public\n */\nexport const isExperimentViewEvent = (event: EchoEvent): event is ExperimentViewEchoEvent => {\n  return Boolean(event.payload.experimentId);\n};\n","// @ts-ignore\nimport System from 'systemjs/dist/system.js';\n\nimport { PanelPlugin } from '@grafana/data';\n\nimport { config } from '../config';\n\n// @ts-ignore\n\n/**\n * Option to specify a plugin css that should be applied for the dark\n * and the light theme.\n *\n * @public\n */\nexport interface PluginCssOptions {\n  light: string;\n  dark: string;\n}\n\n/**\n * @internal\n */\nexport const SystemJS = System;\n\n/**\n * Use this to load css for a Grafana plugin by specifying a {@link PluginCssOptions}\n * containing styling for the dark and the light theme.\n *\n * @param options - plugin styling for light and dark theme.\n * @public\n */\nexport function loadPluginCss(options: PluginCssOptions): Promise<any> {\n  const theme = config.bootData.user.lightTheme ? options.light : options.dark;\n  return SystemJS.import(`${theme}!css`);\n}\n\ninterface PluginImportUtils {\n  importPanelPlugin: (id: string) => Promise<PanelPlugin>;\n  getPanelPluginFromCache: (id: string) => PanelPlugin | undefined;\n}\n\nlet pluginImportUtils: PluginImportUtils | undefined;\n\nexport function setPluginImportUtils(utils: PluginImportUtils) {\n  if (pluginImportUtils) {\n    throw new Error('pluginImportUtils should only be set once, when Grafana is starting.');\n  }\n\n  pluginImportUtils = utils;\n}\n\nexport function getPluginImportUtils(): PluginImportUtils {\n  if (!pluginImportUtils) {\n    throw new Error('pluginImportUtils can only be used after Grafana instance has started.');\n  }\n\n  return pluginImportUtils;\n}\n","import { config } from '../config';\nimport { locationService } from '../services';\nimport { getEchoSrv, EchoEventType } from '../services/EchoSrv';\n\nimport {\n  ExperimentViewEchoEvent,\n  InteractionEchoEvent,\n  MetaAnalyticsEvent,\n  MetaAnalyticsEventPayload,\n  PageviewEchoEvent,\n} from './types';\n\n/**\n * Helper function to report meta analytics to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportMetaAnalytics = (payload: MetaAnalyticsEventPayload) => {\n  getEchoSrv().addEvent<MetaAnalyticsEvent>({\n    type: EchoEventType.MetaAnalytics,\n    payload,\n  });\n};\n\n/**\n * Helper function to report pageview events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportPageview = () => {\n  const location = locationService.getLocation();\n  const page = `${config.appSubUrl ?? ''}${location.pathname}${location.search}${location.hash}`;\n  getEchoSrv().addEvent<PageviewEchoEvent>({\n    type: EchoEventType.Pageview,\n    payload: {\n      page,\n    },\n  });\n};\n\n/**\n * Helper function to report interaction events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportInteraction = (interactionName: string, properties?: Record<string, unknown>) => {\n  getEchoSrv().addEvent<InteractionEchoEvent>({\n    type: EchoEventType.Interaction,\n    payload: {\n      interactionName,\n      properties,\n    },\n  });\n};\n\n/**\n * Helper function to report experimentview events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportExperimentView = (id: string, group: string, variant: string) => {\n  getEchoSrv().addEvent<ExperimentViewEchoEvent>({\n    type: EchoEventType.ExperimentView,\n    payload: {\n      experimentId: id,\n      experimentGroup: group,\n      experimentVariant: variant,\n    },\n  });\n};\n","import { config } from '../config';\n\nexport const featureEnabled = (feature: string): boolean => {\n  const { enabledFeatures } = config.licenseInfo;\n  return enabledFeatures && enabledFeatures[feature];\n};\n","import { captureMessage, captureException, Severity as LogLevel } from '@sentry/browser';\n\nimport { faro, LogLevel as GrafanaLogLevel } from '@grafana/faro-web-sdk';\n\nimport { config } from '../config';\n\nexport { LogLevel };\n\n// a bit stricter than what Sentry allows\ntype Contexts = Record<string, Record<string, number | string | Record<string, string | number>>>;\n\n/**\n * Log a message at INFO level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logInfo(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.INFO,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Info,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log a message at WARNING level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logWarning(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.WARN,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Warning,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log a message at DEBUG level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logDebug(message: string, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushLog([message], {\n      level: GrafanaLogLevel.DEBUG,\n      context: contexts,\n    });\n  }\n  if (config.sentry.enabled) {\n    captureMessage(message, {\n      level: LogLevel.Debug,\n      contexts,\n    });\n  }\n}\n\n/**\n * Log an error. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logError(err: Error, contexts?: Contexts) {\n  if (config.grafanaJavascriptAgent.enabled) {\n    faro.api.pushError(err);\n  }\n  if (config.sentry.enabled) {\n    captureException(err, { contexts });\n  }\n}\n","import { DataQueryError } from '@grafana/data';\n\n/**\n * Convert an object into a DataQueryError -- if this is an HTTP response,\n * it will put the correct values in the error field\n *\n * @public\n */\nexport function toDataQueryError(err: DataQueryError | string | unknown): DataQueryError {\n  const error: DataQueryError = err || {};\n\n  if (!error.message) {\n    if (typeof err === 'string') {\n      return { message: err };\n    }\n\n    let message = 'Query error';\n    if (error.message) {\n      message = error.message;\n    } else if (error.data && error.data.message && error.data?.message !== 'Query data error') {\n      message = error.data.message;\n    } else if (error?.data?.message === 'Query data error' && error?.data?.error) {\n      message = error.data.error;\n    } else if (error.data && error.data.error) {\n      message = error.data.error;\n    } else if (error.status) {\n      message = `Query error: ${error.status} ${error.statusText}`;\n    }\n    error.message = message;\n  }\n\n  return error;\n}\n","import {\n  DataQueryResponse,\n  KeyValue,\n  LoadingState,\n  DataQueryError,\n  TimeSeries,\n  TableData,\n  toDataFrame,\n  DataFrame,\n  MetricFindValue,\n  FieldType,\n  DataQuery,\n  DataFrameJSON,\n  dataFrameFromJSON,\n  QueryResultMetaNotice,\n} from '@grafana/data';\n\nimport { FetchError, FetchResponse } from '../services';\n\nimport { HealthCheckResultDetails } from './DataSourceWithBackend';\nimport { toDataQueryError } from './toDataQueryError';\n\nexport const cachedResponseNotice: QueryResultMetaNotice = { severity: 'info', text: 'Cached response' };\n\n/**\n * Single response object from a backend data source. Properties are optional but response should contain at least\n * an error or a some data (but can contain both). Main way to send data is with dataframes attribute as series and\n * tables data attributes are legacy formats.\n *\n * @internal\n */\nexport interface DataResponse {\n  error?: string;\n  refId?: string;\n  frames?: DataFrameJSON[];\n  status?: number;\n\n  // Legacy TSDB format...\n  series?: TimeSeries[];\n  tables?: TableData[];\n}\n\n/**\n * This is the type of response expected form backend datasource.\n *\n * @internal\n */\nexport interface BackendDataSourceResponse {\n  results: KeyValue<DataResponse>;\n}\n\n/**\n * Parse the results from /api/ds/query into a DataQueryResponse\n *\n * @param res - the HTTP response data.\n * @param queries - optional DataQuery array that will order the response based on the order of query refId's.\n *\n * @public\n */\nexport function toDataQueryResponse(\n  res:\n    | { data: BackendDataSourceResponse | undefined }\n    | FetchResponse<BackendDataSourceResponse | undefined>\n    | DataQueryError,\n  queries?: DataQuery[]\n): DataQueryResponse {\n  const rsp: DataQueryResponse = { data: [], state: LoadingState.Done };\n  // If the response isn't in a correct shape we just ignore the data and pass empty DataQueryResponse.\n  if ((res as FetchResponse).data?.results) {\n    const results = (res as FetchResponse).data.results;\n    const refIDs = queries?.length ? queries.map((q) => q.refId) : Object.keys(results);\n    const cachedResponse = isCachedResponse(res as FetchResponse);\n    const data: DataResponse[] = [];\n\n    for (const refId of refIDs) {\n      const dr = results[refId];\n      if (!dr) {\n        continue;\n      }\n      dr.refId = refId;\n      data.push(dr);\n    }\n\n    for (const dr of data) {\n      if (dr.error) {\n        if (!rsp.error) {\n          rsp.error = {\n            refId: dr.refId,\n            message: dr.error,\n            status: dr.status,\n          };\n        }\n        if (rsp.errors) {\n          rsp.errors.push({ refId: dr.refId, message: dr.error, status: dr.status });\n        } else {\n          rsp.errors = [{ refId: dr.refId, message: dr.error, status: dr.status }];\n        }\n        rsp.state = LoadingState.Error;\n      }\n\n      if (dr.frames?.length) {\n        for (let js of dr.frames) {\n          if (cachedResponse) {\n            js = addCacheNotice(js);\n          }\n          const df = dataFrameFromJSON(js);\n          if (!df.refId) {\n            df.refId = dr.refId;\n          }\n          rsp.data.push(df);\n        }\n        continue; // the other tests are legacy\n      }\n\n      if (dr.series?.length) {\n        for (const s of dr.series) {\n          if (!s.refId) {\n            s.refId = dr.refId;\n          }\n          rsp.data.push(toDataFrame(s));\n        }\n      }\n\n      if (dr.tables?.length) {\n        for (const s of dr.tables) {\n          if (!s.refId) {\n            s.refId = dr.refId;\n          }\n          rsp.data.push(toDataFrame(s));\n        }\n      }\n    }\n  }\n\n  // When it is not an OK response, make sure the error gets added\n  if ((res as FetchResponse).status && (res as FetchResponse).status !== 200) {\n    if (rsp.state !== LoadingState.Error) {\n      rsp.state = LoadingState.Error;\n    }\n    if (!rsp.error) {\n      rsp.error = toDataQueryError(res);\n    }\n  }\n\n  return rsp;\n}\n\nfunction isCachedResponse(res: FetchResponse<BackendDataSourceResponse | undefined>): boolean {\n  const headers = res?.headers;\n  if (!headers || !headers.get) {\n    return false;\n  }\n  return headers.get('X-Cache') === 'HIT';\n}\n\nfunction addCacheNotice(frame: DataFrameJSON): DataFrameJSON {\n  return {\n    ...frame,\n    schema: {\n      ...frame.schema,\n      fields: [...(frame.schema?.fields ?? [])],\n      meta: {\n        ...frame.schema?.meta,\n        notices: [...(frame.schema?.meta?.notices ?? []), cachedResponseNotice],\n        isCachedResponse: true,\n      },\n    },\n  };\n}\n\nexport interface TestingStatus {\n  message?: string | null;\n  status?: string | null;\n  details?: HealthCheckResultDetails;\n}\n\n/**\n * Data sources using api/ds/query to test data sources can use this function to\n * handle errors and convert them to TestingStatus object.\n *\n * If possible, this should be avoided in favor of implementing /health endpoint\n * and testing data source with DataSourceWithBackend.testDataSource()\n *\n * Re-thrown errors are handled by testDataSource() in public/app/features/datasources/state/actions.ts\n *\n * @returns {TestingStatus}\n */\nexport function toTestingStatus(err: FetchError): TestingStatus {\n  const queryResponse = toDataQueryResponse(err);\n  // POST api/ds/query errors returned as { message: string, error: string } objects\n  if (queryResponse.error?.data?.message) {\n    return {\n      status: 'error',\n      message: queryResponse.error.data.message,\n      details: queryResponse.error?.data?.error ? { message: queryResponse.error.data.error } : undefined,\n    };\n  }\n  // POST api/ds/query errors returned in results object\n  else if (queryResponse.error?.refId && queryResponse.error?.message) {\n    return {\n      status: 'error',\n      message: queryResponse.error.message,\n    };\n  }\n\n  throw err;\n}\n\n/**\n * Return the first string or non-time field as the value\n *\n * @beta\n */\nexport function frameToMetricFindValue(frame: DataFrame): MetricFindValue[] {\n  if (!frame || !frame.length) {\n    return [];\n  }\n\n  const values: MetricFindValue[] = [];\n  let field = frame.fields.find((f) => f.type === FieldType.string);\n  if (!field) {\n    field = frame.fields.find((f) => f.type !== FieldType.time);\n  }\n  if (field) {\n    for (let i = 0; i < field.values.length; i++) {\n      values.push({ text: '' + field.values.get(i) });\n    }\n  }\n  return values;\n}\n","import { lastValueFrom, merge, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  dataFrameToJSON,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourceRef,\n  getDataSourceRef,\n  makeClassES5Compatible,\n  parseLiveChannelAddress,\n  ScopedVars,\n} from '@grafana/data';\n\nimport { config } from '../config';\nimport {\n  BackendSrvRequest,\n  FetchResponse,\n  getBackendSrv,\n  getDataSourceSrv,\n  getGrafanaLiveSrv,\n  StreamingFrameAction,\n  StreamingFrameOptions,\n} from '../services';\n\nimport { BackendDataSourceResponse, toDataQueryResponse } from './queryResponse';\n\n/**\n * @internal\n */\nexport const ExpressionDatasourceRef = Object.freeze({\n  type: '__expr__',\n  uid: '__expr__',\n  name: 'Expression',\n});\n\n/**\n * @internal\n */\nexport function isExpressionReference(ref?: DataSourceRef | string | null): boolean {\n  if (!ref) {\n    return false;\n  }\n  const v = typeof ref === 'string' ? ref : ref.type;\n  return v === ExpressionDatasourceRef.type || v === ExpressionDatasourceRef.name || v === '-100'; // -100 was a legacy accident that should be removed\n}\n\nexport class HealthCheckError extends Error {\n  details: HealthCheckResultDetails;\n\n  constructor(message: string, details: HealthCheckResultDetails) {\n    super(message);\n    this.details = details;\n    this.name = 'HealthCheckError';\n  }\n}\n\n/**\n * Describes the current health status of a data source plugin.\n *\n * @public\n */\nexport enum HealthStatus {\n  Unknown = 'UNKNOWN',\n  OK = 'OK',\n  Error = 'ERROR',\n}\n\n// Internal for now\nenum PluginRequestHeaders {\n  PluginID = 'X-Plugin-Id', // can be used for routing\n  DatasourceUID = 'X-Datasource-Uid', // can be used for routing/ load balancing\n  DashboardUID = 'X-Dashboard-Uid', // mainly useful for debuging slow queries\n  PanelID = 'X-Panel-Id', // mainly useful for debuging slow queries\n  QueryGroupID = 'X-Query-Group-Id', // mainly useful to find related queries with query splitting\n  FromExpression = 'X-Grafana-From-Expr', // used by datasources to identify expression queries\n}\n\n/**\n * Describes the details in the payload returned when checking the health of a data source\n * plugin.\n *\n * If the 'message' key exists, this will be displayed in the error message in DataSourceSettingsPage\n * If the 'verboseMessage' key exists, this will be displayed in the expandable details in the error message in DataSourceSettingsPage\n *\n * @public\n */\nexport type HealthCheckResultDetails = Record<string, unknown> | undefined;\n\n/**\n * Describes the payload returned when checking the health of a data source\n * plugin.\n *\n * @public\n */\nexport interface HealthCheckResult {\n  status: HealthStatus;\n  message: string;\n  details: HealthCheckResultDetails;\n}\n\n/**\n * Extend this class to implement a data source plugin that is depending on the Grafana\n * backend API.\n *\n * @public\n */\nclass DataSourceWithBackend<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<TOptions>) {\n    super(instanceSettings);\n  }\n\n  /**\n   * Ideally final -- any other implementation may not work as expected\n   */\n  query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse> {\n    const { intervalMs, maxDataPoints, queryCachingTTL, range, requestId, hideFromInspector = false } = request;\n    let targets = request.targets;\n\n    if (this.filterQuery) {\n      targets = targets.filter((q) => this.filterQuery!(q));\n    }\n\n    let hasExpr = false;\n    const pluginIDs = new Set<string>();\n    const dsUIDs = new Set<string>();\n    const queries = targets.map((q) => {\n      let datasource = this.getRef();\n      let datasourceId = this.id;\n      let shouldApplyTemplateVariables = true;\n\n      if (isExpressionReference(q.datasource)) {\n        hasExpr = true;\n        return {\n          ...q,\n          datasource: ExpressionDatasourceRef,\n        };\n      }\n\n      if (q.datasource) {\n        const ds = getDataSourceSrv().getInstanceSettings(q.datasource, request.scopedVars);\n\n        if (!ds) {\n          throw new Error(`Unknown Datasource: ${JSON.stringify(q.datasource)}`);\n        }\n\n        const dsRef = ds.rawRef ?? getDataSourceRef(ds);\n        const dsId = ds.id;\n        if (dsRef.uid !== datasource.uid || datasourceId !== dsId) {\n          datasource = dsRef;\n          datasourceId = dsId;\n          // If the query is using a different datasource, we would need to retrieve the datasource\n          // instance (async) and apply the template variables but it seems it's not necessary for now.\n          shouldApplyTemplateVariables = false;\n        }\n      }\n      if (datasource.type?.length) {\n        pluginIDs.add(datasource.type);\n      }\n      if (datasource.uid?.length) {\n        dsUIDs.add(datasource.uid);\n      }\n      return {\n        ...(shouldApplyTemplateVariables ? this.applyTemplateVariables(q, request.scopedVars) : q),\n        datasource,\n        datasourceId, // deprecated!\n        intervalMs,\n        maxDataPoints,\n        queryCachingTTL,\n      };\n    });\n\n    // Return early if no queries exist\n    if (!queries.length) {\n      return of({ data: [] });\n    }\n\n    const body: any = { queries };\n\n    if (range) {\n      body.range = range;\n      body.from = range.from.valueOf().toString();\n      body.to = range.to.valueOf().toString();\n    }\n\n    if (config.featureToggles.queryOverLive) {\n      return getGrafanaLiveSrv().getQueryData({\n        request,\n        body,\n      });\n    }\n\n    const headers: Record<string, string> = {};\n    headers[PluginRequestHeaders.PluginID] = Array.from(pluginIDs).join(', ');\n    headers[PluginRequestHeaders.DatasourceUID] = Array.from(dsUIDs).join(', ');\n\n    let url = '/api/ds/query';\n    if (hasExpr) {\n      headers[PluginRequestHeaders.FromExpression] = 'true';\n      url += '?expression=true';\n    }\n\n    if (request.dashboardUID) {\n      headers[PluginRequestHeaders.DashboardUID] = request.dashboardUID;\n    }\n    if (request.panelId) {\n      headers[PluginRequestHeaders.PanelID] = `${request.panelId}`;\n    }\n    if (request.queryGroupId) {\n      headers[PluginRequestHeaders.QueryGroupID] = `${request.queryGroupId}`;\n    }\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url,\n        method: 'POST',\n        data: body,\n        requestId,\n        hideFromInspector,\n        headers,\n      })\n      .pipe(\n        switchMap((raw) => {\n          const rsp = toDataQueryResponse(raw, queries as DataQuery[]);\n          // Check if any response should subscribe to a live stream\n          if (rsp.data?.length && rsp.data.find((f: DataFrame) => f.meta?.channel)) {\n            return toStreamingDataResponse(rsp, request, this.streamOptionsProvider);\n          }\n          return of(rsp);\n        }),\n        catchError((err) => {\n          return of(toDataQueryResponse(err));\n        })\n      );\n  }\n\n  /** Get request headers with plugin ID+UID set */\n  protected getRequestHeaders(): Record<string, string> {\n    const headers: Record<string, string> = {};\n    headers[PluginRequestHeaders.PluginID] = this.type;\n    headers[PluginRequestHeaders.DatasourceUID] = this.uid;\n    return headers;\n  }\n\n  /**\n   * Apply template variables for explore\n   */\n  interpolateVariablesInQueries(queries: TQuery[], scopedVars: ScopedVars | {}): TQuery[] {\n    return queries.map((q) => this.applyTemplateVariables(q, scopedVars) as TQuery);\n  }\n\n  /**\n   * Override to apply template variables.  The result is usually also `TQuery`, but sometimes this can\n   * be used to modify the query structure before sending to the backend.\n   *\n   * NOTE: if you do modify the structure or use template variables, alerting queries may not work\n   * as expected\n   *\n   * @virtual\n   */\n  applyTemplateVariables(query: TQuery, scopedVars: ScopedVars): Record<string, any> {\n    return query;\n  }\n\n  /**\n   * Optionally override the streaming behavior\n   */\n  streamOptionsProvider: StreamOptionsProvider<TQuery> = standardStreamOptionsProvider;\n\n  /**\n   * Make a GET request to the datasource resource path\n   */\n  async getResource<T = any>(\n    path: string,\n    params?: BackendSrvRequest['params'],\n    options?: Partial<BackendSrvRequest>\n  ): Promise<T> {\n    const headers = this.getRequestHeaders();\n    const result = await lastValueFrom(\n      getBackendSrv().fetch<T>({\n        ...options,\n        method: 'GET',\n        headers: options?.headers ? { ...options.headers, ...headers } : headers,\n        params: params ?? options?.params,\n        url: `/api/datasources/uid/${this.uid}/resources/${path}`,\n      })\n    );\n    return result.data;\n  }\n\n  /**\n   * Send a POST request to the datasource resource path\n   */\n  async postResource<T = any>(\n    path: string,\n    data?: BackendSrvRequest['data'],\n    options?: Partial<BackendSrvRequest>\n  ): Promise<T> {\n    const headers = this.getRequestHeaders();\n    const result = await lastValueFrom(\n      getBackendSrv().fetch<T>({\n        ...options,\n        method: 'POST',\n        headers: options?.headers ? { ...options.headers, ...headers } : headers,\n        data: data ?? { ...data },\n        url: `/api/datasources/uid/${this.uid}/resources/${path}`,\n      })\n    );\n    return result.data;\n  }\n\n  /**\n   * Run the datasource healthcheck\n   */\n  async callHealthCheck(): Promise<HealthCheckResult> {\n    return lastValueFrom(\n      getBackendSrv().fetch<HealthCheckResult>({\n        method: 'GET',\n        url: `/api/datasources/uid/${this.uid}/health`,\n        showErrorAlert: false,\n        headers: this.getRequestHeaders(),\n      })\n    )\n      .then((v: FetchResponse) => v.data)\n      .catch((err) => err.data);\n  }\n\n  /**\n   * Checks the plugin health\n   * see public/app/features/datasources/state/actions.ts for what needs to be returned here\n   */\n  async testDatasource(): Promise<any> {\n    return this.callHealthCheck().then((res) => {\n      if (res.status === HealthStatus.OK) {\n        return {\n          status: 'success',\n          message: res.message,\n        };\n      }\n\n      throw new HealthCheckError(res.message, res.details);\n    });\n  }\n}\n\n/**\n * @internal exported for tests\n */\nexport function toStreamingDataResponse<TQuery extends DataQuery = DataQuery>(\n  rsp: DataQueryResponse,\n  req: DataQueryRequest<TQuery>,\n  getter: (req: DataQueryRequest<TQuery>, frame: DataFrame) => Partial<StreamingFrameOptions>\n): Observable<DataQueryResponse> {\n  const live = getGrafanaLiveSrv();\n  if (!live) {\n    return of(rsp); // add warning?\n  }\n\n  const staticdata: DataFrame[] = [];\n  const streams: Array<Observable<DataQueryResponse>> = [];\n  for (const f of rsp.data) {\n    const addr = parseLiveChannelAddress(f.meta?.channel);\n    if (addr) {\n      const frame: DataFrame = f;\n      streams.push(\n        live.getDataStream({\n          addr,\n          buffer: getter(req, frame),\n          frame: dataFrameToJSON(f),\n        })\n      );\n    } else {\n      staticdata.push(f);\n    }\n  }\n  if (staticdata.length) {\n    streams.push(of({ ...rsp, data: staticdata }));\n  }\n  if (streams.length === 1) {\n    return streams[0]; // avoid merge wrapper\n  }\n  return merge(...streams);\n}\n\n/**\n * This allows data sources to customize the streaming connection query\n *\n * @public\n */\nexport type StreamOptionsProvider<TQuery extends DataQuery = DataQuery> = (\n  request: DataQueryRequest<TQuery>,\n  frame: DataFrame\n) => Partial<StreamingFrameOptions>;\n\n/**\n * @public\n */\nexport const standardStreamOptionsProvider: StreamOptionsProvider = (request: DataQueryRequest, frame: DataFrame) => {\n  const opts: Partial<StreamingFrameOptions> = {\n    maxLength: request.maxDataPoints ?? 500,\n    action: StreamingFrameAction.Append,\n  };\n\n  // For recent queries, clamp to the current time range\n  if (request.rangeRaw?.to === 'now') {\n    opts.maxDelta = request.range.to.valueOf() - request.range.from.valueOf();\n  }\n  return opts;\n};\n\n//@ts-ignore\nDataSourceWithBackend = makeClassES5Compatible(DataSourceWithBackend);\n\nexport { DataSourceWithBackend };\n","import React from 'react';\n\nimport { AbsoluteTimeRange, FieldConfigSource, PanelData } from '@grafana/data';\n\n/**\n * Describes the properties that can be passed to the PanelRenderer.\n *\n * @typeParam P - Panel options type for the panel being rendered.\n * @typeParam F - Field options type for the panel being rendered.\n *\n * @internal\n */\nexport interface PanelRendererProps<P extends object = any, F extends object = any> {\n  data?: PanelData;\n  pluginId: string;\n  title: string;\n  options?: Partial<P>;\n  onOptionsChange?: (options: P) => void;\n  onFieldConfigChange?: (config: FieldConfigSource<F>) => void;\n  onChangeTimeRange?: (timeRange: AbsoluteTimeRange) => void;\n  fieldConfig?: FieldConfigSource<Partial<F>>;\n  timeZone?: string;\n  width: number;\n  height: number;\n}\n\n/**\n * Simplified type with defaults that describes the PanelRenderer.\n *\n * @internal\n */\nexport type PanelRendererType<P extends object = any, F extends object = any> = React.ComponentType<\n  PanelRendererProps<P, F>\n>;\n\n/**\n * PanelRenderer component that will be set via the {@link setPanelRenderer} function\n * when Grafana starts. The implementation being used during runtime lives in Grafana\n * core.\n *\n * @internal\n */\nexport let PanelRenderer: PanelRendererType = () => {\n  return <div>PanelRenderer can only be used after Grafana instance has been started.</div>;\n};\n\n/**\n * Used to bootstrap the PanelRenderer during application start so the PanelRenderer\n * is exposed via runtime.\n *\n * @internal\n */\nexport function setPanelRenderer(renderer: PanelRendererType) {\n  PanelRenderer = renderer;\n}\n","import React from 'react';\n\nimport { FieldConfigSource, PanelData } from '@grafana/data';\n\n/**\n * Describes the properties that can be passed to the PanelDataErrorView.\n *\n * @alpha\n */\nexport interface PanelDataErrorViewProps {\n  message?: string;\n  panelId: number;\n  data: PanelData;\n  fieldConfig?: FieldConfigSource;\n  needsTimeField?: boolean;\n  needsNumberField?: boolean;\n  needsStringField?: boolean;\n  // suggestions?: VisualizationSuggestion[]; <<< for sure optional\n}\n\n/**\n * Simplified type with defaults that describes the PanelDataErrorView.\n *\n * @internal\n */\nexport type PanelDataErrorViewType = React.ComponentType<PanelDataErrorViewProps>;\n\n/**\n * PanelDataErrorView allows panels to show a consistent error message when\n * the result structure does not meet expected criteria\n *\n * @alpha\n */\nexport let PanelDataErrorView: PanelDataErrorViewType = ({ message }) => {\n  return <div>Unable to render data: {message}.</div>;\n};\n\n/**\n * Used to bootstrap the PanelDataErrorView during application start so the\n * PanelDataErrorView is exposed via runtime.\n *\n * @internal\n */\nexport function setPanelDataErrorView(renderer: PanelDataErrorViewType) {\n  PanelDataErrorView = renderer;\n}\n","import { Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataSourceApi, PanelData, QueryRunner } from '@grafana/data';\n\nlet factory: QueryRunnerFactory | undefined;\n\n/**\n * @internal\n */\nexport type QueryRunnerFactory = () => QueryRunner;\n\n/**\n * Used to bootstrap the {@link createQueryRunner} during application start.\n *\n * @internal\n */\nexport const setQueryRunnerFactory = (instance: QueryRunnerFactory): void => {\n  if (factory) {\n    throw new Error('Runner should only be set when Grafana is starting.');\n  }\n  factory = instance;\n};\n\n/**\n * Used to create QueryRunner instances from outside the core Grafana application.\n * This is helpful to be able to create a QueryRunner to execute queries in e.g. an app plugin.\n *\n * @internal\n */\nexport const createQueryRunner = (): QueryRunner => {\n  if (!factory) {\n    throw new Error('`createQueryRunner` can only be used after Grafana instance has started.');\n  }\n  return factory();\n};\n\ntype RunRequestFn = (\n  datasource: DataSourceApi,\n  request: DataQueryRequest,\n  queryFunction?: typeof datasource.query\n) => Observable<PanelData>;\n\nlet runRequest: RunRequestFn | undefined;\n\n/**\n * Used to exspose runRequest implementation to libraries, i.e. @grafana/scenes\n *\n * @internal\n */\nexport function setRunRequest(fn: RunRequestFn): void {\n  if (runRequest) {\n    throw new Error('runRequest function should only be set once, when Grafana is starting.');\n  }\n  runRequest = fn;\n}\n\nexport function getRunRequest(): RunRequestFn {\n  if (!runRequest) {\n    throw new Error('getRunRequest can only be used after Grafana instance has started.');\n  }\n  return runRequest;\n}\n","import React from 'react';\n\nimport { NavModelItem, PageLayoutType } from '@grafana/data';\n\nexport interface PageInfoItem {\n  label: string;\n  value: React.ReactNode;\n}\n\nexport interface PluginPageProps {\n  /** Can be used to place actions inline with the heading */\n  info?: PageInfoItem[];\n  /** Can be used to place actions inline with the heading */\n  actions?: React.ReactNode;\n  /** Can be used to customize rendering of title */\n  renderTitle?: (title: string) => React.ReactNode;\n  /** Shown under main heading */\n  subTitle?: React.ReactNode;\n  pageNav?: NavModelItem;\n  children: React.ReactNode;\n  layout?: PageLayoutType;\n}\n\nexport type PluginPageType = React.ComponentType<PluginPageProps>;\n\nexport let PluginPage: PluginPageType = ({ children }) => {\n  return <div>{children}</div>;\n};\n\n/**\n * Used to bootstrap the PluginPage during application start\n * is exposed via runtime.\n *\n * @internal\n */\nexport function setPluginPage(component: PluginPageType) {\n  PluginPage = component;\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport {\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ActionMeta, HorizontalGroup, PluginSignatureBadge, Select } from '@grafana/ui';\n\nimport { getDataSourceSrv } from '../services/dataSourceSrv';\n\nimport { ExpressionDatasourceRef } from './../utils/DataSourceWithBackend';\n\n/**\n * Component props description for the {@link DataSourcePicker}\n *\n * @internal\n */\nexport interface DataSourcePickerProps {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  current: DataSourceRef | string | null; // uid\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  placeholder?: string;\n  tracing?: boolean;\n  mixed?: boolean;\n  dashboard?: boolean;\n  metrics?: boolean;\n  type?: string | string[];\n  annotations?: boolean;\n  variables?: boolean;\n  alerting?: boolean;\n  pluginId?: string;\n  /** If true,we show only DSs with logs; and if true, pluginId shouldnt be passed in */\n  logs?: boolean;\n  // If set to true and there is no value select will be empty, otherwise it will preselect default data source\n  noDefault?: boolean;\n  width?: number;\n  inputId?: string;\n  filter?: (dataSource: DataSourceInstanceSettings) => boolean;\n  onClear?: () => void;\n  invalid?: boolean;\n  disabled?: boolean;\n  isLoading?: boolean;\n}\n\n/**\n * Component state description for the {@link DataSourcePicker}\n *\n * @internal\n */\nexport interface DataSourcePickerState {\n  error?: string;\n}\n\n/**\n * Component to be able to select a datasource from the list of installed and enabled\n * datasources in the current Grafana instance.\n *\n * @internal\n */\nexport class DataSourcePicker extends PureComponent<DataSourcePickerProps, DataSourcePickerState> {\n  dataSourceSrv = getDataSourceSrv();\n\n  static defaultProps: Partial<DataSourcePickerProps> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: 'Select data source',\n  };\n\n  state: DataSourcePickerState = {};\n\n  constructor(props: DataSourcePickerProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { current } = this.props;\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(current);\n    if (!dsSettings) {\n      this.setState({ error: 'Could not find data source ' + current });\n    }\n  }\n\n  onChange = (item: SelectableValue<string>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && this.props.onClear) {\n      this.props.onClear();\n      return;\n    }\n\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(item.value);\n\n    if (dsSettings) {\n      this.props.onChange(dsSettings);\n      this.setState({ error: undefined });\n    }\n  };\n\n  private getCurrentValue(): SelectableValue<string> | undefined {\n    const { current, hideTextValue, noDefault } = this.props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    const ds = this.dataSourceSrv.getInstanceSettings(current);\n\n    if (ds) {\n      return {\n        label: ds.name.slice(0, 37),\n        value: ds.uid,\n        imgUrl: ds.meta.info.logos.small,\n        hideText: hideTextValue,\n        meta: ds.meta,\n      };\n    }\n\n    const uid = getDataSourceUID(current);\n\n    if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n      return { label: uid, value: uid, hideText: hideTextValue };\n    }\n\n    return {\n      label: (uid ?? 'no name') + ' - not found',\n      value: uid ?? undefined,\n      imgUrl: '',\n      hideText: hideTextValue,\n    };\n  }\n\n  getDataSourceOptions() {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      this.props;\n\n    const options = this.dataSourceSrv\n      .getList({\n        alerting,\n        tracing,\n        metrics,\n        logs,\n        dashboard,\n        mixed,\n        variables,\n        annotations,\n        pluginId,\n        filter,\n        type,\n      })\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    return options;\n  }\n\n  render() {\n    const {\n      autoFocus,\n      onBlur,\n      onClear,\n      openMenuOnFocus,\n      placeholder,\n      width,\n      inputId,\n      disabled = false,\n      isLoading = false,\n    } = this.props;\n    const { error } = this.state;\n    const options = this.getDataSourceOptions();\n    const value = this.getCurrentValue();\n    const isClearable = typeof onClear === 'function';\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          isLoading={isLoading}\n          disabled={disabled}\n          aria-label={selectors.components.DataSourcePicker.inputV2}\n          inputId={inputId || 'data-source-picker'}\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={isClearable}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          width={width}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value ?? null}\n          invalid={Boolean(error) || Boolean(this.props.invalid)}\n          getOptionLabel={(o) => {\n            if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n              return (\n                <HorizontalGroup align=\"center\" justify=\"space-between\" height=\"auto\">\n                  <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n                </HorizontalGroup>\n              );\n            }\n            return o.label || '';\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import { DataSourceInstanceSettings, PluginMeta } from '@grafana/data';\n\nimport { config } from '../../config';\n\nexport type PluginEventProperties = {\n  grafana_version: string;\n  plugin_type: string;\n  plugin_version: string;\n  plugin_id: string;\n  plugin_name: string;\n};\n\nexport function createPluginEventProperties(meta: PluginMeta): PluginEventProperties {\n  return {\n    grafana_version: config.buildInfo.version,\n    plugin_type: String(meta.type),\n    plugin_version: meta.info.version,\n    plugin_id: meta.id,\n    plugin_name: meta.name,\n  };\n}\n\nexport type DataSourcePluginEventProperties = PluginEventProperties & {\n  datasource_uid: string;\n};\n\nexport function createDataSourcePluginEventProperties(\n  instanceSettings: DataSourceInstanceSettings\n): DataSourcePluginEventProperties {\n  return {\n    ...createPluginEventProperties(instanceSettings.meta),\n    datasource_uid: instanceSettings.uid,\n  };\n}\n","import { useMemo } from 'react';\n\nimport { isDataSourcePluginContext, usePluginContext } from '@grafana/data';\n\nimport { reportInteraction } from '../utils';\n\nimport { createDataSourcePluginEventProperties, createPluginEventProperties } from './eventProperties';\n\nconst namePrefix = 'grafana_plugin_';\n\nexport function usePluginInteractionReporter(): typeof reportInteraction {\n  const context = usePluginContext();\n\n  return useMemo(() => {\n    const info = isDataSourcePluginContext(context)\n      ? createDataSourcePluginEventProperties(context.instanceSettings)\n      : createPluginEventProperties(context.meta);\n\n    return (interactionName: string, properties?: Record<string, unknown>) => {\n      if (!validInteractionName(interactionName)) {\n        throw new Error(`Interactions reported in plugins should start with: \"${namePrefix}\".`);\n      }\n      return reportInteraction(interactionName, { ...properties, ...info });\n    };\n  }, [context]);\n}\n\nfunction validInteractionName(interactionName: string): boolean {\n  return interactionName.startsWith(namePrefix) && interactionName.length > namePrefix.length;\n}\n"],"names":["singletonInstance","EchoEventType","singleton","StreamingFrameAction","options","merge","systemDateFormats","createTheme","config","H","urlUtil","__spreadProps","__spreadValues","deprecationWarning","locationService","createLogger","attachDebugger","BusEventBase","BusEventWithPayload","PluginExtensionTypes","MetaAnalyticsEventName","System","faro","GrafanaLogLevel","captureMessage","LogLevel","captureException","LoadingState","data","dataFrameFromJSON","toDataFrame","FieldType","HealthStatus","DataSourceApi","getDataSourceRef","of","switchMap","_a","catchError","lastValueFrom","parseLiveChannelAddress","dataFrameToJSON","makeClassES5Compatible","React","PureComponent","getDataSourceUID","selectors","Select","isUnsignedPluginSignature","HorizontalGroup","PluginSignatureBadge","usePluginContext","useMemo","isDataSourcePluginContext"],"mappings":"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"}