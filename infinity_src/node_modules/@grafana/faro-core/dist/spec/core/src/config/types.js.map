{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../../src/config/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { APIEvent, StacktraceParser } from '../api';\nimport type { Instrumentation } from '../instrumentations';\nimport type { InternalLoggerLevel } from '../internalLogger';\nimport type { Meta, MetaApp, MetaItem, MetaSession, MetaUser, MetaView } from '../metas';\nimport type { BatchExecutorOptions, BeforeSendHook, Transport } from '../transports';\nimport type { UnpatchedConsole } from '../unpatchedConsole';\n\ntype SamplingContext = {\n  metas: Meta;\n};\n\nexport interface Config<P = APIEvent> {\n  app: MetaApp;\n  batching?: BatchExecutorOptions;\n  dedupe: boolean;\n  globalObjectKey: string;\n  instrumentations: Instrumentation[];\n  internalLoggerLevel: InternalLoggerLevel;\n  isolate: boolean;\n  metas: MetaItem[];\n  parseStacktrace: StacktraceParser;\n  paused: boolean;\n  preventGlobalExposure: boolean;\n  transports: Transport[];\n  unpatchedConsole: UnpatchedConsole;\n\n  beforeSend?: BeforeSendHook<P>;\n  ignoreErrors?: Patterns;\n  sessionTracking?: {\n    enabled?: boolean;\n    persistent?: boolean;\n    session?: MetaSession;\n    maxSessionPersistenceTime?: number;\n    onSessionChange?: (oldSession: MetaSession | null, newSession: MetaSession) => void;\n    samplingRate?: number;\n    sampler?: (context: SamplingContext) => number;\n    generateSessionId?: () => string;\n  };\n\n  user?: MetaUser;\n  view?: MetaView;\n  eventDomain?: string;\n}\n\nexport type Patterns = Array<string | RegExp>;\n"]}