{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/api/exceptions/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { TraceContext } from '../traces';\n\nexport type StacktraceParser = (err: ExtendedError) => Stacktrace;\n\nexport interface ExceptionStackFrame {\n  filename: string;\n  function: string;\n\n  colno?: number;\n  lineno?: number;\n}\n\nexport interface ExtendedError extends Error {\n  columnNumber?: number;\n  stacktrace?: Error['stack'];\n}\n\nexport interface Stacktrace {\n  frames: ExceptionStackFrame[];\n}\n\nexport type ExceptionContext = Record<string, string>;\n\nexport interface ExceptionEvent {\n  timestamp: string;\n  type: string;\n  value: string;\n\n  stacktrace?: Stacktrace;\n  trace?: TraceContext;\n  context?: ExceptionContext;\n}\n\nexport interface PushErrorOptions {\n  skipDedupe?: boolean;\n  stackFrames?: ExceptionStackFrame[];\n  type?: string;\n  context?: ExceptionContext;\n}\n\nexport interface ExceptionsAPI {\n  changeStacktraceParser: (stacktraceParser: StacktraceParser) => void;\n  getStacktraceParser: () => StacktraceParser | undefined;\n  pushError: (value: Error, options?: PushErrorOptions) => void;\n}\n"]}