{"version":3,"file":"getWebInstrumentations.js","sourceRoot":"","sources":["../../../src/config/getWebInstrumentations.ts"],"names":[],"mappings":";;;AAEA,wDAM6B;AAI7B,SAAgB,sBAAsB,CAAC,OAA2C;IAA3C,wBAAA,EAAA,YAA2C;IAChF,IAAM,gBAAgB,GAAsB;QAC1C,IAAI,wCAAqB,EAAE;QAC3B,IAAI,2CAAwB,EAAE;QAC9B,IAAI,yCAAsB,EAAE;QAC5B,IAAI,sCAAmB,EAAE;KAC1B,CAAC;IAEF,IAAI,OAAO,CAAC,cAAc,KAAK,KAAK,EAAE;QACpC,gBAAgB,CAAC,IAAI,CACnB,IAAI,yCAAsB,CAAC;YACzB,cAAc,EAAE,OAAO,CAAC,4BAA4B;SACrD,CAAC,CACH,CAAC;KACH;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAjBD,wDAiBC","sourcesContent":["import type { Instrumentation } from '@grafana/faro-core';\n\nimport {\n  ConsoleInstrumentation,\n  ErrorsInstrumentation,\n  SessionInstrumentation,\n  ViewInstrumentation,\n  WebVitalsInstrumentation,\n} from '../instrumentations';\n\nimport type { GetWebInstrumentationsOptions } from './types';\n\nexport function getWebInstrumentations(options: GetWebInstrumentationsOptions = {}): Instrumentation[] {\n  const instrumentations: Instrumentation[] = [\n    new ErrorsInstrumentation(),\n    new WebVitalsInstrumentation(),\n    new SessionInstrumentation(),\n    new ViewInstrumentation(),\n  ];\n\n  if (options.captureConsole !== false) {\n    instrumentations.push(\n      new ConsoleInstrumentation({\n        disabledLevels: options.captureConsoleDisabledLevels,\n      })\n    );\n  }\n\n  return instrumentations;\n}\n"]}