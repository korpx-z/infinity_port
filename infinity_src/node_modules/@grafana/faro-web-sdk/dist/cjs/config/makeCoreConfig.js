"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeCoreConfig = void 0;
var faro_core_1 = require("@grafana/faro-core");
var consts_1 = require("../consts");
var instrumentations_1 = require("../instrumentations");
var metas_1 = require("../metas");
var transports_1 = require("../transports");
var getWebInstrumentations_1 = require("./getWebInstrumentations");
function makeCoreConfig(browserConfig) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    var transports = [];
    var internalLogger = (0, faro_core_1.createInternalLogger)(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);
    if (browserConfig.transports) {
        if (browserConfig.url || browserConfig.apiKey) {
            internalLogger.error('if "transports" is defined, "url" and "apiKey" should not be defined');
        }
        transports.push.apply(transports, browserConfig.transports);
    }
    else if (browserConfig.url) {
        transports.push(new transports_1.FetchTransport({
            url: browserConfig.url,
            apiKey: browserConfig.apiKey,
        }));
    }
    else {
        internalLogger.error('either "url" or "transports" must be defined');
    }
    return {
        app: browserConfig.app,
        dedupe: (_a = browserConfig.dedupe) !== null && _a !== void 0 ? _a : true,
        globalObjectKey: browserConfig.globalObjectKey || faro_core_1.defaultGlobalObjectKey,
        instrumentations: (_b = browserConfig.instrumentations) !== null && _b !== void 0 ? _b : (0, getWebInstrumentations_1.getWebInstrumentations)(),
        internalLoggerLevel: (_c = browserConfig.internalLoggerLevel) !== null && _c !== void 0 ? _c : faro_core_1.defaultInternalLoggerLevel,
        isolate: (_d = browserConfig.isolate) !== null && _d !== void 0 ? _d : false,
        metas: (_e = browserConfig.metas) !== null && _e !== void 0 ? _e : metas_1.defaultMetas,
        parseStacktrace: instrumentations_1.parseStacktrace,
        paused: (_f = browserConfig.paused) !== null && _f !== void 0 ? _f : false,
        preventGlobalExposure: (_g = browserConfig.preventGlobalExposure) !== null && _g !== void 0 ? _g : false,
        transports: transports,
        unpatchedConsole: (_h = browserConfig.unpatchedConsole) !== null && _h !== void 0 ? _h : faro_core_1.defaultUnpatchedConsole,
        beforeSend: browserConfig.beforeSend,
        eventDomain: (_j = browserConfig.eventDomain) !== null && _j !== void 0 ? _j : consts_1.defaultEventDomain,
        ignoreErrors: browserConfig.ignoreErrors,
        session: (_k = browserConfig.session) !== null && _k !== void 0 ? _k : (0, metas_1.createSession)(),
        user: browserConfig.user,
        view: (_l = browserConfig.view) !== null && _l !== void 0 ? _l : metas_1.defaultViewMeta,
    };
}
exports.makeCoreConfig = makeCoreConfig;
//# sourceMappingURL=makeCoreConfig.js.map