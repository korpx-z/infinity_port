{"version":3,"file":"makeCoreConfig.js","sourceRoot":"","sources":["../../../src/config/makeCoreConfig.ts"],"names":[],"mappings":";;;AAAA,gDAK4B;AAG5B,oCAA+C;AAC/C,wDAAsD;AACtD,kCAAwE;AACxE,4CAA+C;AAE/C,mEAAkE;AAGlE,SAAgB,cAAc,CAAC,aAA4B;;IACzD,IAAM,UAAU,GAAgB,EAAE,CAAC;IAEnC,IAAM,cAAc,GAAG,IAAA,gCAAoB,EAAC,aAAa,CAAC,gBAAgB,EAAE,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAE/G,IAAI,aAAa,CAAC,UAAU,EAAE;QAC5B,IAAI,aAAa,CAAC,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE;YAC7C,cAAc,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;SAC9F;QAED,UAAU,CAAC,IAAI,OAAf,UAAU,EAAS,aAAa,CAAC,UAAU,EAAE;KAC9C;SAAM,IAAI,aAAa,CAAC,GAAG,EAAE;QAC5B,UAAU,CAAC,IAAI,CACb,IAAI,2BAAc,CAAC;YACjB,GAAG,EAAE,aAAa,CAAC,GAAG;YACtB,MAAM,EAAE,aAAa,CAAC,MAAM;SAC7B,CAAC,CACH,CAAC;KACH;SAAM;QACL,cAAc,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACtE;IAED,OAAO;QACL,GAAG,EAAE,aAAa,CAAC,GAAG;QACtB,MAAM,EAAE,MAAA,aAAa,CAAC,MAAM,mCAAI,IAAI;QACpC,eAAe,EAAE,aAAa,CAAC,eAAe,IAAI,kCAAsB;QACxE,gBAAgB,EAAE,MAAA,aAAa,CAAC,gBAAgB,mCAAI,IAAA,+CAAsB,GAAE;QAC5E,mBAAmB,EAAE,MAAA,aAAa,CAAC,mBAAmB,mCAAI,sCAA0B;QACpF,OAAO,EAAE,MAAA,aAAa,CAAC,OAAO,mCAAI,KAAK;QACvC,KAAK,EAAE,MAAA,aAAa,CAAC,KAAK,mCAAI,oBAAY;QAC1C,eAAe,oCAAA;QACf,MAAM,EAAE,MAAA,aAAa,CAAC,MAAM,mCAAI,KAAK;QACrC,qBAAqB,EAAE,MAAA,aAAa,CAAC,qBAAqB,mCAAI,KAAK;QACnE,UAAU,YAAA;QACV,gBAAgB,EAAE,MAAA,aAAa,CAAC,gBAAgB,mCAAI,mCAAuB;QAE3E,UAAU,EAAE,aAAa,CAAC,UAAU;QACpC,WAAW,EAAE,MAAA,aAAa,CAAC,WAAW,mCAAI,2BAAkB;QAC5D,YAAY,EAAE,aAAa,CAAC,YAAY;QACxC,OAAO,EAAE,MAAA,aAAa,CAAC,OAAO,mCAAI,IAAA,qBAAa,GAAE;QACjD,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,IAAI,EAAE,MAAA,aAAa,CAAC,IAAI,mCAAI,uBAAe;KAC5C,CAAC;AACJ,CAAC;AA3CD,wCA2CC","sourcesContent":["import {\n  createInternalLogger,\n  defaultGlobalObjectKey,\n  defaultInternalLoggerLevel,\n  defaultUnpatchedConsole,\n} from '@grafana/faro-core';\nimport type { Config, Transport } from '@grafana/faro-core';\n\nimport { defaultEventDomain } from '../consts';\nimport { parseStacktrace } from '../instrumentations';\nimport { createSession, defaultMetas, defaultViewMeta } from '../metas';\nimport { FetchTransport } from '../transports';\n\nimport { getWebInstrumentations } from './getWebInstrumentations';\nimport type { BrowserConfig } from './types';\n\nexport function makeCoreConfig(browserConfig: BrowserConfig): Config | undefined {\n  const transports: Transport[] = [];\n\n  const internalLogger = createInternalLogger(browserConfig.unpatchedConsole, browserConfig.internalLoggerLevel);\n\n  if (browserConfig.transports) {\n    if (browserConfig.url || browserConfig.apiKey) {\n      internalLogger.error('if \"transports\" is defined, \"url\" and \"apiKey\" should not be defined');\n    }\n\n    transports.push(...browserConfig.transports);\n  } else if (browserConfig.url) {\n    transports.push(\n      new FetchTransport({\n        url: browserConfig.url,\n        apiKey: browserConfig.apiKey,\n      })\n    );\n  } else {\n    internalLogger.error('either \"url\" or \"transports\" must be defined');\n  }\n\n  return {\n    app: browserConfig.app,\n    dedupe: browserConfig.dedupe ?? true,\n    globalObjectKey: browserConfig.globalObjectKey || defaultGlobalObjectKey,\n    instrumentations: browserConfig.instrumentations ?? getWebInstrumentations(),\n    internalLoggerLevel: browserConfig.internalLoggerLevel ?? defaultInternalLoggerLevel,\n    isolate: browserConfig.isolate ?? false,\n    metas: browserConfig.metas ?? defaultMetas,\n    parseStacktrace,\n    paused: browserConfig.paused ?? false,\n    preventGlobalExposure: browserConfig.preventGlobalExposure ?? false,\n    transports,\n    unpatchedConsole: browserConfig.unpatchedConsole ?? defaultUnpatchedConsole,\n\n    beforeSend: browserConfig.beforeSend,\n    eventDomain: browserConfig.eventDomain ?? defaultEventDomain,\n    ignoreErrors: browserConfig.ignoreErrors,\n    session: browserConfig.session ?? createSession(),\n    user: browserConfig.user,\n    view: browserConfig.view ?? defaultViewMeta,\n  };\n}\n"]}