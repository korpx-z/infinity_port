{"version":3,"file":"OtelPayload.js","sourceRoot":"","sources":["../../../../../src/transports/otlp/payload/OtelPayload.ts"],"names":[],"mappings":";;;AAAA,gDAAuF;AAEvF,0DAAsD;AAEtD,yCAAwD;AASxD;IAGE,qBAAY,aAA6B;QAFjC,0BAAqB,GAAG,EAA2B,CAAC;QAG1D,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SACrC;IACH,CAAC;IAED,gCAAU,GAAV;QACE,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAC,EAAe;oBAAb,WAAW,iBAAA;gBAAO,OAAA,WAAW;YAAX,CAAW,CAAC;YAC9E,aAAa,EAAE,EAAE;YACjB,eAAe,EAAE,EAAE;SACX,CAAC;IACb,CAAC;IAED,qCAAe,GAAf,UAAgB,aAA4B;QAClC,IAAA,IAAI,GAAW,aAAa,KAAxB,EAAE,IAAI,GAAK,aAAa,KAAlB,CAAmB;QAErC,QAAQ,IAAI,EAAE;YACZ,KAAK,6BAAiB,CAAC,GAAG,CAAC;YAC3B,KAAK,6BAAiB,CAAC,SAAS,CAAC;YACjC,KAAK,6BAAiB,CAAC,KAAK,CAAC;YAC7B,KAAK,6BAAiB,CAAC,WAAW;gBAChC,IAAM,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,UAAC,EAAQ;wBAAN,IAAI,UAAA;oBAAO,OAAA,IAAA,qBAAS,EAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC;gBAAnC,CAAmC,CAAC,CAAC;gBAE/G,IAAI,mBAAmB,EAAE;oBACf,IAAA,WAAW,GAAK,mBAAmB,YAAxB,CAAyB;oBAC5C,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAA,sBAAU,EAAC,aAAa,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBACL,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;wBAC9B,WAAW,EAAE,IAAA,yBAAa,EAAC,aAAa,CAAC;wBACzC,IAAI,MAAA;qBACL,CAAC,CAAC;iBACJ;gBAED,MAAM;YACR,KAAK,6BAAiB,CAAC,KAAK;gBAC1B,MAAM;YACR;gBACE,kCAAc,CAAC,KAAK,CAAC,qCAA8B,IAAI,CAAE,CAAC,CAAC;gBAC3D,MAAM;SACT;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,AA7CD,IA6CC;AA7CY,kCAAW","sourcesContent":["import { deepEqual, Meta, TransportItem, TransportItemType } from '@grafana/faro-core';\n\nimport { internalLogger } from '../otlpPayloadLogger';\n\nimport { toResourceLog, toScopeLog } from './transform';\nimport type { ResourceLog } from './transform';\nimport type { OtelTransportPayload } from './types';\n\ninterface ResourceLogsMetaMap {\n  resourceLog: ResourceLog;\n  meta: Meta;\n}\n\nexport class OtelPayload {\n  private resourceLogsWithMetas = [] as ResourceLogsMetaMap[];\n\n  constructor(transportItem?: TransportItem) {\n    if (transportItem) {\n      this.addResourceItem(transportItem);\n    }\n  }\n\n  getPayload(): OtelTransportPayload {\n    return {\n      resourceLogs: this.resourceLogsWithMetas.map(({ resourceLog }) => resourceLog),\n      resourceSpans: [],\n      resourceMetrics: [],\n    } as const;\n  }\n\n  addResourceItem(transportItem: TransportItem): void {\n    const { type, meta } = transportItem;\n\n    switch (type) {\n      case TransportItemType.LOG:\n      case TransportItemType.EXCEPTION:\n      case TransportItemType.EVENT:\n      case TransportItemType.MEASUREMENT:\n        const resourceLogWithMeta = this.resourceLogsWithMetas.find(({ meta }) => deepEqual(transportItem.meta, meta));\n\n        if (resourceLogWithMeta) {\n          const { resourceLog } = resourceLogWithMeta;\n          resourceLog.scopeLogs.push(toScopeLog(transportItem));\n        } else {\n          this.resourceLogsWithMetas.push({\n            resourceLog: toResourceLog(transportItem),\n            meta,\n          });\n        }\n\n        break;\n      case TransportItemType.TRACE:\n        break;\n      default:\n        internalLogger.error(`Unknown TransportItemType: ${type}`);\n        break;\n    }\n  }\n}\n"]}