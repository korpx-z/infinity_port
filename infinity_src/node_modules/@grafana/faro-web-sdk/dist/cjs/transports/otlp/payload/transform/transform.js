"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toScopeLog = exports.toResourceLog = void 0;
var semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
var faro_core_1 = require("@grafana/faro-core");
var otlpPayloadLogger_1 = require("../../otlpPayloadLogger");
var attribute_1 = require("../attribute");
/**
 * Seems currently to be missing in the semantic-conventions npm package.
 * See: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#todos
 *
 * Attributes are as defined by the Otel docs
 */
var SemanticBrowserAttributes = {
    BROWSER_BRANDS: 'browser.brands',
    BROWSER_PLATFORM: 'browser.platform',
    BROWSER_MOBILE: 'browser.mobile',
    BROWSER_USER_AGENT: 'browser.user_agent',
    BROWSER_LANGUAGE: 'browser.language',
};
function toResourceLog(transportItem) {
    var resource = toResource(transportItem);
    return {
        resource: resource,
        scopeLogs: [toScopeLog(transportItem)],
    };
}
exports.toResourceLog = toResourceLog;
function toResource(transportItem) {
    var _a = transportItem.meta, browser = _a.browser, sdk = _a.sdk, app = _a.app;
    return {
        attributes: [
            (0, attribute_1.toAttribute)(SemanticBrowserAttributes.BROWSER_MOBILE, browser === null || browser === void 0 ? void 0 : browser.mobile),
            (0, attribute_1.toAttribute)(SemanticBrowserAttributes.BROWSER_USER_AGENT, browser === null || browser === void 0 ? void 0 : browser.userAgent),
            (0, attribute_1.toAttribute)(SemanticBrowserAttributes.BROWSER_LANGUAGE, browser === null || browser === void 0 ? void 0 : browser.language),
            (0, attribute_1.toAttribute)('browser.os', browser === null || browser === void 0 ? void 0 : browser.os),
            // toAttribute(SemanticBrowserAttributes.BROWSER_BRANDS, browser?.brands),
            (0, attribute_1.toAttribute)('browser.name', browser === null || browser === void 0 ? void 0 : browser.name),
            (0, attribute_1.toAttribute)('browser.version', browser === null || browser === void 0 ? void 0 : browser.version),
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.TELEMETRY_SDK_NAME, sdk === null || sdk === void 0 ? void 0 : sdk.name),
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.TELEMETRY_SDK_VERSION, sdk === null || sdk === void 0 ? void 0 : sdk.version),
            Boolean(sdk)
                ? (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE, semantic_conventions_1.TelemetrySdkLanguageValues.WEBJS)
                : undefined,
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME, app === null || app === void 0 ? void 0 : app.name),
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION, app === null || app === void 0 ? void 0 : app.version),
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT, app === null || app === void 0 ? void 0 : app.environment),
        ].filter(attribute_1.isAttribute),
    };
}
function toScopeLog(transportItem) {
    return {
        scope: {
            name: '@grafana/faro-web-sdk',
            version: faro_core_1.VERSION,
        },
        logRecords: [toLogRecord(transportItem)],
    };
}
exports.toScopeLog = toScopeLog;
function toLogRecord(transportItem) {
    var type = transportItem.type;
    switch (type) {
        case faro_core_1.TransportItemType.LOG:
            return toLogLogRecord(transportItem);
        case faro_core_1.TransportItemType.EXCEPTION:
            return toErrorLogRecord(transportItem);
        case faro_core_1.TransportItemType.EVENT:
            return toEventLogRecord(transportItem);
        case faro_core_1.TransportItemType.MEASUREMENT:
            return toMeasurementLogRecord(transportItem);
        default:
            var error = "Unknown TransportItemType: ".concat(type);
            otlpPayloadLogger_1.internalLogger.error(error);
            throw new Error(error);
    }
}
function toLogLogRecord(transportItem) {
    var _a, _b;
    var meta = transportItem.meta, payload = transportItem.payload;
    var timeUnixNano = toTimeUnixNano(payload.timestamp);
    var body = (0, attribute_1.toAttributeValue)(payload.message);
    return {
        timeUnixNano: timeUnixNano,
        severityNumber: 10,
        severityText: 'INFO2',
        body: body,
        attributes: getCommonLogAttributes(meta),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toEventLogRecord(transportItem) {
    var _a, _b;
    var meta = transportItem.meta, payload = transportItem.payload;
    var timeUnixNano = toTimeUnixNano(payload.timestamp);
    var body = (0, attribute_1.toAttributeValue)(payload.name);
    return {
        timeUnixNano: timeUnixNano,
        body: body,
        attributes: __spreadArray(__spreadArray([], getCommonLogAttributes(meta), true), [
            (0, attribute_1.toAttribute)('event.name', payload.name),
            (0, attribute_1.toAttribute)('event.domain', payload.domain),
            (0, attribute_1.toAttribute)('event.attributes', payload.attributes),
        ], false).filter(attribute_1.isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toErrorLogRecord(transportItem) {
    var _a, _b;
    var meta = transportItem.meta, payload = transportItem.payload;
    var timeUnixNano = toTimeUnixNano(payload.timestamp);
    return {
        timeUnixNano: timeUnixNano,
        attributes: __spreadArray(__spreadArray([], getCommonLogAttributes(meta), true), [
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticAttributes.EXCEPTION_TYPE, payload.type),
            (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticAttributes.EXCEPTION_MESSAGE, payload.value),
            // toAttribute(SemanticAttributes.EXCEPTION_STACKTRACE, undefined),
            (0, attribute_1.toAttribute)('faro.error.stacktrace', payload.stacktrace),
        ], false).filter(attribute_1.isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toMeasurementLogRecord(transportItem) {
    var _a, _b;
    var meta = transportItem.meta, payload = transportItem.payload;
    var timeUnixNano = toTimeUnixNano(payload.timestamp);
    var _c = Object.entries(payload.values).flat(), measurementName = _c[0], measurementValue = _c[1];
    return {
        timeUnixNano: timeUnixNano,
        attributes: __spreadArray(__spreadArray([], getCommonLogAttributes(meta), true), [
            (0, attribute_1.toAttribute)('measurement.type', payload.type),
            (0, attribute_1.toAttribute)('measurement.name', measurementName),
            (0, attribute_1.toAttribute)('measurement.value', measurementValue),
        ], false).filter(attribute_1.isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function getCommonLogAttributes(meta) {
    var view = meta.view, page = meta.page, session = meta.session, user = meta.user;
    return [
        (0, attribute_1.toAttribute)('view.name', view === null || view === void 0 ? void 0 : view.name),
        (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticAttributes.HTTP_URL, page === null || page === void 0 ? void 0 : page.url),
        (0, attribute_1.toAttribute)('page.id', page === null || page === void 0 ? void 0 : page.id),
        (0, attribute_1.toAttribute)('page.attributes', page === null || page === void 0 ? void 0 : page.attributes),
        (0, attribute_1.toAttribute)('session.id', session === null || session === void 0 ? void 0 : session.id),
        (0, attribute_1.toAttribute)('session.attributes', session === null || session === void 0 ? void 0 : session.attributes),
        (0, attribute_1.toAttribute)(semantic_conventions_1.SemanticAttributes.ENDUSER_ID, user === null || user === void 0 ? void 0 : user.id),
        (0, attribute_1.toAttribute)('enduser.name', user === null || user === void 0 ? void 0 : user.username),
        (0, attribute_1.toAttribute)('enduser.email', user === null || user === void 0 ? void 0 : user.email),
        (0, attribute_1.toAttribute)('enduser.attributes', user === null || user === void 0 ? void 0 : user.attributes),
    ].filter(attribute_1.isAttribute);
}
function toTimeUnixNano(timestamp) {
    return Date.parse(timestamp) * 1e6;
}
//# sourceMappingURL=transform.js.map