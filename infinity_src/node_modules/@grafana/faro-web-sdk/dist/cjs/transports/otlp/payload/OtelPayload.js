"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtelPayload = void 0;
var faro_core_1 = require("@grafana/faro-core");
var otlpPayloadLogger_1 = require("../otlpPayloadLogger");
var transform_1 = require("./transform");
var OtelPayload = /** @class */ (function () {
    function OtelPayload(transportItem) {
        this.resourceLogsWithMetas = [];
        if (transportItem) {
            this.addResourceItem(transportItem);
        }
    }
    OtelPayload.prototype.getPayload = function () {
        return {
            resourceLogs: this.resourceLogsWithMetas.map(function (_a) {
                var resourceLog = _a.resourceLog;
                return resourceLog;
            }),
            resourceSpans: [],
            resourceMetrics: [],
        };
    };
    OtelPayload.prototype.addResourceItem = function (transportItem) {
        var type = transportItem.type, meta = transportItem.meta;
        switch (type) {
            case faro_core_1.TransportItemType.LOG:
            case faro_core_1.TransportItemType.EXCEPTION:
            case faro_core_1.TransportItemType.EVENT:
            case faro_core_1.TransportItemType.MEASUREMENT:
                var resourceLogWithMeta = this.resourceLogsWithMetas.find(function (_a) {
                    var meta = _a.meta;
                    return (0, faro_core_1.deepEqual)(transportItem.meta, meta);
                });
                if (resourceLogWithMeta) {
                    var resourceLog = resourceLogWithMeta.resourceLog;
                    resourceLog.scopeLogs.push((0, transform_1.toScopeLog)(transportItem));
                }
                else {
                    this.resourceLogsWithMetas.push({
                        resourceLog: (0, transform_1.toResourceLog)(transportItem),
                        meta: meta,
                    });
                }
                break;
            case faro_core_1.TransportItemType.TRACE:
                break;
            default:
                otlpPayloadLogger_1.internalLogger.error("Unknown TransportItemType: ".concat(type));
                break;
        }
    };
    return OtelPayload;
}());
exports.OtelPayload = OtelPayload;
//# sourceMappingURL=OtelPayload.js.map