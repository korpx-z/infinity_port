"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleInstrumentation = void 0;
var faro_core_1 = require("@grafana/faro-core");
var ConsoleInstrumentation = /** @class */ (function (_super) {
    __extends(ConsoleInstrumentation, _super);
    function ConsoleInstrumentation(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.name = '@grafana/faro-web-sdk:instrumentation-console';
        _this.version = faro_core_1.VERSION;
        return _this;
    }
    ConsoleInstrumentation.prototype.initialize = function () {
        var _this = this;
        this.logDebug('Initializing\n', this.options);
        faro_core_1.allLogLevels
            .filter(function (level) { var _a; return !((_a = _this.options.disabledLevels) !== null && _a !== void 0 ? _a : ConsoleInstrumentation.defaultDisabledLevels).includes(level); })
            .forEach(function (level) {
            /* eslint-disable-next-line no-console */
            console[level] = function () {
                var _a;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    _this.api.pushLog(args, { level: level });
                }
                catch (err) {
                    _this.logError(err);
                }
                finally {
                    (_a = _this.unpatchedConsole)[level].apply(_a, args);
                }
            };
        });
    };
    ConsoleInstrumentation.defaultDisabledLevels = [faro_core_1.LogLevel.DEBUG, faro_core_1.LogLevel.TRACE, faro_core_1.LogLevel.LOG];
    return ConsoleInstrumentation;
}(faro_core_1.BaseInstrumentation));
exports.ConsoleInstrumentation = ConsoleInstrumentation;
//# sourceMappingURL=instrumentation.js.map