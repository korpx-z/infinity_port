"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerOnerror = void 0;
var faro_core_1 = require("@grafana/faro-core");
var const_1 = require("./const");
var getErrorDetails_1 = require("./getErrorDetails");
var getValueAndTypeFromMessage_1 = require("./getValueAndTypeFromMessage");
var stackFrames_1 = require("./stackFrames");
function registerOnerror(api) {
    var oldOnerror = window.onerror;
    window.onerror = function () {
        var _a, _b;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        try {
            var evt = args[0], source = args[1], lineno = args[2], colno = args[3], error = args[4];
            var value = void 0;
            var type = void 0;
            var stackFrames = [];
            var eventIsString = (0, faro_core_1.isString)(evt);
            var initialStackFrame = (0, stackFrames_1.buildStackFrame)(source, const_1.unknownString, lineno, colno);
            if (error || !eventIsString) {
                _a = (0, getErrorDetails_1.getErrorDetails)((error !== null && error !== void 0 ? error : evt)), value = _a[0], type = _a[1], stackFrames = _a[2];
                if (stackFrames.length === 0) {
                    stackFrames = [initialStackFrame];
                }
            }
            else if (eventIsString) {
                _b = (0, getValueAndTypeFromMessage_1.getValueAndTypeFromMessage)(evt), value = _b[0], type = _b[1];
                stackFrames = [initialStackFrame];
            }
            if (value) {
                api.pushError(new Error(value), { type: type, stackFrames: stackFrames });
            }
        }
        finally {
            oldOnerror === null || oldOnerror === void 0 ? void 0 : oldOnerror.apply(window, args);
        }
    };
}
exports.registerOnerror = registerOnerror;
//# sourceMappingURL=registerOnerror.js.map