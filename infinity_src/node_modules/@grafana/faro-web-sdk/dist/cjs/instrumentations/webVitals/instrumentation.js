"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebVitalsInstrumentation = void 0;
var web_vitals_1 = require("web-vitals");
var faro_core_1 = require("@grafana/faro-core");
var WebVitalsInstrumentation = /** @class */ (function (_super) {
    __extends(WebVitalsInstrumentation, _super);
    function WebVitalsInstrumentation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = '@grafana/faro-web-sdk:instrumentation-web-vitals';
        _this.version = faro_core_1.VERSION;
        return _this;
    }
    WebVitalsInstrumentation.prototype.initialize = function () {
        var _this = this;
        this.logDebug('Initializing');
        Object.entries(WebVitalsInstrumentation.mapping).forEach(function (_a) {
            var indicator = _a[0], executor = _a[1];
            executor(function (metric) {
                var _a;
                _this.api.pushMeasurement({
                    type: 'web-vitals',
                    values: (_a = {},
                        _a[indicator] = metric.value,
                        _a),
                });
            });
        });
    };
    WebVitalsInstrumentation.mapping = {
        cls: web_vitals_1.onCLS,
        fcp: web_vitals_1.onFCP,
        fid: web_vitals_1.onFID,
        inp: web_vitals_1.onINP,
        lcp: web_vitals_1.onLCP,
        ttfb: web_vitals_1.onTTFB,
    };
    return WebVitalsInstrumentation;
}(faro_core_1.BaseInstrumentation));
exports.WebVitalsInstrumentation = WebVitalsInstrumentation;
//# sourceMappingURL=instrumentation.js.map