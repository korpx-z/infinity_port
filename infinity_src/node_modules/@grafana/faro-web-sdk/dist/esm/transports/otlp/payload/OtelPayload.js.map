{"version":3,"file":"OtelPayload.js","sourceRoot":"","sources":["../../../../../src/transports/otlp/payload/OtelPayload.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAuB,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAEvF,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AAEtD,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AASxD,MAAM,OAAO,WAAW;IAGtB,YAAY,aAA6B;QAFjC,0BAAqB,GAAG,EAA2B,CAAC;QAG1D,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;SACrC;IACH,CAAC;IAED,UAAU;QACR,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,WAAW,CAAC;YAC9E,aAAa,EAAE,EAAE;YACjB,eAAe,EAAE,EAAE;SACX,CAAC;IACb,CAAC;IAED,eAAe,CAAC,aAA4B;QAC1C,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,aAAa,CAAC;QAErC,QAAQ,IAAI,EAAE;YACZ,KAAK,iBAAiB,CAAC,GAAG,CAAC;YAC3B,KAAK,iBAAiB,CAAC,SAAS,CAAC;YACjC,KAAK,iBAAiB,CAAC,KAAK,CAAC;YAC7B,KAAK,iBAAiB,CAAC,WAAW;gBAChC,MAAM,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;gBAE/G,IAAI,mBAAmB,EAAE;oBACvB,MAAM,EAAE,WAAW,EAAE,GAAG,mBAAmB,CAAC;oBAC5C,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;iBACvD;qBAAM;oBACL,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;wBAC9B,WAAW,EAAE,aAAa,CAAC,aAAa,CAAC;wBACzC,IAAI;qBACL,CAAC,CAAC;iBACJ;gBAED,MAAM;YACR,KAAK,iBAAiB,CAAC,KAAK;gBAC1B,MAAM;YACR;gBACE,cAAc,CAAC,KAAK,CAAC,8BAA8B,IAAI,EAAE,CAAC,CAAC;gBAC3D,MAAM;SACT;IACH,CAAC;CACF","sourcesContent":["import { deepEqual, Meta, TransportItem, TransportItemType } from '@grafana/faro-core';\n\nimport { internalLogger } from '../otlpPayloadLogger';\n\nimport { toResourceLog, toScopeLog } from './transform';\nimport type { ResourceLog } from './transform';\nimport type { OtelTransportPayload } from './types';\n\ninterface ResourceLogsMetaMap {\n  resourceLog: ResourceLog;\n  meta: Meta;\n}\n\nexport class OtelPayload {\n  private resourceLogsWithMetas = [] as ResourceLogsMetaMap[];\n\n  constructor(transportItem?: TransportItem) {\n    if (transportItem) {\n      this.addResourceItem(transportItem);\n    }\n  }\n\n  getPayload(): OtelTransportPayload {\n    return {\n      resourceLogs: this.resourceLogsWithMetas.map(({ resourceLog }) => resourceLog),\n      resourceSpans: [],\n      resourceMetrics: [],\n    } as const;\n  }\n\n  addResourceItem(transportItem: TransportItem): void {\n    const { type, meta } = transportItem;\n\n    switch (type) {\n      case TransportItemType.LOG:\n      case TransportItemType.EXCEPTION:\n      case TransportItemType.EVENT:\n      case TransportItemType.MEASUREMENT:\n        const resourceLogWithMeta = this.resourceLogsWithMetas.find(({ meta }) => deepEqual(transportItem.meta, meta));\n\n        if (resourceLogWithMeta) {\n          const { resourceLog } = resourceLogWithMeta;\n          resourceLog.scopeLogs.push(toScopeLog(transportItem));\n        } else {\n          this.resourceLogsWithMetas.push({\n            resourceLog: toResourceLog(transportItem),\n            meta,\n          });\n        }\n\n        break;\n      case TransportItemType.TRACE:\n        break;\n      default:\n        internalLogger.error(`Unknown TransportItemType: ${type}`);\n        break;\n    }\n  }\n}\n"]}