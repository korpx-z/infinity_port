import { SemanticAttributes, SemanticResourceAttributes, TelemetrySdkLanguageValues, } from '@opentelemetry/semantic-conventions';
import { TransportItemType, VERSION, } from '@grafana/faro-core';
import { internalLogger } from '../../otlpPayloadLogger';
import { isAttribute, toAttribute, toAttributeValue } from '../attribute';
/**
 * Seems currently to be missing in the semantic-conventions npm package.
 * See: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/README.md#todos
 *
 * Attributes are as defined by the Otel docs
 */
const SemanticBrowserAttributes = {
    BROWSER_BRANDS: 'browser.brands',
    BROWSER_PLATFORM: 'browser.platform',
    BROWSER_MOBILE: 'browser.mobile',
    BROWSER_USER_AGENT: 'browser.user_agent',
    BROWSER_LANGUAGE: 'browser.language',
};
export function toResourceLog(transportItem) {
    const resource = toResource(transportItem);
    return {
        resource,
        scopeLogs: [toScopeLog(transportItem)],
    };
}
function toResource(transportItem) {
    const { browser, sdk, app } = transportItem.meta;
    return {
        attributes: [
            toAttribute(SemanticBrowserAttributes.BROWSER_MOBILE, browser === null || browser === void 0 ? void 0 : browser.mobile),
            toAttribute(SemanticBrowserAttributes.BROWSER_USER_AGENT, browser === null || browser === void 0 ? void 0 : browser.userAgent),
            toAttribute(SemanticBrowserAttributes.BROWSER_LANGUAGE, browser === null || browser === void 0 ? void 0 : browser.language),
            toAttribute('browser.os', browser === null || browser === void 0 ? void 0 : browser.os),
            // toAttribute(SemanticBrowserAttributes.BROWSER_BRANDS, browser?.brands),
            toAttribute('browser.name', browser === null || browser === void 0 ? void 0 : browser.name),
            toAttribute('browser.version', browser === null || browser === void 0 ? void 0 : browser.version),
            toAttribute(SemanticResourceAttributes.TELEMETRY_SDK_NAME, sdk === null || sdk === void 0 ? void 0 : sdk.name),
            toAttribute(SemanticResourceAttributes.TELEMETRY_SDK_VERSION, sdk === null || sdk === void 0 ? void 0 : sdk.version),
            Boolean(sdk)
                ? toAttribute(SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE, TelemetrySdkLanguageValues.WEBJS)
                : undefined,
            toAttribute(SemanticResourceAttributes.SERVICE_NAME, app === null || app === void 0 ? void 0 : app.name),
            toAttribute(SemanticResourceAttributes.SERVICE_VERSION, app === null || app === void 0 ? void 0 : app.version),
            toAttribute(SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT, app === null || app === void 0 ? void 0 : app.environment),
        ].filter(isAttribute),
    };
}
export function toScopeLog(transportItem) {
    return {
        scope: {
            name: '@grafana/faro-web-sdk',
            version: VERSION,
        },
        logRecords: [toLogRecord(transportItem)],
    };
}
function toLogRecord(transportItem) {
    const { type } = transportItem;
    switch (type) {
        case TransportItemType.LOG:
            return toLogLogRecord(transportItem);
        case TransportItemType.EXCEPTION:
            return toErrorLogRecord(transportItem);
        case TransportItemType.EVENT:
            return toEventLogRecord(transportItem);
        case TransportItemType.MEASUREMENT:
            return toMeasurementLogRecord(transportItem);
        default:
            const error = `Unknown TransportItemType: ${type}`;
            internalLogger.error(error);
            throw new Error(error);
    }
}
function toLogLogRecord(transportItem) {
    var _a, _b;
    const { meta, payload } = transportItem;
    const timeUnixNano = toTimeUnixNano(payload.timestamp);
    const body = toAttributeValue(payload.message);
    return {
        timeUnixNano,
        severityNumber: 10,
        severityText: 'INFO2',
        body,
        attributes: getCommonLogAttributes(meta),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toEventLogRecord(transportItem) {
    var _a, _b;
    const { meta, payload } = transportItem;
    const timeUnixNano = toTimeUnixNano(payload.timestamp);
    const body = toAttributeValue(payload.name);
    return {
        timeUnixNano,
        body,
        attributes: [
            ...getCommonLogAttributes(meta),
            toAttribute('event.name', payload.name),
            toAttribute('event.domain', payload.domain),
            toAttribute('event.attributes', payload.attributes),
        ].filter(isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toErrorLogRecord(transportItem) {
    var _a, _b;
    const { meta, payload } = transportItem;
    const timeUnixNano = toTimeUnixNano(payload.timestamp);
    return {
        timeUnixNano,
        attributes: [
            ...getCommonLogAttributes(meta),
            toAttribute(SemanticAttributes.EXCEPTION_TYPE, payload.type),
            toAttribute(SemanticAttributes.EXCEPTION_MESSAGE, payload.value),
            // toAttribute(SemanticAttributes.EXCEPTION_STACKTRACE, undefined),
            toAttribute('faro.error.stacktrace', payload.stacktrace),
        ].filter(isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function toMeasurementLogRecord(transportItem) {
    var _a, _b;
    const { meta, payload } = transportItem;
    const timeUnixNano = toTimeUnixNano(payload.timestamp);
    const [measurementName, measurementValue] = Object.entries(payload.values).flat();
    return {
        timeUnixNano,
        attributes: [
            ...getCommonLogAttributes(meta),
            toAttribute('measurement.type', payload.type),
            toAttribute('measurement.name', measurementName),
            toAttribute('measurement.value', measurementValue),
        ].filter(isAttribute),
        traceId: (_a = payload.trace) === null || _a === void 0 ? void 0 : _a.trace_id,
        spanId: (_b = payload.trace) === null || _b === void 0 ? void 0 : _b.trace_id,
    };
}
function getCommonLogAttributes(meta) {
    const { view, page, session, user } = meta;
    return [
        toAttribute('view.name', view === null || view === void 0 ? void 0 : view.name),
        toAttribute(SemanticAttributes.HTTP_URL, page === null || page === void 0 ? void 0 : page.url),
        toAttribute('page.id', page === null || page === void 0 ? void 0 : page.id),
        toAttribute('page.attributes', page === null || page === void 0 ? void 0 : page.attributes),
        toAttribute('session.id', session === null || session === void 0 ? void 0 : session.id),
        toAttribute('session.attributes', session === null || session === void 0 ? void 0 : session.attributes),
        toAttribute(SemanticAttributes.ENDUSER_ID, user === null || user === void 0 ? void 0 : user.id),
        toAttribute('enduser.name', user === null || user === void 0 ? void 0 : user.username),
        toAttribute('enduser.email', user === null || user === void 0 ? void 0 : user.email),
        toAttribute('enduser.attributes', user === null || user === void 0 ? void 0 : user.attributes),
    ].filter(isAttribute);
}
function toTimeUnixNano(timestamp) {
    return Date.parse(timestamp) * 1e6;
}
//# sourceMappingURL=transform.js.map