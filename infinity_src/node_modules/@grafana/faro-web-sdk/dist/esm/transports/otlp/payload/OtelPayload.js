import { deepEqual, TransportItemType } from '@grafana/faro-core';
import { internalLogger } from '../otlpPayloadLogger';
import { toResourceLog, toScopeLog } from './transform';
export class OtelPayload {
    constructor(transportItem) {
        this.resourceLogsWithMetas = [];
        if (transportItem) {
            this.addResourceItem(transportItem);
        }
    }
    getPayload() {
        return {
            resourceLogs: this.resourceLogsWithMetas.map(({ resourceLog }) => resourceLog),
            resourceSpans: [],
            resourceMetrics: [],
        };
    }
    addResourceItem(transportItem) {
        const { type, meta } = transportItem;
        switch (type) {
            case TransportItemType.LOG:
            case TransportItemType.EXCEPTION:
            case TransportItemType.EVENT:
            case TransportItemType.MEASUREMENT:
                const resourceLogWithMeta = this.resourceLogsWithMetas.find(({ meta }) => deepEqual(transportItem.meta, meta));
                if (resourceLogWithMeta) {
                    const { resourceLog } = resourceLogWithMeta;
                    resourceLog.scopeLogs.push(toScopeLog(transportItem));
                }
                else {
                    this.resourceLogsWithMetas.push({
                        resourceLog: toResourceLog(transportItem),
                        meta,
                    });
                }
                break;
            case TransportItemType.TRACE:
                break;
            default:
                internalLogger.error(`Unknown TransportItemType: ${type}`);
                break;
        }
    }
}
//# sourceMappingURL=OtelPayload.js.map