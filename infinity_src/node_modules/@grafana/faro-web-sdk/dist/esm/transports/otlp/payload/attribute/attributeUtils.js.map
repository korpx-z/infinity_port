{"version":3,"file":"attributeUtils.js","sourceRoot":"","sources":["../../../../../../src/transports/otlp/payload/attribute/attributeUtils.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAE7F,MAAM,UAAU,gBAAgB,CAAC,KAAc;IAC7C,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;KAC/B;IAED,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;QAChB,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;KAC5B;IAED,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,EAAE,WAAW,EAAE,KAAe,EAAE,CAAC;KACzC;IAED,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;QACpB,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;KAC7B;IAED,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;QAClB,OAAO,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC;KAChE;IAED,IAAI,KAAK,YAAY,UAAU,EAAE;QAC/B,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;KAC9B;IAED,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO;YACL,WAAW,EAAE;gBACX,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;qBAC1B,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,cAAc,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;qBACpF,MAAM,CAAC,WAAW,CAAC;aACvB;SACF,CAAC;KACH;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,aAAqB,EAAE,cAAmB;IACpE,IAAI,cAAc,IAAI,IAAI,IAAI,cAAc,KAAK,EAAE,EAAE;QACnD,OAAO,SAAS,CAAC;KAClB;IAED,OAAO;QACL,GAAG,EAAE,aAAa;QAClB,KAAK,EAAE,gBAAgB,CAAC,cAAc,CAAC;KACxC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,IAAS;IACnC,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,CAAA,KAAK,QAAQ,IAAI,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAA,KAAK,WAAW,CAAC;AAC9F,CAAC","sourcesContent":["import type { IAnyValue, IKeyValue } from '@opentelemetry/otlp-transformer';\n\nimport { isArray, isBoolean, isInt, isNumber, isObject, isString } from '@grafana/faro-core';\n\nexport function toAttributeValue(value: unknown): IAnyValue {\n  if (isString(value)) {\n    return { stringValue: value };\n  }\n\n  if (isInt(value)) {\n    return { intValue: value };\n  }\n\n  if (isNumber(value)) {\n    return { doubleValue: value as number };\n  }\n\n  if (isBoolean(value)) {\n    return { boolValue: value };\n  }\n\n  if (isArray(value)) {\n    return { arrayValue: { values: value.map(toAttributeValue) } };\n  }\n\n  if (value instanceof Uint8Array) {\n    return { bytesValue: value };\n  }\n\n  if (isObject(value)) {\n    return {\n      kvlistValue: {\n        values: Object.entries(value)\n          .map(([attributeName, attributeValue]) => toAttribute(attributeName, attributeValue))\n          .filter(isAttribute),\n      },\n    };\n  }\n\n  return {};\n}\n\nexport function toAttribute(attributeName: string, attributeValue: any): IKeyValue | undefined {\n  if (attributeValue == null || attributeValue === '') {\n    return undefined;\n  }\n\n  return {\n    key: attributeName,\n    value: toAttributeValue(attributeValue),\n  };\n}\n\nexport function isAttribute(item: any): item is IKeyValue {\n  return Boolean(item) && typeof item?.key === 'string' && typeof item?.value !== 'undefined';\n}\n"]}