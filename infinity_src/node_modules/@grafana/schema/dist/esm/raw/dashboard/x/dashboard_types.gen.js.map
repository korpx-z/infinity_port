{"version":3,"file":"dashboard_types.gen.js","sources":["../../../../../src/raw/dashboard/x/dashboard_types.gen.ts"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     kinds/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     LatestMajorsOrXJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\n/**\n * TODO docs\n */\nexport interface AnnotationTarget {\n  limit: number;\n  matchAny: boolean;\n  tags: Array<string>;\n  type: string;\n}\n\nexport const defaultAnnotationTarget: Partial<AnnotationTarget> = {\n  tags: [],\n};\n\n/**\n * TODO docs\n * FROM: AnnotationQuery in grafana-data/src/types/annotations.ts\n */\nexport interface AnnotationQuery {\n  builtIn: number;\n  /**\n   * Datasource to use for annotation.\n   */\n  datasource: {\n    type?: string;\n    uid?: string;\n  };\n  /**\n   * Whether annotation is enabled.\n   */\n  enable: boolean;\n  /**\n   * Whether to hide annotation.\n   */\n  hide?: boolean;\n  /**\n   * Annotation icon color.\n   */\n  iconColor?: string;\n  /**\n   * Name of annotation.\n   */\n  name?: string;\n  /**\n   * Query for annotation data.\n   */\n  rawQuery?: string;\n  showIn: number;\n  target?: AnnotationTarget;\n  type: string;\n}\n\nexport const defaultAnnotationQuery: Partial<AnnotationQuery> = {\n  builtIn: 0,\n  enable: true,\n  hide: false,\n  showIn: 0,\n  type: 'dashboard',\n};\n\n/**\n * FROM: packages/grafana-data/src/types/templateVars.ts\n * TODO docs\n * TODO what about what's in public/app/features/types.ts?\n * TODO there appear to be a lot of different kinds of [template] vars here? if so need a disjunction\n */\nexport interface VariableModel {\n  datasource?: DataSourceRef;\n  description?: string;\n  error?: Record<string, unknown>;\n  global: boolean;\n  hide: VariableHide;\n  id: string;\n  index: number;\n  label?: string;\n  name: string;\n  /**\n   * TODO: Move this into a separated QueryVariableModel type\n   */\n  query?: (string | Record<string, unknown>);\n  rootStateKey?: string;\n  skipUrlSync: boolean;\n  state: LoadingState;\n  type: VariableType;\n}\n\nexport const defaultVariableModel: Partial<VariableModel> = {\n  global: false,\n  id: '00000000-0000-0000-0000-000000000000',\n  index: -1,\n  skipUrlSync: false,\n};\n\nexport enum VariableHide {\n  dontHide = 0,\n  hideLabel = 1,\n  hideVariable = 2,\n}\n\nexport enum LoadingState {\n  Done = 'Done',\n  Error = 'Error',\n  Loading = 'Loading',\n  NotStarted = 'NotStarted',\n  Streaming = 'Streaming',\n}\n\n/**\n * Ref to a DataSource instance\n */\nexport interface DataSourceRef {\n  /**\n   * The plugin type-id\n   */\n  type?: string;\n  /**\n   * Specific datasource instance\n   */\n  uid?: string;\n}\n\n/**\n * FROM public/app/features/dashboard/state/DashboardModels.ts - ish\n * TODO docs\n */\nexport interface DashboardLink {\n  asDropdown: boolean;\n  icon: string;\n  includeVars: boolean;\n  keepTime: boolean;\n  tags: Array<string>;\n  targetBlank: boolean;\n  title: string;\n  tooltip: string;\n  type: DashboardLinkType;\n  url: string;\n}\n\nexport const defaultDashboardLink: Partial<DashboardLink> = {\n  asDropdown: false,\n  includeVars: false,\n  keepTime: false,\n  tags: [],\n  targetBlank: false,\n};\n\n/**\n * TODO docs\n */\nexport type DashboardLinkType = ('link' | 'dashboards');\n\n/**\n * FROM: packages/grafana-data/src/types/templateVars.ts\n * TODO docs\n * TODO this implies some wider pattern/discriminated union, probably?\n */\nexport type VariableType = ('query' | 'adhoc' | 'constant' | 'datasource' | 'interval' | 'textbox' | 'custom' | 'system');\n\n/**\n * TODO docs\n */\nexport enum FieldColorModeId {\n  ContinuousGrYlRd = 'continuous-GrYlRd',\n  Fixed = 'fixed',\n  PaletteClassic = 'palette-classic',\n  PaletteSaturated = 'palette-saturated',\n  Thresholds = 'thresholds',\n}\n\n/**\n * TODO docs\n */\nexport type FieldColorSeriesByMode = ('min' | 'max' | 'last');\n\n/**\n * TODO docs\n */\nexport interface FieldColor {\n  /**\n   * Stores the fixed color value if mode is fixed\n   */\n  fixedColor?: string;\n  /**\n   * The main color scheme mode\n   */\n  mode: FieldColorModeId;\n  /**\n   * Some visualizations need to know how to assign a series color from by value color schemes\n   */\n  seriesBy?: FieldColorSeriesByMode;\n}\n\nexport interface GridPos {\n  /**\n   * Panel\n   */\n  h: number;\n  /**\n   * true if fixed\n   */\n  static?: boolean;\n  /**\n   * Panel\n   */\n  w: number;\n  /**\n   * Panel x\n   */\n  x: number;\n  /**\n   * Panel y\n   */\n  y: number;\n}\n\nexport const defaultGridPos: Partial<GridPos> = {\n  h: 9,\n  w: 12,\n  x: 0,\n  y: 0,\n};\n\n/**\n * TODO docs\n */\nexport interface Threshold {\n  /**\n   * TODO docs\n   */\n  color: string;\n  /**\n   * Threshold index, an old property that is not needed an should only appear in older dashboards\n   */\n  index?: number;\n  /**\n   * TODO docs\n   * TODO are the values here enumerable into a disjunction?\n   * Some seem to be listed in typescript comment\n   */\n  state?: string;\n  /**\n   * TODO docs\n   * FIXME the corresponding typescript field is required/non-optional, but nulls currently appear here when serializing -Infinity to JSON\n   */\n  value?: number;\n}\n\nexport enum ThresholdsMode {\n  Absolute = 'absolute',\n  Percentage = 'percentage',\n}\n\nexport interface ThresholdsConfig {\n  mode: ThresholdsMode;\n  /**\n   * Must be sorted by 'value', first value is always -Infinity\n   */\n  steps: Array<Threshold>;\n}\n\nexport const defaultThresholdsConfig: Partial<ThresholdsConfig> = {\n  steps: [],\n};\n\n/**\n * TODO docs\n */\nexport type ValueMapping = (ValueMap | RangeMap | RegexMap | SpecialValueMap);\n\n/**\n * TODO docs\n */\nexport enum MappingType {\n  RangeToText = 'range',\n  RegexToText = 'regex',\n  SpecialValue = 'special',\n  ValueToText = 'value',\n}\n\n/**\n * TODO docs\n */\nexport interface ValueMap {\n  options: Record<string, ValueMappingResult>;\n  type: MappingType.ValueToText;\n}\n\n/**\n * TODO docs\n */\nexport interface RangeMap {\n  options: {\n    /**\n     * to and from are `number | null` in current ts, really not sure what to do\n     */\n    from: number;\n    to: number;\n    result: ValueMappingResult;\n  };\n  type: MappingType.RangeToText;\n}\n\n/**\n * TODO docs\n */\nexport interface RegexMap {\n  options: {\n    pattern: string;\n    result: ValueMappingResult;\n  };\n  type: MappingType.RegexToText;\n}\n\n/**\n * TODO docs\n */\nexport interface SpecialValueMap {\n  options: {\n    match: ('true' | 'false');\n    pattern: string;\n    result: ValueMappingResult;\n  };\n  type: MappingType.SpecialValue;\n}\n\n/**\n * TODO docs\n */\nexport enum SpecialValueMatch {\n  Empty = 'empty',\n  False = 'false',\n  NaN = 'nan',\n  Null = 'null',\n  NullAndNan = 'null+nan',\n  True = 'true',\n}\n\n/**\n * TODO docs\n */\nexport interface ValueMappingResult {\n  color?: string;\n  icon?: string;\n  index?: number;\n  text?: string;\n}\n\n/**\n * TODO docs\n */\nexport interface DataTransformerConfig {\n  /**\n   * Disabled transformations are skipped\n   */\n  disabled?: boolean;\n  /**\n   * Optional frame matcher.  When missing it will be applied to all results\n   */\n  filter?: MatcherConfig;\n  /**\n   * Unique identifier of transformer\n   */\n  id: string;\n  /**\n   * Options to be passed to the transformer\n   * Valid options depend on the transformer id\n   */\n  options: unknown;\n}\n\n/**\n * 0 for no shared crosshair or tooltip (default).\n * 1 for shared crosshair.\n * 2 for shared crosshair AND shared tooltip.\n */\nexport enum DashboardCursorSync {\n  Crosshair = 1,\n  Off = 0,\n  Tooltip = 2,\n}\n\nexport const defaultDashboardCursorSync: DashboardCursorSync = DashboardCursorSync.Off;\n\n/**\n * Dashboard panels. Panels are canonically defined inline\n * because they share a version timeline with the dashboard\n * schema; they do not evolve independently.\n */\nexport interface Panel {\n  /**\n   * The datasource used in all targets.\n   */\n  datasource?: {\n    type?: string;\n    uid?: string;\n  };\n  /**\n   * Description.\n   */\n  description?: string;\n  fieldConfig: FieldConfigSource;\n  /**\n   * Grid position.\n   */\n  gridPos?: GridPos;\n  /**\n   * TODO docs\n   */\n  id?: number;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  interval?: string;\n  /**\n   * Dynamically load the panel\n   */\n  libraryPanel?: LibraryPanelRef;\n  /**\n   * Panel links.\n   * TODO fill this out - seems there are a couple variants?\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * TODO docs\n   */\n  maxDataPoints?: number;\n  /**\n   * options is specified by the PanelOptions field in panel\n   * plugin schemas.\n   */\n  options: Record<string, unknown>;\n  /**\n   * FIXME this almost certainly has to be changed in favor of scuemata versions\n   */\n  pluginVersion?: string;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  /**\n   * Direction to repeat in if 'repeat' is set.\n   * \"h\" for horizontal, \"v\" for vertical.\n   * TODO this is probably optional\n   */\n  repeatDirection: ('h' | 'v');\n  /**\n   * Id of the repeating panel.\n   */\n  repeatPanelId?: number;\n  /**\n   * TODO docs\n   */\n  tags?: Array<string>;\n  /**\n   * TODO docs\n   */\n  targets?: Array<Record<string, unknown>>;\n  /**\n   * TODO docs - seems to be an old field from old dashboard alerts?\n   */\n  thresholds?: Array<unknown>;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  timeFrom?: string;\n  /**\n   * TODO docs\n   */\n  timeRegions?: Array<unknown>;\n  /**\n   * TODO docs\n   * TODO tighter constraint\n   */\n  timeShift?: string;\n  /**\n   * Panel title.\n   */\n  title?: string;\n  transformations: Array<DataTransformerConfig>;\n  /**\n   * Whether to display the panel without a background.\n   */\n  transparent: boolean;\n  /**\n   * The panel plugin type id. May not be empty.\n   */\n  type: string;\n}\n\nexport const defaultPanel: Partial<Panel> = {\n  links: [],\n  repeatDirection: 'h',\n  tags: [],\n  targets: [],\n  thresholds: [],\n  timeRegions: [],\n  transformations: [],\n  transparent: false,\n};\n\nexport interface FieldConfigSource {\n  defaults: FieldConfig;\n  overrides: Array<{\n    matcher: MatcherConfig;\n    properties: Array<{\n      id: string;\n      value?: unknown;\n    }>;\n  }>;\n}\n\nexport const defaultFieldConfigSource: Partial<FieldConfigSource> = {\n  overrides: [],\n};\n\nexport interface LibraryPanelRef {\n  name: string;\n  uid: string;\n}\n\nexport interface MatcherConfig {\n  id: string;\n  options?: unknown;\n}\n\nexport const defaultMatcherConfig: Partial<MatcherConfig> = {\n  id: '',\n};\n\nexport interface FieldConfig {\n  /**\n   * Map values to a display color\n   */\n  color?: FieldColor;\n  /**\n   * custom is specified by the PanelFieldConfig field\n   * in panel plugin schemas.\n   */\n  custom?: Record<string, unknown>;\n  /**\n   * Significant digits (for display)\n   */\n  decimals?: number;\n  /**\n   * Human readable field metadata\n   */\n  description?: string;\n  /**\n   * The display value for this field.  This supports template variables blank is auto\n   */\n  displayName?: string;\n  /**\n   * This can be used by data sources that return and explicit naming structure for values and labels\n   * When this property is configured, this value is used rather than the default naming strategy.\n   */\n  displayNameFromDS?: string;\n  /**\n   * True if data source field supports ad-hoc filters\n   */\n  filterable?: boolean;\n  /**\n   * The behavior when clicking on a result\n   */\n  links?: Array<unknown>;\n  /**\n   * Convert input values into a display string\n   */\n  mappings?: Array<ValueMapping>;\n  max?: number;\n  min?: number;\n  /**\n   * Alternative to empty string\n   */\n  noValue?: string;\n  /**\n   * An explicit path to the field in the datasource.  When the frame meta includes a path,\n   * This will default to `${frame.meta.path}/${field.name}\n   * \n   * When defined, this value can be used as an identifier within the datasource scope, and\n   * may be used to update the results\n   */\n  path?: string;\n  /**\n   * Map numeric values to states\n   */\n  thresholds?: ThresholdsConfig;\n  /**\n   * Numeric Options\n   */\n  unit?: string;\n  /**\n   * True if data source can write a value to the path.  Auth/authz are supported separately\n   */\n  writeable?: boolean;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  links: [],\n  mappings: [],\n};\n\n/**\n * Row panel\n */\nexport interface RowPanel {\n  collapsed: boolean;\n  /**\n   * Name of default datasource.\n   */\n  datasource?: {\n    type?: string;\n    uid?: string;\n  };\n  gridPos?: GridPos;\n  id: number;\n  panels: Array<(Panel | GraphPanel | HeatmapPanel)>;\n  /**\n   * Name of template variable to repeat for.\n   */\n  repeat?: string;\n  title?: string;\n  type: 'row';\n}\n\nexport const defaultRowPanel: Partial<RowPanel> = {\n  collapsed: false,\n  panels: [],\n};\n\n/**\n * Support for legacy graph and heatmap panels.\n */\nexport interface GraphPanel {\n  /**\n   * @deprecated this is part of deprecated graph panel\n   */\n  legend?: {\n    show: boolean;\n    sort?: string;\n    sortDesc?: boolean;\n  };\n  type: 'graph';\n}\n\nexport interface HeatmapPanel {\n  type: 'heatmap';\n}\n\nexport interface Dashboard {\n  /**\n   * TODO docs\n   */\n  annotations?: {\n    list?: Array<AnnotationQuery>;\n  };\n  /**\n   * Description of dashboard.\n   */\n  description?: string;\n  /**\n   * Whether a dashboard is editable or not.\n   */\n  editable: boolean;\n  /**\n   * The month that the fiscal year starts on.  0 = January, 11 = December\n   */\n  fiscalYearStartMonth?: number;\n  /**\n   * For dashboards imported from the https://grafana.com/grafana/dashboards/ portal\n   */\n  gnetId?: string;\n  /**\n   * Configuration of dashboard cursor sync behavior.\n   */\n  graphTooltip: DashboardCursorSync;\n  /**\n   * Unique numeric identifier for the dashboard.\n   * TODO must isolate or remove identifiers local to a Grafana instance...?\n   */\n  id?: number;\n  /**\n   * TODO docs\n   */\n  links?: Array<DashboardLink>;\n  /**\n   * When set to true, the dashboard will redraw panels at an interval matching the pixel width.\n   * This will keep data \"moving left\" regardless of the query refresh rate.  This setting helps\n   * avoid dashboards presenting stale live data\n   */\n  liveNow?: boolean;\n  panels?: Array<(Panel | RowPanel | GraphPanel | HeatmapPanel)>;\n  /**\n   * Refresh rate of dashboard. Represented via interval string, e.g. \"5s\", \"1m\", \"1h\", \"1d\".\n   */\n  refresh?: (string | false);\n  /**\n   * This property should only be used in dashboards defined by plugins.  It is a quick check\n   * to see if the version has changed since the last time.  Unclear why using the version property\n   * is insufficient.\n   */\n  revision?: number;\n  /**\n   * Version of the JSON schema, incremented each time a Grafana update brings\n   * changes to said schema.\n   * TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion\n   */\n  schemaVersion: number;\n  snapshot?: {\n    /**\n     * TODO docs\n     */\n    created: string;\n    /**\n     * TODO docs\n     */\n    expires: string;\n    /**\n     * TODO docs\n     */\n    external: boolean;\n    /**\n     * TODO docs\n     */\n    externalUrl: string;\n    /**\n     * TODO docs\n     */\n    id: number;\n    /**\n     * TODO docs\n     */\n    key: string;\n    /**\n     * TODO docs\n     */\n    name: string;\n    /**\n     * TODO docs\n     */\n    orgId: number;\n    /**\n     * TODO docs\n     */\n    updated: string;\n    /**\n     * TODO docs\n     */\n    url?: string;\n    /**\n     * TODO docs\n     */\n    userId: number;\n  };\n  /**\n   * Theme of dashboard.\n   */\n  style: ('light' | 'dark');\n  /**\n   * Tags associated with dashboard.\n   */\n  tags?: Array<string>;\n  /**\n   * TODO docs\n   */\n  templating?: {\n    list?: Array<VariableModel>;\n  };\n  /**\n   * Time range for dashboard, e.g. last 6 hours, last 7 days, etc\n   */\n  time?: {\n    from: string;\n    to: string;\n  };\n  /**\n   * TODO docs\n   * TODO this appears to be spread all over in the frontend. Concepts will likely need tidying in tandem with schema changes\n   */\n  timepicker?: {\n    /**\n     * Whether timepicker is collapsed or not.\n     */\n    collapse: boolean;\n    /**\n     * Whether timepicker is enabled or not.\n     */\n    enable: boolean;\n    /**\n     * Whether timepicker is visible or not.\n     */\n    hidden: boolean;\n    /**\n     * Selectable intervals for auto-refresh.\n     */\n    refresh_intervals: Array<string>;\n    /**\n     * TODO docs\n     */\n    time_options: Array<string>;\n  };\n  /**\n   * Timezone of dashboard. Accepts IANA TZDB zone ID or \"browser\" or \"utc\".\n   */\n  timezone?: string;\n  /**\n   * Title of dashboard.\n   */\n  title?: string;\n  /**\n   * Unique dashboard identifier that can be generated by anyone. string (8-40)\n   */\n  uid?: string;\n  /**\n   * Version of the dashboard, incremented each time the dashboard is updated.\n   */\n  version?: number;\n  /**\n   * TODO docs\n   */\n  weekStart?: string;\n}\n\nexport const defaultDashboard: Partial<Dashboard> = {\n  editable: true,\n  fiscalYearStartMonth: 0,\n  graphTooltip: DashboardCursorSync.Off,\n  links: [],\n  panels: [],\n  schemaVersion: 36,\n  style: 'dark',\n  tags: [],\n  timezone: 'browser',\n};\n"],"names":["LoadingState","FieldColorModeId","ThresholdsMode","MappingType","SpecialValueMatch","DashboardCursorSync"],"mappings":"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"}