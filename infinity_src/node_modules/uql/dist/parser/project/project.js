"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.project = void 0;
var lodash_1 = require("lodash");
var utils_1 = require("./../utils");
var project = function (pv, cv) {
    var output = pv.output;
    if (typeof output === "object") {
        if ((0, lodash_1.isArray)(output)) {
            var refs_1 = cv.value.filter(function (v) { return v.type === "ref"; });
            var functions_1 = cv.value.filter(function (v) { return v.type === "function"; });
            output = output.map(function (o) {
                var oo = {};
                refs_1.forEach(function (r) {
                    if (r.type === "ref") {
                        var key = r.alias || r.value;
                        (0, lodash_1.set)(oo, key, (0, utils_1.get_single_value)(o, r.value));
                    }
                });
                functions_1.forEach(function (f) {
                    if (f.type === "function") {
                        var key = f.alias || f.operator;
                        var args = f.args.map(function (arg) {
                            if (arg.type === "ref")
                                return (0, utils_1.get_single_value)(o, arg.value);
                            else if (arg.type === "string")
                                return arg.value;
                            else if (arg.type === "number")
                                return +arg.value;
                        });
                        var value = (0, utils_1.get_value)(f.operator, args);
                        (0, lodash_1.set)(oo, key, value);
                    }
                });
                return oo;
            });
        }
        else {
            var refs = cv.value.filter(function (v) { return v.type === "ref"; });
            var functions = cv.value.filter(function (v) { return v.type === "function"; });
            var oo_1 = {};
            var isSingle = cv.value.filter(function (v) { return v.type === "ref" || v.type === "function"; }).length === 1;
            refs.forEach(function (r) {
                if (r.type === "ref") {
                    var key = r.alias || r.value;
                    (0, lodash_1.set)(oo_1, key, (0, utils_1.get_single_value)(output, r.value));
                }
            });
            functions.forEach(function (f) {
                if (f.type === "function") {
                    var key = f.alias || f.operator;
                    var args = f.args.map(function (arg) {
                        if (arg.type === "ref")
                            return (0, utils_1.get_single_value)(output, arg.value);
                        else if (arg.type === "string")
                            return arg.value;
                        else if (arg.type === "number")
                            return +arg.value;
                    });
                    var value = (0, utils_1.get_value)(f.operator, args, output);
                    (0, lodash_1.set)(oo_1, key, value);
                }
            });
            if (isSingle && refs.length === 1 && refs[0].type === "ref") {
                output = oo_1[refs[0].alias || refs[0].value];
            }
            else if (isSingle && functions.length === 1 && functions[0].type === "function") {
                output = oo_1[functions[0].alias || functions[0].operator];
            }
            else {
                output = oo_1;
            }
        }
    }
    return __assign(__assign({}, pv), { output: output });
};
exports.project = project;
