"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UQLsummarize = exports.summarize = void 0;
var lodash_1 = require("lodash");
var utils_1 = require("../utils");
var summarize = function (pv, cv) {
    var output = pv.output;
    var item = cv.value;
    var groupByValues = item.by;
    if (groupByValues.length === 1) {
        var groupByKey_1 = groupByValues[0].value;
        var groupedResult = (0, lodash_1.groupBy)(pv.output, groupByKey_1);
        var o_1 = [];
        (0, lodash_1.forEach)(groupedResult, function (g, key) {
            var _a;
            var s = (0, exports.UQLsummarize)({}, item.metrics, g);
            o_1.push(__assign((_a = {}, _a[groupByKey_1] = key, _a), s));
        });
        output = o_1;
    }
    else if (groupByValues.length > 1) {
        var groups = (0, lodash_1.groupBy)(output, function (a) {
            return item.by.map(function (g) { return (0, lodash_1.toString)(a[g.value]); }).join("#___#");
        });
        var out_1 = [];
        (0, lodash_1.forEach)(groups, function (group) {
            var o = {};
            item.by.forEach(function (gi) {
                var _a;
                o[gi.value] = (_a = (0, lodash_1.first)(group)) === null || _a === void 0 ? void 0 : _a[gi.value];
            });
            var s = (0, exports.UQLsummarize)(o, item.metrics, group);
            out_1.push(s);
        });
        output = out_1;
    }
    else {
        output = (0, exports.UQLsummarize)({}, item.metrics, output);
    }
    return __assign(__assign({}, pv), { output: output });
};
exports.summarize = summarize;
var IsConditionalSummaryMetric = function (i) {
    if (i.operator === "countif" || i.operator === "sumif" || i.operator === "minif" || i.operator === "maxif") {
        return true;
    }
    return false;
};
var UQLsummarize = function (o, metrics, pi) {
    metrics.forEach(function (i) {
        if (IsConditionalSummaryMetric(i)) {
            var input = (0, utils_1.filterData)(pi, i.condition);
            var statName = i.alias || "".concat(i.ref.value, " (").concat(i.operator, ")");
            var val = void 0;
            if (typeof input === "object" && (0, lodash_1.isArray)(input)) {
                switch (i.operator) {
                    case "countif":
                        (0, lodash_1.set)(o, statName, input.length);
                        break;
                    case "sumif":
                        val = input.length > 0 ? (0, lodash_1.sum)(input.map(function (p) { return (0, utils_1.get_single_value)(p, i.ref.value); })) : (0, lodash_1.sum)(input);
                        (0, lodash_1.set)(o, statName, val);
                        break;
                    case "minif":
                        val = input.length > 0 ? (0, lodash_1.min)(input.map(function (p) { return (0, utils_1.get_single_value)(p, i.ref.value); })) : (0, lodash_1.min)(input);
                        (0, lodash_1.set)(o, statName, val);
                        break;
                    case "maxif":
                        val = input.length > 0 ? (0, lodash_1.max)(input.map(function (p) { return (0, utils_1.get_single_value)(p, i.ref.value); })) : (0, lodash_1.max)(input);
                        (0, lodash_1.set)(o, statName, val);
                        break;
                    default:
                        break;
                }
            }
        }
        else {
            var args_1 = i.args || [];
            var statName = args_1.length > 0 ? "".concat(args_1[0].value, " (").concat(i.operator, ")") : i.operator;
            statName = i.alias ? i.alias : statName;
            var val = void 0;
            switch (i.operator) {
                case "count":
                    (0, lodash_1.set)(o, statName, pi.length);
                    break;
                case "dcount":
                    val = args_1.length > 0 ? pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); }) : [pi];
                    (0, lodash_1.set)(o, statName, (0, lodash_1.uniq)(val).length);
                    break;
                case "mean":
                    val = args_1.length > 0 ? (0, lodash_1.mean)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.mean)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                case "sum":
                    val = args_1.length > 0 ? (0, lodash_1.sum)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.sum)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                case "min":
                    val = args_1.length > 0 ? (0, lodash_1.min)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.min)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                case "max":
                    val = args_1.length > 0 ? (0, lodash_1.max)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.max)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                case "first":
                    val = args_1.length > 0 ? (0, lodash_1.first)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.first)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                case "last":
                case "latest":
                    val = args_1.length > 0 ? (0, lodash_1.last)(pi.map(function (p) { return (0, utils_1.get_single_value)(p, args_1[0].value); })) : (0, lodash_1.last)(pi);
                    (0, lodash_1.set)(o, statName, val);
                    break;
                default:
                    break;
            }
        }
    });
    return o;
};
exports.UQLsummarize = UQLsummarize;
