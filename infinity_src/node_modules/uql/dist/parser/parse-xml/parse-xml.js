"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseXML = void 0;
var fast_xml_parser_1 = require("fast-xml-parser");
var parseXML = function (pv, cv) {
    var output = pv.output;
    if (typeof pv.output === "string") {
        var xml_parser_options = get_parse_xml_options(cv.args);
        var parser = new fast_xml_parser_1.XMLParser(xml_parser_options);
        output = parser.parse(pv.output);
    }
    return __assign(__assign({}, pv), { output: output });
};
exports.parseXML = parseXML;
var get_parse_xml_options = function (args) {
    var options = { ignoreAttributes: false, allowBooleanAttributes: true, commentPropName: "#comments" };
    if (args[0] && args[0].length > 0) {
        args[0].forEach(function (arg) {
            switch (arg.identifier) {
                case "ignoreAttributes":
                case "allowBooleanAttributes":
                case "alwaysCreateTextNode":
                case "preserveOrder":
                case "parseTagValue":
                case "parseAttributeValue":
                case "trimValues":
                    options[arg.identifier] = arg.value.toLowerCase() === "true";
                    break;
                case "commentPropName":
                    options["commentPropName"] = arg.value || "#comment";
                    break;
                case "attributeNamePrefix":
                    options["attributeNamePrefix"] = arg.value || "@_";
                    break;
                default:
                    // @ts-ignore
                    options[arg.identifier] = arg.value.toLowerCase() === "true" ? true : arg.value.toLowerCase() === "false" ? false : arg.value;
                    break;
            }
        });
    }
    return options;
};
