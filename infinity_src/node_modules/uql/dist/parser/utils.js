"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterData = exports.get_value = exports.get_single_value = void 0;
var lodash_1 = require("lodash");
var dayjs = require("dayjs");
var get_single_value = function (input, query) {
    return (0, lodash_1.get)(input, query);
};
exports.get_single_value = get_single_value;
var get_value = function (operator, args, previous_value) {
    switch (operator) {
        case "tolower":
            return (args[0] + "").toLowerCase();
        case "toupper":
            return (args[0] + "").toUpperCase();
        case "strlen":
            return (args[0] + "").length;
        case "reverse":
            return typeof args[0] === "string" ? args[0].split("").reverse().join("") : null;
        case "split":
            if (args.length >= 1 && typeof args[0] === "string") {
                return (args[0] || "").split(typeof args[1] === "string" ? args[1] : "");
            }
            return [];
        case "substring":
            if (typeof args[0] === "string") {
                return args[0].substring(args[1], args[2]);
            }
            return "";
        case "replace_string":
            if (args.length >= 2 && typeof args[0] === "string" && typeof args[1] === "string") {
                return (args[0] || "").replace(new RegExp(args[1], args[3] || "g"), typeof args[2] === "string" ? args[2] : "");
            }
            return args[0] || "";
        case "atob":
            return Buffer.from(args[0], "base64").toString("ascii");
        case "btoa":
            return Buffer.from(args[0]).toString("base64");
        case "trim":
            return (args[0] + "").trim();
        case "trim_start":
            return (args[0] + "").trimStart();
        case "trim_end":
            return (args[0] + "").trimEnd();
        case "strcat":
            return args.join("");
        case "sum":
            return (0, lodash_1.sum)(args);
        case "diff":
            return args[0] - args[1];
        case "mul":
            if (typeof args === "object" && (0, lodash_1.isArray)(args)) {
                return args.reduce(function (a, b) { return a * b; }, 1);
            }
            return args[0] * args[1];
        case "div":
            return args[0] / args[1];
        case "percentage":
            if (args.length === 2) {
                return (args[0] / args[1]) * 100;
            }
            return null;
        case "min":
            return (0, lodash_1.min)(args);
        case "max":
            return (0, lodash_1.max)(args);
        case "mean":
            return (0, lodash_1.mean)(args);
        case "first":
            return (0, lodash_1.first)(args);
        case "last":
        case "latest":
            return (0, lodash_1.last)(args);
        case "sign":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.sign(args[0]);
            }
            return null;
        case "sin":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.sin(args[0]);
            }
            return null;
        case "cos":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.cos(args[0]);
            }
            return null;
        case "tan":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.tan(args[0]);
            }
            return null;
        case "pow":
            if (args.length > 1 && typeof args[0] === "number" && typeof args[1] === "number") {
                return Math.pow(args[0], args[1]);
            }
            return null;
        case "round":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.round(args[0]);
            }
            return null;
        case "ceil":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.ceil(args[0]);
            }
            return null;
        case "floor":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.floor(args[0]);
            }
            return null;
        case "log":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.log(args[0]);
            }
            return null;
        case "log2":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.log2(args[0]);
            }
            return null;
        case "log10":
            if (args.length > 0 && typeof args[0] === "number") {
                return Math.log10(args[0]);
            }
            return null;
        case "extract":
            if (args.length >= 3) {
                var reg = args[0] || "";
                var index = args.length > 1 ? args[1] : 0;
                var input = args[2] || "";
                var match = input.match(reg);
                var out_1 = match === null ? null : match[index];
                if (out_1 !== null) {
                    switch (args[3]) {
                        case "number":
                            return +out_1;
                        case "date":
                            return new Date(out_1);
                        default:
                            return out_1;
                    }
                }
            }
            return null;
        case "parse_url":
            if (typeof args[0] === "string" && args[0] !== "") {
                try {
                    var url = new URL(args[0]);
                    if (args.length === 3 && (args[1] === "search" || args[1] === "query")) {
                        return url.searchParams.get(args[2]) || "";
                    }
                    else if (args.length === 2) {
                        return url[args[1]] || "";
                    }
                    else {
                        return url.toString();
                    }
                }
                catch (ex) {
                    return "";
                }
            }
            return "";
        case "parse_urlquery":
            if (typeof args[0] === "string") {
                var searchParams = new URLSearchParams(args[0]);
                if (args.length == 2) {
                    return searchParams.get(args[1]) || "";
                }
                else {
                    var o_1 = {};
                    searchParams.forEach(function (value, key) { return (o_1[key] = value); });
                    return o_1;
                }
            }
            return "";
        case "kv":
            var out_2 = [];
            if (args.length > 0 && typeof args[0] === "object") {
                (0, lodash_1.forEach)(args[0], function (value, key) {
                    out_2.push({ key: key, value: value });
                });
            }
            else if (args.length === 0 && previous_value && typeof previous_value === "object") {
                (0, lodash_1.forEach)(previous_value, function (value, key) {
                    out_2.push({ key: key, value: value });
                });
            }
            return out_2;
        case "array_to_map":
            var outMap_1 = {};
            if (typeof args[0] === "object" && (0, lodash_1.isArray)(args[0])) {
                args[0].forEach(function (item, idx) {
                    outMap_1[args[idx + 1] || idx] = item;
                });
            }
            else if (typeof args[0] === "object") {
                return args[0];
            }
            return outMap_1;
        case "array_from_entries":
            var arrayResult = [];
            if (args.length >= 2 && typeof args[1] === "object" && (0, lodash_1.isArray)(args[1])) {
                var _loop_1 = function (index) {
                    var out_3 = {};
                    args.forEach(function (arg, idx) {
                        var _a, _b;
                        if (typeof arg === "string" && idx % 2 == 0) {
                            out_3[arg] = (_b = (_a = args[idx + 1]) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : null;
                        }
                    });
                    arrayResult.push(out_3);
                };
                for (var index = 0; index < args[1].length; index++) {
                    _loop_1(index);
                }
            }
            return arrayResult;
        case "pack":
        case "bag_pack":
            var packResult_1 = {};
            args.forEach(function (arg, index) {
                if (index % 2 === 0) {
                    packResult_1[arg] = args[index + 1];
                }
            });
            return packResult_1;
        case "toint":
        case "tolong":
        case "todouble":
        case "tofloat":
        case "tonumber":
            return +(args[0] || "");
        case "tobool":
            if (typeof args[0] === "string")
                return args[0].toLowerCase() === "true" ? true : false;
            else if (typeof args[0] === "number")
                return args[0] <= 0 ? true : false;
            else
                return args[0];
        case "tostring":
            return args[0] + "";
        case "todatetime":
            if (typeof args[0] === "number")
                return new Date(args[0] + "");
            return new Date(args[0] || "");
        case "tounixtime":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return args[0].getTime();
            return args[0];
        case "format_datetime":
            try {
                if (typeof args[0] === "object" && typeof args[0].getTime === "function" && typeof args[1] === "string")
                    return dayjs(args[0]).format(args[1]);
                return args[0];
            }
            catch (ex) {
                console.error(ex);
                return null;
            }
        case "add_datetime":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function" && typeof args[1] === "string") {
                var numberParts = args[1].match(/[\-\d]+/g) || [];
                var textParts = args[1].match(/[A-Za-z]+/g) || [];
                if (numberParts.length > 0 && textParts.length > 0) {
                    var o = dayjs(args[0]).add(numberParts[0] === "-" ? -1 : +(numberParts[0] || ""), textParts[0]);
                    return o.toDate();
                }
            }
            return args[0];
        case "startofminute":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("m").toDate();
            return args[0];
        case "startofhour":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("h").toDate();
            return args[0];
        case "startofday":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("d").toDate();
            return args[0];
        case "startofweek":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("w").toDate();
            return args[0];
        case "startofmonth":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("M").toDate();
            return args[0];
        case "startofyear":
            if (typeof args[0] === "object" && typeof args[0].getTime === "function")
                return dayjs(args[0]).startOf("y").toDate();
            return args[0];
        case "unixtime_seconds_todatetime":
            if (typeof args[0] === "string")
                return new Date(+args[0] * 1000);
            return new Date(args[0] * 1000);
        case "unixtime_milliseconds_todatetime":
            if (typeof args[0] === "string")
                return new Date(+args[0]);
            return new Date(args[0]);
        case "unixtime_microseconds_todatetime":
            if (typeof args[0] === "string")
                return new Date(+args[0] / 1000);
            return new Date(args[0] / 1000);
        case "unixtime_nanoseconds_todatetime":
            if (typeof args[0] === "string")
                return new Date(+args[0] / 1000 / 1000);
            return new Date(args[0] / 1000 / 1000);
        case "random":
            return lodash_1.random.apply(void 0, args);
        case "distinct":
            if (args.length > 0) {
                return (0, lodash_1.uniq)(args[0]);
            }
            else if (args.length === 0 && previous_value && typeof previous_value === "object" && (0, lodash_1.isArray)(previous_value)) {
                return (0, lodash_1.uniq)(previous_value);
            }
            return null;
        case "dcount":
        default:
            throw "not implemented";
    }
};
exports.get_value = get_value;
var filterData = function (output, args) {
    if (typeof output === "object" && (0, lodash_1.isArray)(output) && args.length >= 3 && args[1].type === "operation") {
        return output.filter(function (o) {
            var lhs = args[0].value;
            var rhs = args[2].value;
            var rhs_rgs = args[2].type === "value_array"
                ? (0, lodash_1.flatten)(args[2].value.map(function (v) {
                    if (v.type === "ref")
                        return (0, exports.get_single_value)(o, v.value);
                    return v.value;
                }))
                : [];
            if (args[0].type === "ref") {
                lhs = (0, exports.get_single_value)(o, args[0].value);
            }
            if (args[2].type === "ref") {
                rhs = (0, exports.get_single_value)(o, args[2].value);
            }
            if (args[1].type === "operation") {
                switch (args[1].value) {
                    case "==":
                        return lhs === rhs;
                    case "!=":
                        return lhs !== rhs;
                    case ">":
                        return lhs > rhs;
                    case ">=":
                        return lhs >= rhs;
                    case "<":
                        return lhs < rhs;
                    case "<=":
                        return lhs <= rhs;
                    case "between":
                        if (args[2].type === "value_array" && rhs_rgs.length >= 2) {
                            return lhs >= rhs_rgs[0] && lhs <= rhs_rgs[1];
                        }
                        return false;
                    case "inside":
                        if (args[2].type === "value_array" && rhs_rgs.length >= 2) {
                            return lhs > rhs_rgs[0] && lhs < rhs_rgs[1];
                        }
                        return false;
                    case "outside":
                        if (args[2].type === "value_array" && rhs_rgs.length >= 2) {
                            return lhs < rhs_rgs[0] || lhs > rhs_rgs[1];
                        }
                        return false;
                    case "in":
                        if (args[2].type === "value_array") {
                            return rhs_rgs.includes(lhs);
                        }
                        return false;
                    case "!in":
                        if (args[2].type === "value_array") {
                            return !rhs_rgs.includes(lhs);
                        }
                        return false;
                    case "in~":
                        if (args[2].type === "value_array") {
                            return rhs_rgs.map(function (t) { return (typeof t === "string" ? t.toLowerCase() : t); }).includes(typeof lhs === "string" ? lhs.toLowerCase() : lhs);
                        }
                        return false;
                    case "!in~":
                        if (args[2].type === "value_array") {
                            return !rhs_rgs.map(function (t) { return (typeof t === "string" ? t.toLowerCase() : t); }).includes(typeof lhs === "string" ? lhs.toLowerCase() : lhs);
                        }
                        return false;
                    case "=~":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.toLowerCase().includes(rhs.toLowerCase());
                        }
                        return false;
                    case "!~":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.toLowerCase().includes(rhs.toLowerCase());
                        }
                        return false;
                    case "matches regex":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.match(rhs) !== null;
                        }
                        return false;
                    case "!matches regex":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.match(rhs) === null;
                        }
                        return false;
                    case "contains":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.toLowerCase().includes(rhs.toLowerCase());
                        }
                        return false;
                    case "!contains":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.toLowerCase().includes(rhs.toLowerCase());
                        }
                        return false;
                    case "contains_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.includes(rhs);
                        }
                        return false;
                    case "!contains_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.includes(rhs);
                        }
                        return false;
                    case "startswith":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.toLowerCase().startsWith(rhs.toLowerCase());
                        }
                        return false;
                    case "!startswith":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.toLowerCase().startsWith(rhs.toLowerCase());
                        }
                        return false;
                    case "startswith_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.startsWith(rhs);
                        }
                        return false;
                    case "!startswith_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.startsWith(rhs);
                        }
                        return false;
                    case "endswith":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.toLowerCase().endsWith(rhs.toLowerCase());
                        }
                        return false;
                    case "!endswith":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.toLowerCase().endsWith(rhs.toLowerCase());
                        }
                        return false;
                    case "endswith_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return lhs.endsWith(rhs);
                        }
                        return false;
                    case "!endswith_cs":
                        if (typeof lhs === "string" && typeof rhs === "string") {
                            return !lhs.endsWith(rhs);
                        }
                        return false;
                }
            }
            return false;
        });
    }
    else {
        return [];
    }
};
exports.filterData = filterData;
