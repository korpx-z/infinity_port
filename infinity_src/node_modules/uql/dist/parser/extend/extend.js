"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extend = void 0;
var lodash_1 = require("lodash");
var utils_1 = require("./../utils");
var extend = function (pv, cv) {
    var output = pv.output;
    if ((0, lodash_1.isArray)(output)) {
        output = output.map(function (o) {
            cv.value.forEach(function (ci) {
                if (ci.type === "function") {
                    o = get_extended_object(o, ci, output);
                }
                else if (ci.type === "ref") {
                    (0, lodash_1.set)(o, ci.alias || ci.value, (0, utils_1.get_single_value)(o, ci.value));
                }
            });
            return o;
        });
    }
    return __assign(__assign({}, pv), { output: output });
};
exports.extend = extend;
var get_extended_object = function (o, assignment, previous_value) {
    var args = assignment.args.map(function (arg) {
        if (arg.type === "ref")
            return (0, utils_1.get_single_value)(o, arg.value);
        else if (arg.type === "string" || arg.type === "identifier") {
            if (arg.value.toLowerCase() === "true")
                return true;
            else if (arg.value.toLowerCase() === "false")
                return false;
            return arg.value;
        }
        else if (arg.type === "number")
            return +arg.value;
        else
            return arg;
    });
    var value = (0, utils_1.get_value)(assignment.operator, args, previous_value);
    (0, lodash_1.set)(o, assignment.alias || assignment.operator, value);
    return o;
};
