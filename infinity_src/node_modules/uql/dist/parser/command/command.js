"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.command = void 0;
var lodash_1 = require("lodash");
var utils_1 = require("./../utils");
var command = function (pv, cv) {
    var output = pv.output;
    switch (cv.value.operator) {
        case "count":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("count", output);
            }
            break;
        case "sum":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("sum", output);
            }
            break;
        case "diff":
            if ((0, lodash_1.isArray)(output) && output.length === 2) {
                output = (0, utils_1.get_value)("diff", output);
            }
            break;
        case "mul":
            if ((0, lodash_1.isArray)(output) && output.length === 2) {
                output = (0, utils_1.get_value)("mul", output);
            }
            break;
        case "min":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("min", output);
            }
            break;
        case "max":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("max", output);
            }
            break;
        case "mean":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("mean", output);
            }
            break;
        case "first":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("first", output);
            }
            break;
        case "last":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("last", output);
            }
            break;
        case "latest":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("latest", output);
            }
            break;
        case "strcat":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("strcat", output);
            }
            break;
        case "dcount":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("dcount", output);
            }
            break;
        case "distinct":
            if ((0, lodash_1.isArray)(output)) {
                output = (0, utils_1.get_value)("distinct", output);
            }
            break;
        case "random":
            output = (0, utils_1.get_value)("random", []);
            break;
        case "toupper":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("toupper", [output]);
            }
            break;
        case "tolower":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("tolower", [output]);
            }
            break;
        case "strlen":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("strlen", [output]);
            }
            break;
        case "trim":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("trim", [output]);
            }
            break;
        case "trim_start":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("trim_start", [output]);
            }
            break;
        case "trim_end":
            if (typeof output === "string") {
                output = (0, utils_1.get_value)("trim_end", [output]);
            }
            break;
        default:
            break;
    }
    return __assign(__assign({}, pv), { output: output });
};
exports.command = command;
