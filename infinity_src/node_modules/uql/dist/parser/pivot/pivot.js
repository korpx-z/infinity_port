"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pivot = void 0;
var lodash_1 = require("lodash");
var summarize_1 = require("./../summarize/summarize");
var pivot = function (pv, cv) {
    var _a, _b;
    var input = pv.output;
    if (input == null || !(0, lodash_1.isArray)(input)) {
        return __assign(__assign({}, pv), { output: null });
    }
    var item = cv.value;
    var rows = [];
    if (item && item.fields && item.fields.length > 0) {
        rows = (0, lodash_1.uniq)(input.map(function (u) { return (item && item.fields ? u[item.fields[0].value] : ""); })).filter(function (v) { return v !== ""; });
    }
    var cols = [];
    if (item && item.fields && item.fields.length > 1) {
        cols = (0, lodash_1.uniq)(input.map(function (u) { return (item && item.fields ? u[item.fields[1].value] : ""); })).filter(function (v) { return v !== ""; });
    }
    if (((_a = item.fields) === null || _a === void 0 ? void 0 : _a.length) === 2) {
        var out_1 = [];
        rows.forEach(function (r) {
            var _a;
            var rowName = item && item.fields ? item.fields[0].value : "";
            var colName = item && item.fields ? item.fields[1].value : "";
            var outValue = (_a = {}, _a[rowName] = r, _a);
            cols.forEach(function (c) {
                var currentItems = input.filter(function (ins) { return ins[rowName] === r && ins[colName] === c; }) || [];
                if (currentItems.length === 0) {
                    outValue[c] = item.metric.operator === "count" || item.metric.operator === "dcount" || item.metric.operator === "sum" ? 0 : null;
                }
                else {
                    var v_1 = (0, summarize_1.UQLsummarize)({}, [__assign(__assign({}, item.metric), { alias: item.metric.operator })], currentItems);
                    outValue[c] = v_1[item.metric.operator];
                }
            });
            out_1.push(outValue);
        });
        return __assign(__assign({}, pv), { output: out_1 });
    }
    if (((_b = item.fields) === null || _b === void 0 ? void 0 : _b.length) === 1) {
        var out_2 = [];
        rows.forEach(function (r) {
            var _a;
            var rowName = item && item.fields ? item.fields[0].value : "";
            var outValue = (_a = {}, _a[rowName] = r, _a);
            var v = (0, summarize_1.UQLsummarize)({}, [__assign(__assign({}, item.metric), { alias: item.metric.operator })], input.filter(function (ins) { return ins[rowName] === r; }));
            outValue["value"] = v[item.metric.operator];
            out_2.push(outValue);
        });
        return __assign(__assign({}, pv), { output: out_2 });
    }
    var v = (0, summarize_1.UQLsummarize)({}, [__assign(__assign({}, item.metric), { alias: item.metric.operator })], input);
    return __assign(__assign({}, pv), { output: v[item.metric.operator] });
};
exports.pivot = pivot;
